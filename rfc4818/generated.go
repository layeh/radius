// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc4818

import (
	"net"

	"layeh.com/radius"
)

const (
	DelegatedIPv6Prefix_Type radius.Type = 123
)

func DelegatedIPv6Prefix_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Add(DelegatedIPv6Prefix_Type, a)
	return
}

func DelegatedIPv6Prefix_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = DelegatedIPv6Prefix_Lookup(p)
	return
}

func DelegatedIPv6Prefix_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range p.Attributes[DelegatedIPv6Prefix_Type] {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DelegatedIPv6Prefix_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := p.Lookup(DelegatedIPv6Prefix_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func DelegatedIPv6Prefix_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Set(DelegatedIPv6Prefix_Type, a)
	return
}

func DelegatedIPv6Prefix_Del(p *radius.Packet) {
	p.Attributes.Del(DelegatedIPv6Prefix_Type)
}
