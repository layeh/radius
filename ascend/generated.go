// Code generated by radius-dict-gen. DO NOT EDIT.

package ascend

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Ascend_VendorID = 529
)

func _Ascend_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Ascend_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Ascend_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ascend_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ascend_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Ascend_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ascend_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Ascend_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Ascend_AddVendor(p, typ, attr)
}

func _Ascend_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ascend_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type AscendMaxSharedUsers uint32

var AscendMaxSharedUsers_Strings = map[AscendMaxSharedUsers]string{}

func (a AscendMaxSharedUsers) String() string {
	if str, ok := AscendMaxSharedUsers_Strings[a]; ok {
		return str
	}
	return "AscendMaxSharedUsers(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMaxSharedUsers_Add(p *radius.Packet, value AscendMaxSharedUsers) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 2, a)
}

func AscendMaxSharedUsers_Get(p *radius.Packet) (value AscendMaxSharedUsers) {
	value, _ = AscendMaxSharedUsers_Lookup(p)
	return
}

func AscendMaxSharedUsers_Gets(p *radius.Packet) (values []AscendMaxSharedUsers, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMaxSharedUsers(i))
	}
	return
}

func AscendMaxSharedUsers_Lookup(p *radius.Packet) (value AscendMaxSharedUsers, err error) {
	a, ok := _Ascend_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMaxSharedUsers(i)
	return
}

func AscendMaxSharedUsers_Set(p *radius.Packet, value AscendMaxSharedUsers) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 2, a)
}

func AscendMaxSharedUsers_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 2)
}

func AscendUUInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 7, a)
}

func AscendUUInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 7, a)
}

func AscendUUInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendUUInfo_Lookup(p)
	return
}

func AscendUUInfo_GetString(p *radius.Packet) (value string) {
	value, _ = AscendUUInfo_LookupString(p)
	return
}

func AscendUUInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendUUInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendUUInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendUUInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendUUInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 7, a)
}

func AscendUUInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 7, a)
}

func AscendUUInfo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 7)
}

type AscendCIRTimer uint32

var AscendCIRTimer_Strings = map[AscendCIRTimer]string{}

func (a AscendCIRTimer) String() string {
	if str, ok := AscendCIRTimer_Strings[a]; ok {
		return str
	}
	return "AscendCIRTimer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCIRTimer_Add(p *radius.Packet, value AscendCIRTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 9, a)
}

func AscendCIRTimer_Get(p *radius.Packet) (value AscendCIRTimer) {
	value, _ = AscendCIRTimer_Lookup(p)
	return
}

func AscendCIRTimer_Gets(p *radius.Packet) (values []AscendCIRTimer, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCIRTimer(i))
	}
	return
}

func AscendCIRTimer_Lookup(p *radius.Packet) (value AscendCIRTimer, err error) {
	a, ok := _Ascend_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCIRTimer(i)
	return
}

func AscendCIRTimer_Set(p *radius.Packet, value AscendCIRTimer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 9, a)
}

func AscendCIRTimer_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 9)
}

type AscendFR08Mode uint32

var AscendFR08Mode_Strings = map[AscendFR08Mode]string{}

func (a AscendFR08Mode) String() string {
	if str, ok := AscendFR08Mode_Strings[a]; ok {
		return str
	}
	return "AscendFR08Mode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFR08Mode_Add(p *radius.Packet, value AscendFR08Mode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 10, a)
}

func AscendFR08Mode_Get(p *radius.Packet) (value AscendFR08Mode) {
	value, _ = AscendFR08Mode_Lookup(p)
	return
}

func AscendFR08Mode_Gets(p *radius.Packet) (values []AscendFR08Mode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFR08Mode(i))
	}
	return
}

func AscendFR08Mode_Lookup(p *radius.Packet) (value AscendFR08Mode, err error) {
	a, ok := _Ascend_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFR08Mode(i)
	return
}

func AscendFR08Mode_Set(p *radius.Packet, value AscendFR08Mode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 10, a)
}

func AscendFR08Mode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 10)
}

type AscendDestinationNasPort uint32

var AscendDestinationNasPort_Strings = map[AscendDestinationNasPort]string{}

func (a AscendDestinationNasPort) String() string {
	if str, ok := AscendDestinationNasPort_Strings[a]; ok {
		return str
	}
	return "AscendDestinationNasPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDestinationNasPort_Add(p *radius.Packet, value AscendDestinationNasPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 11, a)
}

func AscendDestinationNasPort_Get(p *radius.Packet) (value AscendDestinationNasPort) {
	value, _ = AscendDestinationNasPort_Lookup(p)
	return
}

func AscendDestinationNasPort_Gets(p *radius.Packet) (values []AscendDestinationNasPort, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDestinationNasPort(i))
	}
	return
}

func AscendDestinationNasPort_Lookup(p *radius.Packet) (value AscendDestinationNasPort, err error) {
	a, ok := _Ascend_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDestinationNasPort(i)
	return
}

func AscendDestinationNasPort_Set(p *radius.Packet, value AscendDestinationNasPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 11, a)
}

func AscendDestinationNasPort_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 11)
}

func AscendFRSVCAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 12, a)
}

func AscendFRSVCAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 12, a)
}

func AscendFRSVCAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFRSVCAddr_Lookup(p)
	return
}

func AscendFRSVCAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFRSVCAddr_LookupString(p)
	return
}

func AscendFRSVCAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRSVCAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRSVCAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFRSVCAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFRSVCAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 12, a)
}

func AscendFRSVCAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 12, a)
}

func AscendFRSVCAddr_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 12)
}

type AscendNASPortFormat uint32

const (
	AscendNASPortFormat_Value_Unknown AscendNASPortFormat = 0
	AscendNASPortFormat_Value_Two464  AscendNASPortFormat = 1
	AscendNASPortFormat_Value_Two455  AscendNASPortFormat = 2
	AscendNASPortFormat_Value_One22   AscendNASPortFormat = 3
)

var AscendNASPortFormat_Strings = map[AscendNASPortFormat]string{
	AscendNASPortFormat_Value_Unknown: "Unknown",
	AscendNASPortFormat_Value_Two464:  "2_4_6_4",
	AscendNASPortFormat_Value_Two455:  "2_4_5_5",
	AscendNASPortFormat_Value_One22:   "1_2_2",
}

func (a AscendNASPortFormat) String() string {
	if str, ok := AscendNASPortFormat_Strings[a]; ok {
		return str
	}
	return "AscendNASPortFormat(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendNASPortFormat_Add(p *radius.Packet, value AscendNASPortFormat) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 13, a)
}

func AscendNASPortFormat_Get(p *radius.Packet) (value AscendNASPortFormat) {
	value, _ = AscendNASPortFormat_Lookup(p)
	return
}

func AscendNASPortFormat_Gets(p *radius.Packet) (values []AscendNASPortFormat, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendNASPortFormat(i))
	}
	return
}

func AscendNASPortFormat_Lookup(p *radius.Packet) (value AscendNASPortFormat, err error) {
	a, ok := _Ascend_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendNASPortFormat(i)
	return
}

func AscendNASPortFormat_Set(p *radius.Packet, value AscendNASPortFormat) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 13, a)
}

func AscendNASPortFormat_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 13)
}

type AscendATMFaultManagement uint32

const (
	AscendATMFaultManagement_Value_VCNoLoopback       AscendATMFaultManagement = 0
	AscendATMFaultManagement_Value_VCSegmentLoopback  AscendATMFaultManagement = 1
	AscendATMFaultManagement_Value_VCEndToEndLoopback AscendATMFaultManagement = 2
)

var AscendATMFaultManagement_Strings = map[AscendATMFaultManagement]string{
	AscendATMFaultManagement_Value_VCNoLoopback:       "VC-No-Loopback",
	AscendATMFaultManagement_Value_VCSegmentLoopback:  "VC-Segment-Loopback",
	AscendATMFaultManagement_Value_VCEndToEndLoopback: "VC-End-To-End-Loopback",
}

func (a AscendATMFaultManagement) String() string {
	if str, ok := AscendATMFaultManagement_Strings[a]; ok {
		return str
	}
	return "AscendATMFaultManagement(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMFaultManagement_Add(p *radius.Packet, value AscendATMFaultManagement) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 14, a)
}

func AscendATMFaultManagement_Get(p *radius.Packet) (value AscendATMFaultManagement) {
	value, _ = AscendATMFaultManagement_Lookup(p)
	return
}

func AscendATMFaultManagement_Gets(p *radius.Packet) (values []AscendATMFaultManagement, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMFaultManagement(i))
	}
	return
}

func AscendATMFaultManagement_Lookup(p *radius.Packet) (value AscendATMFaultManagement, err error) {
	a, ok := _Ascend_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMFaultManagement(i)
	return
}

func AscendATMFaultManagement_Set(p *radius.Packet, value AscendATMFaultManagement) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 14, a)
}

func AscendATMFaultManagement_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 14)
}

type AscendATMLoopbackCellLoss uint32

var AscendATMLoopbackCellLoss_Strings = map[AscendATMLoopbackCellLoss]string{}

func (a AscendATMLoopbackCellLoss) String() string {
	if str, ok := AscendATMLoopbackCellLoss_Strings[a]; ok {
		return str
	}
	return "AscendATMLoopbackCellLoss(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMLoopbackCellLoss_Add(p *radius.Packet, value AscendATMLoopbackCellLoss) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 15, a)
}

func AscendATMLoopbackCellLoss_Get(p *radius.Packet) (value AscendATMLoopbackCellLoss) {
	value, _ = AscendATMLoopbackCellLoss_Lookup(p)
	return
}

func AscendATMLoopbackCellLoss_Gets(p *radius.Packet) (values []AscendATMLoopbackCellLoss, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMLoopbackCellLoss(i))
	}
	return
}

func AscendATMLoopbackCellLoss_Lookup(p *radius.Packet) (value AscendATMLoopbackCellLoss, err error) {
	a, ok := _Ascend_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMLoopbackCellLoss(i)
	return
}

func AscendATMLoopbackCellLoss_Set(p *radius.Packet, value AscendATMLoopbackCellLoss) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 15, a)
}

func AscendATMLoopbackCellLoss_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 15)
}

type AscendCktType uint32

const (
	AscendCktType_Value_AscendPVC AscendCktType = 0
	AscendCktType_Value_AscendSVC AscendCktType = 1
)

var AscendCktType_Strings = map[AscendCktType]string{
	AscendCktType_Value_AscendPVC: "Ascend-PVC",
	AscendCktType_Value_AscendSVC: "Ascend-SVC",
}

func (a AscendCktType) String() string {
	if str, ok := AscendCktType_Strings[a]; ok {
		return str
	}
	return "AscendCktType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCktType_Add(p *radius.Packet, value AscendCktType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 16, a)
}

func AscendCktType_Get(p *radius.Packet) (value AscendCktType) {
	value, _ = AscendCktType_Lookup(p)
	return
}

func AscendCktType_Gets(p *radius.Packet) (values []AscendCktType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCktType(i))
	}
	return
}

func AscendCktType_Lookup(p *radius.Packet) (value AscendCktType, err error) {
	a, ok := _Ascend_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCktType(i)
	return
}

func AscendCktType_Set(p *radius.Packet, value AscendCktType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 16, a)
}

func AscendCktType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 16)
}

type AscendSVCEnabled uint32

const (
	AscendSVCEnabled_Value_AscendSVCEnabledNo  AscendSVCEnabled = 0
	AscendSVCEnabled_Value_AscendSVCEnabledYes AscendSVCEnabled = 1
)

var AscendSVCEnabled_Strings = map[AscendSVCEnabled]string{
	AscendSVCEnabled_Value_AscendSVCEnabledNo:  "Ascend-SVC-Enabled-No",
	AscendSVCEnabled_Value_AscendSVCEnabledYes: "Ascend-SVC-Enabled-Yes",
}

func (a AscendSVCEnabled) String() string {
	if str, ok := AscendSVCEnabled_Strings[a]; ok {
		return str
	}
	return "AscendSVCEnabled(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSVCEnabled_Add(p *radius.Packet, value AscendSVCEnabled) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 17, a)
}

func AscendSVCEnabled_Get(p *radius.Packet) (value AscendSVCEnabled) {
	value, _ = AscendSVCEnabled_Lookup(p)
	return
}

func AscendSVCEnabled_Gets(p *radius.Packet) (values []AscendSVCEnabled, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSVCEnabled(i))
	}
	return
}

func AscendSVCEnabled_Lookup(p *radius.Packet) (value AscendSVCEnabled, err error) {
	a, ok := _Ascend_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSVCEnabled(i)
	return
}

func AscendSVCEnabled_Set(p *radius.Packet, value AscendSVCEnabled) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 17, a)
}

func AscendSVCEnabled_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 17)
}

type AscendSessionType uint32

const (
	AscendSessionType_Value_AscendSessionUnused    AscendSessionType = 0
	AscendSessionType_Value_AscendSessionUnknown   AscendSessionType = 1
	AscendSessionType_Value_AscendSessionG711Ulaw  AscendSessionType = 2
	AscendSessionType_Value_AscendSessionG711Alaw  AscendSessionType = 3
	AscendSessionType_Value_AscendSessionG723      AscendSessionType = 4
	AscendSessionType_Value_AscendSessionG729      AscendSessionType = 5
	AscendSessionType_Value_AscendSessionG72364KPS AscendSessionType = 6
	AscendSessionType_Value_AscendSessionG728      AscendSessionType = 7
	AscendSessionType_Value_AscendSessionRT24      AscendSessionType = 8
)

var AscendSessionType_Strings = map[AscendSessionType]string{
	AscendSessionType_Value_AscendSessionUnused:    "Ascend-Session-Unused",
	AscendSessionType_Value_AscendSessionUnknown:   "Ascend-Session-Unknown",
	AscendSessionType_Value_AscendSessionG711Ulaw:  "Ascend-Session-G711-Ulaw",
	AscendSessionType_Value_AscendSessionG711Alaw:  "Ascend-Session-G711-Alaw",
	AscendSessionType_Value_AscendSessionG723:      "Ascend-Session-G723",
	AscendSessionType_Value_AscendSessionG729:      "Ascend-Session-G729",
	AscendSessionType_Value_AscendSessionG72364KPS: "Ascend-Session-G723-64KPS",
	AscendSessionType_Value_AscendSessionG728:      "Ascend-Session-G728",
	AscendSessionType_Value_AscendSessionRT24:      "Ascend-Session-RT24",
}

func (a AscendSessionType) String() string {
	if str, ok := AscendSessionType_Strings[a]; ok {
		return str
	}
	return "AscendSessionType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSessionType_Add(p *radius.Packet, value AscendSessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 18, a)
}

func AscendSessionType_Get(p *radius.Packet) (value AscendSessionType) {
	value, _ = AscendSessionType_Lookup(p)
	return
}

func AscendSessionType_Gets(p *radius.Packet) (values []AscendSessionType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSessionType(i))
	}
	return
}

func AscendSessionType_Lookup(p *radius.Packet) (value AscendSessionType, err error) {
	a, ok := _Ascend_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSessionType(i)
	return
}

func AscendSessionType_Set(p *radius.Packet, value AscendSessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 18, a)
}

func AscendSessionType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 18)
}

func AscendH323Gatekeeper_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 19, a)
}

func AscendH323Gatekeeper_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendH323Gatekeeper_Lookup(p)
	return
}

func AscendH323Gatekeeper_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 19) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendH323Gatekeeper_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendH323Gatekeeper_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 19, a)
}

func AscendH323Gatekeeper_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 19)
}

func AscendGlobalCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 20, a)
}

func AscendGlobalCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 20, a)
}

func AscendGlobalCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendGlobalCallID_Lookup(p)
	return
}

func AscendGlobalCallID_GetString(p *radius.Packet) (value string) {
	value, _ = AscendGlobalCallID_LookupString(p)
	return
}

func AscendGlobalCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendGlobalCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendGlobalCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendGlobalCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendGlobalCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 20, a)
}

func AscendGlobalCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 20, a)
}

func AscendGlobalCallID_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 20)
}

type AscendH323ConferenceID uint32

var AscendH323ConferenceID_Strings = map[AscendH323ConferenceID]string{}

func (a AscendH323ConferenceID) String() string {
	if str, ok := AscendH323ConferenceID_Strings[a]; ok {
		return str
	}
	return "AscendH323ConferenceID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendH323ConferenceID_Add(p *radius.Packet, value AscendH323ConferenceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 21, a)
}

func AscendH323ConferenceID_Get(p *radius.Packet) (value AscendH323ConferenceID) {
	value, _ = AscendH323ConferenceID_Lookup(p)
	return
}

func AscendH323ConferenceID_Gets(p *radius.Packet) (values []AscendH323ConferenceID, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendH323ConferenceID(i))
	}
	return
}

func AscendH323ConferenceID_Lookup(p *radius.Packet) (value AscendH323ConferenceID, err error) {
	a, ok := _Ascend_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendH323ConferenceID(i)
	return
}

func AscendH323ConferenceID_Set(p *radius.Packet, value AscendH323ConferenceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 21, a)
}

func AscendH323ConferenceID_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 21)
}

func AscendH323FegwAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 22, a)
}

func AscendH323FegwAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendH323FegwAddress_Lookup(p)
	return
}

func AscendH323FegwAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 22) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendH323FegwAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendH323FegwAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 22, a)
}

func AscendH323FegwAddress_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 22)
}

type AscendH323DialedTime uint32

var AscendH323DialedTime_Strings = map[AscendH323DialedTime]string{}

func (a AscendH323DialedTime) String() string {
	if str, ok := AscendH323DialedTime_Strings[a]; ok {
		return str
	}
	return "AscendH323DialedTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendH323DialedTime_Add(p *radius.Packet, value AscendH323DialedTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 23, a)
}

func AscendH323DialedTime_Get(p *radius.Packet) (value AscendH323DialedTime) {
	value, _ = AscendH323DialedTime_Lookup(p)
	return
}

func AscendH323DialedTime_Gets(p *radius.Packet) (values []AscendH323DialedTime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendH323DialedTime(i))
	}
	return
}

func AscendH323DialedTime_Lookup(p *radius.Packet) (value AscendH323DialedTime, err error) {
	a, ok := _Ascend_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendH323DialedTime(i)
	return
}

func AscendH323DialedTime_Set(p *radius.Packet, value AscendH323DialedTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 23, a)
}

func AscendH323DialedTime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 23)
}

func AscendDialedNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 24, a)
}

func AscendDialedNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 24, a)
}

func AscendDialedNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendDialedNumber_Lookup(p)
	return
}

func AscendDialedNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AscendDialedNumber_LookupString(p)
	return
}

func AscendDialedNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDialedNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDialedNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendDialedNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendDialedNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 24, a)
}

func AscendDialedNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 24, a)
}

func AscendDialedNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 24)
}

type AscendInterArrivalJitter uint32

var AscendInterArrivalJitter_Strings = map[AscendInterArrivalJitter]string{}

func (a AscendInterArrivalJitter) String() string {
	if str, ok := AscendInterArrivalJitter_Strings[a]; ok {
		return str
	}
	return "AscendInterArrivalJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendInterArrivalJitter_Add(p *radius.Packet, value AscendInterArrivalJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 25, a)
}

func AscendInterArrivalJitter_Get(p *radius.Packet) (value AscendInterArrivalJitter) {
	value, _ = AscendInterArrivalJitter_Lookup(p)
	return
}

func AscendInterArrivalJitter_Gets(p *radius.Packet) (values []AscendInterArrivalJitter, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendInterArrivalJitter(i))
	}
	return
}

func AscendInterArrivalJitter_Lookup(p *radius.Packet) (value AscendInterArrivalJitter, err error) {
	a, ok := _Ascend_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendInterArrivalJitter(i)
	return
}

func AscendInterArrivalJitter_Set(p *radius.Packet, value AscendInterArrivalJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 25, a)
}

func AscendInterArrivalJitter_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 25)
}

type AscendDroppedOctets uint32

var AscendDroppedOctets_Strings = map[AscendDroppedOctets]string{}

func (a AscendDroppedOctets) String() string {
	if str, ok := AscendDroppedOctets_Strings[a]; ok {
		return str
	}
	return "AscendDroppedOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDroppedOctets_Add(p *radius.Packet, value AscendDroppedOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 26, a)
}

func AscendDroppedOctets_Get(p *radius.Packet) (value AscendDroppedOctets) {
	value, _ = AscendDroppedOctets_Lookup(p)
	return
}

func AscendDroppedOctets_Gets(p *radius.Packet) (values []AscendDroppedOctets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDroppedOctets(i))
	}
	return
}

func AscendDroppedOctets_Lookup(p *radius.Packet) (value AscendDroppedOctets, err error) {
	a, ok := _Ascend_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDroppedOctets(i)
	return
}

func AscendDroppedOctets_Set(p *radius.Packet, value AscendDroppedOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 26, a)
}

func AscendDroppedOctets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 26)
}

type AscendDroppedPackets uint32

var AscendDroppedPackets_Strings = map[AscendDroppedPackets]string{}

func (a AscendDroppedPackets) String() string {
	if str, ok := AscendDroppedPackets_Strings[a]; ok {
		return str
	}
	return "AscendDroppedPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDroppedPackets_Add(p *radius.Packet, value AscendDroppedPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 27, a)
}

func AscendDroppedPackets_Get(p *radius.Packet) (value AscendDroppedPackets) {
	value, _ = AscendDroppedPackets_Lookup(p)
	return
}

func AscendDroppedPackets_Gets(p *radius.Packet) (values []AscendDroppedPackets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDroppedPackets(i))
	}
	return
}

func AscendDroppedPackets_Lookup(p *radius.Packet) (value AscendDroppedPackets, err error) {
	a, ok := _Ascend_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDroppedPackets(i)
	return
}

func AscendDroppedPackets_Set(p *radius.Packet, value AscendDroppedPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 27, a)
}

func AscendDroppedPackets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 27)
}

type AscendAuthDelay uint32

var AscendAuthDelay_Strings = map[AscendAuthDelay]string{}

func (a AscendAuthDelay) String() string {
	if str, ok := AscendAuthDelay_Strings[a]; ok {
		return str
	}
	return "AscendAuthDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendAuthDelay_Add(p *radius.Packet, value AscendAuthDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 28, a)
}

func AscendAuthDelay_Get(p *radius.Packet) (value AscendAuthDelay) {
	value, _ = AscendAuthDelay_Lookup(p)
	return
}

func AscendAuthDelay_Gets(p *radius.Packet) (values []AscendAuthDelay, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendAuthDelay(i))
	}
	return
}

func AscendAuthDelay_Lookup(p *radius.Packet) (value AscendAuthDelay, err error) {
	a, ok := _Ascend_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendAuthDelay(i)
	return
}

func AscendAuthDelay_Set(p *radius.Packet, value AscendAuthDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 28, a)
}

func AscendAuthDelay_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 28)
}

type AscendX25PadX3Profile uint32

const (
	AscendX25PadX3Profile_Value_CRT      AscendX25PadX3Profile = 0
	AscendX25PadX3Profile_Value_INFONET  AscendX25PadX3Profile = 1
	AscendX25PadX3Profile_Value_DEFAULT  AscendX25PadX3Profile = 2
	AscendX25PadX3Profile_Value_SCEN     AscendX25PadX3Profile = 3
	AscendX25PadX3Profile_Value_CCSSP    AscendX25PadX3Profile = 4
	AscendX25PadX3Profile_Value_CCTSP    AscendX25PadX3Profile = 5
	AscendX25PadX3Profile_Value_HARDCOPY AscendX25PadX3Profile = 6
	AscendX25PadX3Profile_Value_HDX      AscendX25PadX3Profile = 7
	AscendX25PadX3Profile_Value_SHARK    AscendX25PadX3Profile = 8
	AscendX25PadX3Profile_Value_POS      AscendX25PadX3Profile = 9
	AscendX25PadX3Profile_Value_NULL     AscendX25PadX3Profile = 10
	AscendX25PadX3Profile_Value_CUSTOM   AscendX25PadX3Profile = 11
)

var AscendX25PadX3Profile_Strings = map[AscendX25PadX3Profile]string{
	AscendX25PadX3Profile_Value_CRT:      "CRT",
	AscendX25PadX3Profile_Value_INFONET:  "INFONET",
	AscendX25PadX3Profile_Value_DEFAULT:  "DEFAULT",
	AscendX25PadX3Profile_Value_SCEN:     "SCEN",
	AscendX25PadX3Profile_Value_CCSSP:    "CC_SSP",
	AscendX25PadX3Profile_Value_CCTSP:    "CC_TSP",
	AscendX25PadX3Profile_Value_HARDCOPY: "HARDCOPY",
	AscendX25PadX3Profile_Value_HDX:      "HDX",
	AscendX25PadX3Profile_Value_SHARK:    "SHARK",
	AscendX25PadX3Profile_Value_POS:      "POS",
	AscendX25PadX3Profile_Value_NULL:     "NULL",
	AscendX25PadX3Profile_Value_CUSTOM:   "CUSTOM",
}

func (a AscendX25PadX3Profile) String() string {
	if str, ok := AscendX25PadX3Profile_Strings[a]; ok {
		return str
	}
	return "AscendX25PadX3Profile(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendX25PadX3Profile_Add(p *radius.Packet, value AscendX25PadX3Profile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 29, a)
}

func AscendX25PadX3Profile_Get(p *radius.Packet) (value AscendX25PadX3Profile) {
	value, _ = AscendX25PadX3Profile_Lookup(p)
	return
}

func AscendX25PadX3Profile_Gets(p *radius.Packet) (values []AscendX25PadX3Profile, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendX25PadX3Profile(i))
	}
	return
}

func AscendX25PadX3Profile_Lookup(p *radius.Packet) (value AscendX25PadX3Profile, err error) {
	a, ok := _Ascend_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendX25PadX3Profile(i)
	return
}

func AscendX25PadX3Profile_Set(p *radius.Packet, value AscendX25PadX3Profile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 29, a)
}

func AscendX25PadX3Profile_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 29)
}

func AscendX25PadX3Parameters_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 30, a)
}

func AscendX25PadX3Parameters_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 30, a)
}

func AscendX25PadX3Parameters_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadX3Parameters_Lookup(p)
	return
}

func AscendX25PadX3Parameters_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadX3Parameters_LookupString(p)
	return
}

func AscendX25PadX3Parameters_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadX3Parameters_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadX3Parameters_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadX3Parameters_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadX3Parameters_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 30, a)
}

func AscendX25PadX3Parameters_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 30, a)
}

func AscendX25PadX3Parameters_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 30)
}

func AscendTunnelVRouterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 31, a)
}

func AscendTunnelVRouterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 31, a)
}

func AscendTunnelVRouterName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendTunnelVRouterName_Lookup(p)
	return
}

func AscendTunnelVRouterName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendTunnelVRouterName_LookupString(p)
	return
}

func AscendTunnelVRouterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTunnelVRouterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTunnelVRouterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendTunnelVRouterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendTunnelVRouterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 31, a)
}

func AscendTunnelVRouterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 31, a)
}

func AscendTunnelVRouterName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 31)
}

type AscendX25ReverseCharging uint32

const (
	AscendX25ReverseCharging_Value_ReverseChargingNo  AscendX25ReverseCharging = 0
	AscendX25ReverseCharging_Value_ReverseChargingYes AscendX25ReverseCharging = 1
)

var AscendX25ReverseCharging_Strings = map[AscendX25ReverseCharging]string{
	AscendX25ReverseCharging_Value_ReverseChargingNo:  "Reverse-Charging-No",
	AscendX25ReverseCharging_Value_ReverseChargingYes: "Reverse-Charging-Yes",
}

func (a AscendX25ReverseCharging) String() string {
	if str, ok := AscendX25ReverseCharging_Strings[a]; ok {
		return str
	}
	return "AscendX25ReverseCharging(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendX25ReverseCharging_Add(p *radius.Packet, value AscendX25ReverseCharging) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 32, a)
}

func AscendX25ReverseCharging_Get(p *radius.Packet) (value AscendX25ReverseCharging) {
	value, _ = AscendX25ReverseCharging_Lookup(p)
	return
}

func AscendX25ReverseCharging_Gets(p *radius.Packet) (values []AscendX25ReverseCharging, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendX25ReverseCharging(i))
	}
	return
}

func AscendX25ReverseCharging_Lookup(p *radius.Packet) (value AscendX25ReverseCharging, err error) {
	a, ok := _Ascend_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendX25ReverseCharging(i)
	return
}

func AscendX25ReverseCharging_Set(p *radius.Packet, value AscendX25ReverseCharging) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 32, a)
}

func AscendX25ReverseCharging_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 32)
}

func AscendX25NuiPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 33, a)
}

func AscendX25NuiPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 33, a)
}

func AscendX25NuiPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25NuiPrompt_Lookup(p)
	return
}

func AscendX25NuiPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25NuiPrompt_LookupString(p)
	return
}

func AscendX25NuiPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25NuiPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25NuiPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25NuiPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25NuiPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 33, a)
}

func AscendX25NuiPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 33, a)
}

func AscendX25NuiPrompt_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 33)
}

func AscendX25NuiPasswordPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 34, a)
}

func AscendX25NuiPasswordPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 34, a)
}

func AscendX25NuiPasswordPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25NuiPasswordPrompt_Lookup(p)
	return
}

func AscendX25NuiPasswordPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25NuiPasswordPrompt_LookupString(p)
	return
}

func AscendX25NuiPasswordPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25NuiPasswordPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25NuiPasswordPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25NuiPasswordPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25NuiPasswordPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 34, a)
}

func AscendX25NuiPasswordPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 34, a)
}

func AscendX25NuiPasswordPrompt_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 34)
}

func AscendX25Cug_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 35, a)
}

func AscendX25Cug_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 35, a)
}

func AscendX25Cug_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25Cug_Lookup(p)
	return
}

func AscendX25Cug_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25Cug_LookupString(p)
	return
}

func AscendX25Cug_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Cug_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Cug_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25Cug_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25Cug_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 35, a)
}

func AscendX25Cug_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 35, a)
}

func AscendX25Cug_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 35)
}

func AscendX25PadAlias1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 36, a)
}

func AscendX25PadAlias1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 36, a)
}

func AscendX25PadAlias1_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadAlias1_Lookup(p)
	return
}

func AscendX25PadAlias1_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadAlias1_LookupString(p)
	return
}

func AscendX25PadAlias1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadAlias1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadAlias1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 36, a)
}

func AscendX25PadAlias1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 36, a)
}

func AscendX25PadAlias1_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 36)
}

func AscendX25PadAlias2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 37, a)
}

func AscendX25PadAlias2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 37, a)
}

func AscendX25PadAlias2_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadAlias2_Lookup(p)
	return
}

func AscendX25PadAlias2_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadAlias2_LookupString(p)
	return
}

func AscendX25PadAlias2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadAlias2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadAlias2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 37, a)
}

func AscendX25PadAlias2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 37, a)
}

func AscendX25PadAlias2_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 37)
}

func AscendX25PadAlias3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 38, a)
}

func AscendX25PadAlias3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 38, a)
}

func AscendX25PadAlias3_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadAlias3_Lookup(p)
	return
}

func AscendX25PadAlias3_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadAlias3_LookupString(p)
	return
}

func AscendX25PadAlias3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadAlias3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadAlias3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadAlias3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 38, a)
}

func AscendX25PadAlias3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 38, a)
}

func AscendX25PadAlias3_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 38)
}

func AscendX25X121Address_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 39, a)
}

func AscendX25X121Address_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 39, a)
}

func AscendX25X121Address_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25X121Address_Lookup(p)
	return
}

func AscendX25X121Address_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25X121Address_LookupString(p)
	return
}

func AscendX25X121Address_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25X121Address_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25X121Address_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25X121Address_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25X121Address_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 39, a)
}

func AscendX25X121Address_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 39, a)
}

func AscendX25X121Address_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 39)
}

func AscendX25Nui_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 40, a)
}

func AscendX25Nui_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 40, a)
}

func AscendX25Nui_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25Nui_Lookup(p)
	return
}

func AscendX25Nui_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25Nui_LookupString(p)
	return
}

func AscendX25Nui_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Nui_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Nui_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25Nui_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25Nui_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 40, a)
}

func AscendX25Nui_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 40, a)
}

func AscendX25Nui_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 40)
}

func AscendX25Rpoa_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 41, a)
}

func AscendX25Rpoa_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 41, a)
}

func AscendX25Rpoa_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25Rpoa_Lookup(p)
	return
}

func AscendX25Rpoa_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25Rpoa_LookupString(p)
	return
}

func AscendX25Rpoa_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Rpoa_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25Rpoa_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25Rpoa_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25Rpoa_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 41, a)
}

func AscendX25Rpoa_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 41, a)
}

func AscendX25Rpoa_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 41)
}

func AscendX25PadPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 42, a)
}

func AscendX25PadPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 42, a)
}

func AscendX25PadPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadPrompt_Lookup(p)
	return
}

func AscendX25PadPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadPrompt_LookupString(p)
	return
}

func AscendX25PadPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 42) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 42) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 42, a)
}

func AscendX25PadPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 42, a)
}

func AscendX25PadPrompt_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 42)
}

func AscendX25PadBanner_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 43, a)
}

func AscendX25PadBanner_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 43, a)
}

func AscendX25PadBanner_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25PadBanner_Lookup(p)
	return
}

func AscendX25PadBanner_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25PadBanner_LookupString(p)
	return
}

func AscendX25PadBanner_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadBanner_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25PadBanner_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25PadBanner_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25PadBanner_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 43, a)
}

func AscendX25PadBanner_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 43, a)
}

func AscendX25PadBanner_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 43)
}

func AscendX25ProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 44, a)
}

func AscendX25ProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 44, a)
}

func AscendX25ProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendX25ProfileName_Lookup(p)
	return
}

func AscendX25ProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendX25ProfileName_LookupString(p)
	return
}

func AscendX25ProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25ProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendX25ProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendX25ProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendX25ProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 44, a)
}

func AscendX25ProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 44, a)
}

func AscendX25ProfileName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 44)
}

func AscendRecvName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 45, a)
}

func AscendRecvName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 45, a)
}

func AscendRecvName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendRecvName_Lookup(p)
	return
}

func AscendRecvName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendRecvName_LookupString(p)
	return
}

func AscendRecvName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRecvName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRecvName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendRecvName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendRecvName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 45, a)
}

func AscendRecvName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 45, a)
}

func AscendRecvName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 45)
}

type AscendBiDirectionalAuth uint32

const (
	AscendBiDirectionalAuth_Value_BiDirectionalAuthNone     AscendBiDirectionalAuth = 0
	AscendBiDirectionalAuth_Value_BiDirectionalAuthAllowed  AscendBiDirectionalAuth = 1
	AscendBiDirectionalAuth_Value_BiDirectionalAuthRequired AscendBiDirectionalAuth = 2
)

var AscendBiDirectionalAuth_Strings = map[AscendBiDirectionalAuth]string{
	AscendBiDirectionalAuth_Value_BiDirectionalAuthNone:     "Bi-Directional-Auth-None",
	AscendBiDirectionalAuth_Value_BiDirectionalAuthAllowed:  "Bi-Directional-Auth-Allowed",
	AscendBiDirectionalAuth_Value_BiDirectionalAuthRequired: "Bi-Directional-Auth-Required",
}

func (a AscendBiDirectionalAuth) String() string {
	if str, ok := AscendBiDirectionalAuth_Strings[a]; ok {
		return str
	}
	return "AscendBiDirectionalAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBiDirectionalAuth_Add(p *radius.Packet, value AscendBiDirectionalAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 46, a)
}

func AscendBiDirectionalAuth_Get(p *radius.Packet) (value AscendBiDirectionalAuth) {
	value, _ = AscendBiDirectionalAuth_Lookup(p)
	return
}

func AscendBiDirectionalAuth_Gets(p *radius.Packet) (values []AscendBiDirectionalAuth, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBiDirectionalAuth(i))
	}
	return
}

func AscendBiDirectionalAuth_Lookup(p *radius.Packet) (value AscendBiDirectionalAuth, err error) {
	a, ok := _Ascend_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBiDirectionalAuth(i)
	return
}

func AscendBiDirectionalAuth_Set(p *radius.Packet, value AscendBiDirectionalAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 46, a)
}

func AscendBiDirectionalAuth_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 46)
}

type AscendMTU uint32

var AscendMTU_Strings = map[AscendMTU]string{}

func (a AscendMTU) String() string {
	if str, ok := AscendMTU_Strings[a]; ok {
		return str
	}
	return "AscendMTU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMTU_Add(p *radius.Packet, value AscendMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 47, a)
}

func AscendMTU_Get(p *radius.Packet) (value AscendMTU) {
	value, _ = AscendMTU_Lookup(p)
	return
}

func AscendMTU_Gets(p *radius.Packet) (values []AscendMTU, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 47) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMTU(i))
	}
	return
}

func AscendMTU_Lookup(p *radius.Packet) (value AscendMTU, err error) {
	a, ok := _Ascend_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMTU(i)
	return
}

func AscendMTU_Set(p *radius.Packet, value AscendMTU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 47, a)
}

func AscendMTU_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 47)
}

type AscendCallDirection uint32

const (
	AscendCallDirection_Value_AscendCallDirectionIncoming AscendCallDirection = 0
	AscendCallDirection_Value_AscendCallDirectionOutgoing AscendCallDirection = 1
)

var AscendCallDirection_Strings = map[AscendCallDirection]string{
	AscendCallDirection_Value_AscendCallDirectionIncoming: "Ascend-Call-Direction-Incoming",
	AscendCallDirection_Value_AscendCallDirectionOutgoing: "Ascend-Call-Direction-Outgoing",
}

func (a AscendCallDirection) String() string {
	if str, ok := AscendCallDirection_Strings[a]; ok {
		return str
	}
	return "AscendCallDirection(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallDirection_Add(p *radius.Packet, value AscendCallDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 48, a)
}

func AscendCallDirection_Get(p *radius.Packet) (value AscendCallDirection) {
	value, _ = AscendCallDirection_Lookup(p)
	return
}

func AscendCallDirection_Gets(p *radius.Packet) (values []AscendCallDirection, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallDirection(i))
	}
	return
}

func AscendCallDirection_Lookup(p *radius.Packet) (value AscendCallDirection, err error) {
	a, ok := _Ascend_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallDirection(i)
	return
}

func AscendCallDirection_Set(p *radius.Packet, value AscendCallDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 48, a)
}

func AscendCallDirection_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 48)
}

type AscendServiceType uint32

const (
	AscendServiceType_Value_AscendServiceTypeNotUsed     AscendServiceType = 0
	AscendServiceType_Value_AscendServiceTypeNone        AscendServiceType = 1
	AscendServiceType_Value_AscendServiceTypeOther       AscendServiceType = 2
	AscendServiceType_Value_AscendServiceTypePPP         AscendServiceType = 3
	AscendServiceType_Value_AscendServiceTypeSlip        AscendServiceType = 4
	AscendServiceType_Value_AscendServiceTypeMPP         AscendServiceType = 5
	AscendServiceType_Value_AscendServiceTypeX25         AscendServiceType = 6
	AscendServiceType_Value_AscendServiceTypeCombinet    AscendServiceType = 7
	AscendServiceType_Value_AscendServiceTypeFR          AscendServiceType = 8
	AscendServiceType_Value_AscendServiceTypeEuRaw       AscendServiceType = 9
	AscendServiceType_Value_AscendServiceTypeEuUi        AscendServiceType = 10
	AscendServiceType_Value_AscendServiceTypeTelnet      AscendServiceType = 11
	AscendServiceType_Value_AscendServiceTypeTelnetBin   AscendServiceType = 12
	AscendServiceType_Value_AscendServiceTypeRawTcp      AscendServiceType = 13
	AscendServiceType_Value_AscendServiceTypeTermServer  AscendServiceType = 14
	AscendServiceType_Value_AscendServiceTypeMP          AscendServiceType = 15
	AscendServiceType_Value_AscendServiceTypeVirtualConn AscendServiceType = 16
	AscendServiceType_Value_AscendServiceTypeX25DChan    AscendServiceType = 17
	AscendServiceType_Value_AscendServiceTypePseuTunPPP  AscendServiceType = 18
	AscendServiceType_Value_AscendServiceTypeIpFax       AscendServiceType = 19
	AscendServiceType_Value_AscendServiceTypeATM         AscendServiceType = 20
	AscendServiceType_Value_AscendServiceTypeHdlcNrm     AscendServiceType = 21
	AscendServiceType_Value_AscendServiceTypeVoIp        AscendServiceType = 22
	AscendServiceType_Value_AscendServiceTypeVisa2       AscendServiceType = 23
	AscendServiceType_Value_AscendServiceTypeNetToNet    AscendServiceType = 25
)

var AscendServiceType_Strings = map[AscendServiceType]string{
	AscendServiceType_Value_AscendServiceTypeNotUsed:     "Ascend-Service-Type-NotUsed",
	AscendServiceType_Value_AscendServiceTypeNone:        "Ascend-Service-Type-None",
	AscendServiceType_Value_AscendServiceTypeOther:       "Ascend-Service-Type-Other",
	AscendServiceType_Value_AscendServiceTypePPP:         "Ascend-Service-Type-PPP",
	AscendServiceType_Value_AscendServiceTypeSlip:        "Ascend-Service-Type-Slip",
	AscendServiceType_Value_AscendServiceTypeMPP:         "Ascend-Service-Type-MPP",
	AscendServiceType_Value_AscendServiceTypeX25:         "Ascend-Service-Type-X25",
	AscendServiceType_Value_AscendServiceTypeCombinet:    "Ascend-Service-Type-Combinet",
	AscendServiceType_Value_AscendServiceTypeFR:          "Ascend-Service-Type-FR",
	AscendServiceType_Value_AscendServiceTypeEuRaw:       "Ascend-Service-Type-EuRaw",
	AscendServiceType_Value_AscendServiceTypeEuUi:        "Ascend-Service-Type-EuUi",
	AscendServiceType_Value_AscendServiceTypeTelnet:      "Ascend-Service-Type-Telnet",
	AscendServiceType_Value_AscendServiceTypeTelnetBin:   "Ascend-Service-Type-TelnetBin",
	AscendServiceType_Value_AscendServiceTypeRawTcp:      "Ascend-Service-Type-RawTcp",
	AscendServiceType_Value_AscendServiceTypeTermServer:  "Ascend-Service-Type-TermServer",
	AscendServiceType_Value_AscendServiceTypeMP:          "Ascend-Service-Type-MP",
	AscendServiceType_Value_AscendServiceTypeVirtualConn: "Ascend-Service-Type-VirtualConn",
	AscendServiceType_Value_AscendServiceTypeX25DChan:    "Ascend-Service-Type-X25DChan",
	AscendServiceType_Value_AscendServiceTypePseuTunPPP:  "Ascend-Service-Type-PseuTunPPP",
	AscendServiceType_Value_AscendServiceTypeIpFax:       "Ascend-Service-Type-IpFax",
	AscendServiceType_Value_AscendServiceTypeATM:         "Ascend-Service-Type-ATM",
	AscendServiceType_Value_AscendServiceTypeHdlcNrm:     "Ascend-Service-Type-HdlcNrm",
	AscendServiceType_Value_AscendServiceTypeVoIp:        "Ascend-Service-Type-VoIp",
	AscendServiceType_Value_AscendServiceTypeVisa2:       "Ascend-Service-Type-Visa2",
	AscendServiceType_Value_AscendServiceTypeNetToNet:    "Ascend-Service-Type-NetToNet",
}

func (a AscendServiceType) String() string {
	if str, ok := AscendServiceType_Strings[a]; ok {
		return str
	}
	return "AscendServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendServiceType_Add(p *radius.Packet, value AscendServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 49, a)
}

func AscendServiceType_Get(p *radius.Packet) (value AscendServiceType) {
	value, _ = AscendServiceType_Lookup(p)
	return
}

func AscendServiceType_Gets(p *radius.Packet) (values []AscendServiceType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 49) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendServiceType(i))
	}
	return
}

func AscendServiceType_Lookup(p *radius.Packet) (value AscendServiceType, err error) {
	a, ok := _Ascend_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendServiceType(i)
	return
}

func AscendServiceType_Set(p *radius.Packet, value AscendServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 49, a)
}

func AscendServiceType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 49)
}

type AscendFilterRequired uint32

const (
	AscendFilterRequired_Value_RequiredNo  AscendFilterRequired = 0
	AscendFilterRequired_Value_RequiredYes AscendFilterRequired = 1
)

var AscendFilterRequired_Strings = map[AscendFilterRequired]string{
	AscendFilterRequired_Value_RequiredNo:  "Required-No",
	AscendFilterRequired_Value_RequiredYes: "Required-Yes",
}

func (a AscendFilterRequired) String() string {
	if str, ok := AscendFilterRequired_Strings[a]; ok {
		return str
	}
	return "AscendFilterRequired(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFilterRequired_Add(p *radius.Packet, value AscendFilterRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 50, a)
}

func AscendFilterRequired_Get(p *radius.Packet) (value AscendFilterRequired) {
	value, _ = AscendFilterRequired_Lookup(p)
	return
}

func AscendFilterRequired_Gets(p *radius.Packet) (values []AscendFilterRequired, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFilterRequired(i))
	}
	return
}

func AscendFilterRequired_Lookup(p *radius.Packet) (value AscendFilterRequired, err error) {
	a, ok := _Ascend_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFilterRequired(i)
	return
}

func AscendFilterRequired_Set(p *radius.Packet, value AscendFilterRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 50, a)
}

func AscendFilterRequired_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 50)
}

type AscendTrafficShaper uint32

var AscendTrafficShaper_Strings = map[AscendTrafficShaper]string{}

func (a AscendTrafficShaper) String() string {
	if str, ok := AscendTrafficShaper_Strings[a]; ok {
		return str
	}
	return "AscendTrafficShaper(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTrafficShaper_Add(p *radius.Packet, value AscendTrafficShaper) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 51, a)
}

func AscendTrafficShaper_Get(p *radius.Packet) (value AscendTrafficShaper) {
	value, _ = AscendTrafficShaper_Lookup(p)
	return
}

func AscendTrafficShaper_Gets(p *radius.Packet) (values []AscendTrafficShaper, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTrafficShaper(i))
	}
	return
}

func AscendTrafficShaper_Lookup(p *radius.Packet) (value AscendTrafficShaper, err error) {
	a, ok := _Ascend_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTrafficShaper(i)
	return
}

func AscendTrafficShaper_Set(p *radius.Packet, value AscendTrafficShaper) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 51, a)
}

func AscendTrafficShaper_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 51)
}

func AscendAccessInterceptLEA_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 52, a)
}

func AscendAccessInterceptLEA_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 52, a)
}

func AscendAccessInterceptLEA_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAccessInterceptLEA_Lookup(p)
	return
}

func AscendAccessInterceptLEA_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAccessInterceptLEA_LookupString(p)
	return
}

func AscendAccessInterceptLEA_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAccessInterceptLEA_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAccessInterceptLEA_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAccessInterceptLEA_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAccessInterceptLEA_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 52, a)
}

func AscendAccessInterceptLEA_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 52, a)
}

func AscendAccessInterceptLEA_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 52)
}

func AscendAccessInterceptLog_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 53, a)
}

func AscendAccessInterceptLog_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 53, a)
}

func AscendAccessInterceptLog_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAccessInterceptLog_Lookup(p)
	return
}

func AscendAccessInterceptLog_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAccessInterceptLog_LookupString(p)
	return
}

func AscendAccessInterceptLog_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 53) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAccessInterceptLog_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 53) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAccessInterceptLog_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAccessInterceptLog_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAccessInterceptLog_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 53, a)
}

func AscendAccessInterceptLog_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 53, a)
}

func AscendAccessInterceptLog_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 53)
}

func AscendPrivateRouteTableID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 54, a)
}

func AscendPrivateRouteTableID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 54, a)
}

func AscendPrivateRouteTableID_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendPrivateRouteTableID_Lookup(p)
	return
}

func AscendPrivateRouteTableID_GetString(p *radius.Packet) (value string) {
	value, _ = AscendPrivateRouteTableID_LookupString(p)
	return
}

func AscendPrivateRouteTableID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrivateRouteTableID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrivateRouteTableID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendPrivateRouteTableID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendPrivateRouteTableID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 54, a)
}

func AscendPrivateRouteTableID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 54, a)
}

func AscendPrivateRouteTableID_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 54)
}

type AscendPrivateRouteRequired uint32

const (
	AscendPrivateRouteRequired_Value_RequiredNo  AscendPrivateRouteRequired = 0
	AscendPrivateRouteRequired_Value_RequiredYes AscendPrivateRouteRequired = 1
)

var AscendPrivateRouteRequired_Strings = map[AscendPrivateRouteRequired]string{
	AscendPrivateRouteRequired_Value_RequiredNo:  "Required-No",
	AscendPrivateRouteRequired_Value_RequiredYes: "Required-Yes",
}

func (a AscendPrivateRouteRequired) String() string {
	if str, ok := AscendPrivateRouteRequired_Strings[a]; ok {
		return str
	}
	return "AscendPrivateRouteRequired(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPrivateRouteRequired_Add(p *radius.Packet, value AscendPrivateRouteRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 55, a)
}

func AscendPrivateRouteRequired_Get(p *radius.Packet) (value AscendPrivateRouteRequired) {
	value, _ = AscendPrivateRouteRequired_Lookup(p)
	return
}

func AscendPrivateRouteRequired_Gets(p *radius.Packet) (values []AscendPrivateRouteRequired, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 55) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPrivateRouteRequired(i))
	}
	return
}

func AscendPrivateRouteRequired_Lookup(p *radius.Packet) (value AscendPrivateRouteRequired, err error) {
	a, ok := _Ascend_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPrivateRouteRequired(i)
	return
}

func AscendPrivateRouteRequired_Set(p *radius.Packet, value AscendPrivateRouteRequired) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 55, a)
}

func AscendPrivateRouteRequired_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 55)
}

type AscendCacheRefresh uint32

const (
	AscendCacheRefresh_Value_RefreshNo  AscendCacheRefresh = 0
	AscendCacheRefresh_Value_RefreshYes AscendCacheRefresh = 1
)

var AscendCacheRefresh_Strings = map[AscendCacheRefresh]string{
	AscendCacheRefresh_Value_RefreshNo:  "Refresh-No",
	AscendCacheRefresh_Value_RefreshYes: "Refresh-Yes",
}

func (a AscendCacheRefresh) String() string {
	if str, ok := AscendCacheRefresh_Strings[a]; ok {
		return str
	}
	return "AscendCacheRefresh(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCacheRefresh_Add(p *radius.Packet, value AscendCacheRefresh) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 56, a)
}

func AscendCacheRefresh_Get(p *radius.Packet) (value AscendCacheRefresh) {
	value, _ = AscendCacheRefresh_Lookup(p)
	return
}

func AscendCacheRefresh_Gets(p *radius.Packet) (values []AscendCacheRefresh, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 56) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCacheRefresh(i))
	}
	return
}

func AscendCacheRefresh_Lookup(p *radius.Packet) (value AscendCacheRefresh, err error) {
	a, ok := _Ascend_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCacheRefresh(i)
	return
}

func AscendCacheRefresh_Set(p *radius.Packet, value AscendCacheRefresh) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 56, a)
}

func AscendCacheRefresh_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 56)
}

type AscendCacheTime uint32

var AscendCacheTime_Strings = map[AscendCacheTime]string{}

func (a AscendCacheTime) String() string {
	if str, ok := AscendCacheTime_Strings[a]; ok {
		return str
	}
	return "AscendCacheTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCacheTime_Add(p *radius.Packet, value AscendCacheTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 57, a)
}

func AscendCacheTime_Get(p *radius.Packet) (value AscendCacheTime) {
	value, _ = AscendCacheTime_Lookup(p)
	return
}

func AscendCacheTime_Gets(p *radius.Packet) (values []AscendCacheTime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 57) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCacheTime(i))
	}
	return
}

func AscendCacheTime_Lookup(p *radius.Packet) (value AscendCacheTime, err error) {
	a, ok := _Ascend_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCacheTime(i)
	return
}

func AscendCacheTime_Set(p *radius.Packet, value AscendCacheTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 57, a)
}

func AscendCacheTime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 57)
}

type AscendEgressEnabled uint32

var AscendEgressEnabled_Strings = map[AscendEgressEnabled]string{}

func (a AscendEgressEnabled) String() string {
	if str, ok := AscendEgressEnabled_Strings[a]; ok {
		return str
	}
	return "AscendEgressEnabled(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendEgressEnabled_Add(p *radius.Packet, value AscendEgressEnabled) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 58, a)
}

func AscendEgressEnabled_Get(p *radius.Packet) (value AscendEgressEnabled) {
	value, _ = AscendEgressEnabled_Lookup(p)
	return
}

func AscendEgressEnabled_Gets(p *radius.Packet) (values []AscendEgressEnabled, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 58) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendEgressEnabled(i))
	}
	return
}

func AscendEgressEnabled_Lookup(p *radius.Packet) (value AscendEgressEnabled, err error) {
	a, ok := _Ascend_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendEgressEnabled(i)
	return
}

func AscendEgressEnabled_Set(p *radius.Packet, value AscendEgressEnabled) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 58, a)
}

func AscendEgressEnabled_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 58)
}

func AscendQOSUpstream_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 59, a)
}

func AscendQOSUpstream_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 59, a)
}

func AscendQOSUpstream_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendQOSUpstream_Lookup(p)
	return
}

func AscendQOSUpstream_GetString(p *radius.Packet) (value string) {
	value, _ = AscendQOSUpstream_LookupString(p)
	return
}

func AscendQOSUpstream_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendQOSUpstream_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendQOSUpstream_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendQOSUpstream_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendQOSUpstream_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 59, a)
}

func AscendQOSUpstream_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 59, a)
}

func AscendQOSUpstream_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 59)
}

func AscendQOSDownstream_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 60, a)
}

func AscendQOSDownstream_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 60, a)
}

func AscendQOSDownstream_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendQOSDownstream_Lookup(p)
	return
}

func AscendQOSDownstream_GetString(p *radius.Packet) (value string) {
	value, _ = AscendQOSDownstream_LookupString(p)
	return
}

func AscendQOSDownstream_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendQOSDownstream_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendQOSDownstream_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendQOSDownstream_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendQOSDownstream_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 60, a)
}

func AscendQOSDownstream_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 60, a)
}

func AscendQOSDownstream_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 60)
}

type AscendATMConnectVpi uint32

var AscendATMConnectVpi_Strings = map[AscendATMConnectVpi]string{}

func (a AscendATMConnectVpi) String() string {
	if str, ok := AscendATMConnectVpi_Strings[a]; ok {
		return str
	}
	return "AscendATMConnectVpi(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMConnectVpi_Add(p *radius.Packet, value AscendATMConnectVpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 61, a)
}

func AscendATMConnectVpi_Get(p *radius.Packet) (value AscendATMConnectVpi) {
	value, _ = AscendATMConnectVpi_Lookup(p)
	return
}

func AscendATMConnectVpi_Gets(p *radius.Packet) (values []AscendATMConnectVpi, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMConnectVpi(i))
	}
	return
}

func AscendATMConnectVpi_Lookup(p *radius.Packet) (value AscendATMConnectVpi, err error) {
	a, ok := _Ascend_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMConnectVpi(i)
	return
}

func AscendATMConnectVpi_Set(p *radius.Packet, value AscendATMConnectVpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 61, a)
}

func AscendATMConnectVpi_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 61)
}

type AscendATMConnectVci uint32

var AscendATMConnectVci_Strings = map[AscendATMConnectVci]string{}

func (a AscendATMConnectVci) String() string {
	if str, ok := AscendATMConnectVci_Strings[a]; ok {
		return str
	}
	return "AscendATMConnectVci(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMConnectVci_Add(p *radius.Packet, value AscendATMConnectVci) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 62, a)
}

func AscendATMConnectVci_Get(p *radius.Packet) (value AscendATMConnectVci) {
	value, _ = AscendATMConnectVci_Lookup(p)
	return
}

func AscendATMConnectVci_Gets(p *radius.Packet) (values []AscendATMConnectVci, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMConnectVci(i))
	}
	return
}

func AscendATMConnectVci_Lookup(p *radius.Packet) (value AscendATMConnectVci, err error) {
	a, ok := _Ascend_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMConnectVci(i)
	return
}

func AscendATMConnectVci_Set(p *radius.Packet, value AscendATMConnectVci) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 62, a)
}

func AscendATMConnectVci_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 62)
}

type AscendATMConnectGroup uint32

var AscendATMConnectGroup_Strings = map[AscendATMConnectGroup]string{}

func (a AscendATMConnectGroup) String() string {
	if str, ok := AscendATMConnectGroup_Strings[a]; ok {
		return str
	}
	return "AscendATMConnectGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMConnectGroup_Add(p *radius.Packet, value AscendATMConnectGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 63, a)
}

func AscendATMConnectGroup_Get(p *radius.Packet) (value AscendATMConnectGroup) {
	value, _ = AscendATMConnectGroup_Lookup(p)
	return
}

func AscendATMConnectGroup_Gets(p *radius.Packet) (values []AscendATMConnectGroup, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMConnectGroup(i))
	}
	return
}

func AscendATMConnectGroup_Lookup(p *radius.Packet) (value AscendATMConnectGroup, err error) {
	a, ok := _Ascend_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMConnectGroup(i)
	return
}

func AscendATMConnectGroup_Set(p *radius.Packet, value AscendATMConnectGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 63, a)
}

func AscendATMConnectGroup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 63)
}

type AscendATMGroup uint32

var AscendATMGroup_Strings = map[AscendATMGroup]string{}

func (a AscendATMGroup) String() string {
	if str, ok := AscendATMGroup_Strings[a]; ok {
		return str
	}
	return "AscendATMGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMGroup_Add(p *radius.Packet, value AscendATMGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 64, a)
}

func AscendATMGroup_Get(p *radius.Packet) (value AscendATMGroup) {
	value, _ = AscendATMGroup_Lookup(p)
	return
}

func AscendATMGroup_Gets(p *radius.Packet) (values []AscendATMGroup, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMGroup(i))
	}
	return
}

func AscendATMGroup_Lookup(p *radius.Packet) (value AscendATMGroup, err error) {
	a, ok := _Ascend_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMGroup(i)
	return
}

func AscendATMGroup_Set(p *radius.Packet, value AscendATMGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 64, a)
}

func AscendATMGroup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 64)
}

type AscendIPXHeaderCompression uint32

const (
	AscendIPXHeaderCompression_Value_IPXHeaderCompressionNo  AscendIPXHeaderCompression = 0
	AscendIPXHeaderCompression_Value_IPXHeaderCompressionYes AscendIPXHeaderCompression = 1
)

var AscendIPXHeaderCompression_Strings = map[AscendIPXHeaderCompression]string{
	AscendIPXHeaderCompression_Value_IPXHeaderCompressionNo:  "IPX-Header-Compression-No",
	AscendIPXHeaderCompression_Value_IPXHeaderCompressionYes: "IPX-Header-Compression-Yes",
}

func (a AscendIPXHeaderCompression) String() string {
	if str, ok := AscendIPXHeaderCompression_Strings[a]; ok {
		return str
	}
	return "AscendIPXHeaderCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPXHeaderCompression_Add(p *radius.Packet, value AscendIPXHeaderCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 65, a)
}

func AscendIPXHeaderCompression_Get(p *radius.Packet) (value AscendIPXHeaderCompression) {
	value, _ = AscendIPXHeaderCompression_Lookup(p)
	return
}

func AscendIPXHeaderCompression_Gets(p *radius.Packet) (values []AscendIPXHeaderCompression, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPXHeaderCompression(i))
	}
	return
}

func AscendIPXHeaderCompression_Lookup(p *radius.Packet) (value AscendIPXHeaderCompression, err error) {
	a, ok := _Ascend_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPXHeaderCompression(i)
	return
}

func AscendIPXHeaderCompression_Set(p *radius.Packet, value AscendIPXHeaderCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 65, a)
}

func AscendIPXHeaderCompression_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 65)
}

type AscendCallingIDTypeOfNum uint32

const (
	AscendCallingIDTypeOfNum_Value_Unknown             AscendCallingIDTypeOfNum = 0
	AscendCallingIDTypeOfNum_Value_InternationalNumber AscendCallingIDTypeOfNum = 1
	AscendCallingIDTypeOfNum_Value_NationalNumber      AscendCallingIDTypeOfNum = 2
	AscendCallingIDTypeOfNum_Value_NetworkSpecific     AscendCallingIDTypeOfNum = 3
	AscendCallingIDTypeOfNum_Value_SubscriberNumber    AscendCallingIDTypeOfNum = 4
	AscendCallingIDTypeOfNum_Value_AbbreviatedNumber   AscendCallingIDTypeOfNum = 6
)

var AscendCallingIDTypeOfNum_Strings = map[AscendCallingIDTypeOfNum]string{
	AscendCallingIDTypeOfNum_Value_Unknown:             "Unknown",
	AscendCallingIDTypeOfNum_Value_InternationalNumber: "International-Number",
	AscendCallingIDTypeOfNum_Value_NationalNumber:      "National-Number",
	AscendCallingIDTypeOfNum_Value_NetworkSpecific:     "Network-Specific",
	AscendCallingIDTypeOfNum_Value_SubscriberNumber:    "Subscriber-Number",
	AscendCallingIDTypeOfNum_Value_AbbreviatedNumber:   "Abbreviated-Number",
}

func (a AscendCallingIDTypeOfNum) String() string {
	if str, ok := AscendCallingIDTypeOfNum_Strings[a]; ok {
		return str
	}
	return "AscendCallingIDTypeOfNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallingIDTypeOfNum_Add(p *radius.Packet, value AscendCallingIDTypeOfNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 66, a)
}

func AscendCallingIDTypeOfNum_Get(p *radius.Packet) (value AscendCallingIDTypeOfNum) {
	value, _ = AscendCallingIDTypeOfNum_Lookup(p)
	return
}

func AscendCallingIDTypeOfNum_Gets(p *radius.Packet) (values []AscendCallingIDTypeOfNum, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallingIDTypeOfNum(i))
	}
	return
}

func AscendCallingIDTypeOfNum_Lookup(p *radius.Packet) (value AscendCallingIDTypeOfNum, err error) {
	a, ok := _Ascend_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallingIDTypeOfNum(i)
	return
}

func AscendCallingIDTypeOfNum_Set(p *radius.Packet, value AscendCallingIDTypeOfNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 66, a)
}

func AscendCallingIDTypeOfNum_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 66)
}

type AscendCallingIDNumberPlan uint32

const (
	AscendCallingIDNumberPlan_Value_Unknown       AscendCallingIDNumberPlan = 0
	AscendCallingIDNumberPlan_Value_ISDNTelephony AscendCallingIDNumberPlan = 1
	AscendCallingIDNumberPlan_Value_Data          AscendCallingIDNumberPlan = 3
	AscendCallingIDNumberPlan_Value_Telex         AscendCallingIDNumberPlan = 4
	AscendCallingIDNumberPlan_Value_National      AscendCallingIDNumberPlan = 8
	AscendCallingIDNumberPlan_Value_Private       AscendCallingIDNumberPlan = 9
)

var AscendCallingIDNumberPlan_Strings = map[AscendCallingIDNumberPlan]string{
	AscendCallingIDNumberPlan_Value_Unknown:       "Unknown",
	AscendCallingIDNumberPlan_Value_ISDNTelephony: "ISDN-Telephony",
	AscendCallingIDNumberPlan_Value_Data:          "Data",
	AscendCallingIDNumberPlan_Value_Telex:         "Telex",
	AscendCallingIDNumberPlan_Value_National:      "National",
	AscendCallingIDNumberPlan_Value_Private:       "Private",
}

func (a AscendCallingIDNumberPlan) String() string {
	if str, ok := AscendCallingIDNumberPlan_Strings[a]; ok {
		return str
	}
	return "AscendCallingIDNumberPlan(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallingIDNumberPlan_Add(p *radius.Packet, value AscendCallingIDNumberPlan) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 67, a)
}

func AscendCallingIDNumberPlan_Get(p *radius.Packet) (value AscendCallingIDNumberPlan) {
	value, _ = AscendCallingIDNumberPlan_Lookup(p)
	return
}

func AscendCallingIDNumberPlan_Gets(p *radius.Packet) (values []AscendCallingIDNumberPlan, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 67) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallingIDNumberPlan(i))
	}
	return
}

func AscendCallingIDNumberPlan_Lookup(p *radius.Packet) (value AscendCallingIDNumberPlan, err error) {
	a, ok := _Ascend_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallingIDNumberPlan(i)
	return
}

func AscendCallingIDNumberPlan_Set(p *radius.Packet, value AscendCallingIDNumberPlan) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 67, a)
}

func AscendCallingIDNumberPlan_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 67)
}

type AscendCallingIDPresentatn uint32

const (
	AscendCallingIDPresentatn_Value_Allowed            AscendCallingIDPresentatn = 0
	AscendCallingIDPresentatn_Value_Restricted         AscendCallingIDPresentatn = 1
	AscendCallingIDPresentatn_Value_NumberNotAvailable AscendCallingIDPresentatn = 2
)

var AscendCallingIDPresentatn_Strings = map[AscendCallingIDPresentatn]string{
	AscendCallingIDPresentatn_Value_Allowed:            "Allowed",
	AscendCallingIDPresentatn_Value_Restricted:         "Restricted",
	AscendCallingIDPresentatn_Value_NumberNotAvailable: "Number-Not-Available",
}

func (a AscendCallingIDPresentatn) String() string {
	if str, ok := AscendCallingIDPresentatn_Strings[a]; ok {
		return str
	}
	return "AscendCallingIDPresentatn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallingIDPresentatn_Add(p *radius.Packet, value AscendCallingIDPresentatn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 68, a)
}

func AscendCallingIDPresentatn_Get(p *radius.Packet) (value AscendCallingIDPresentatn) {
	value, _ = AscendCallingIDPresentatn_Lookup(p)
	return
}

func AscendCallingIDPresentatn_Gets(p *radius.Packet) (values []AscendCallingIDPresentatn, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallingIDPresentatn(i))
	}
	return
}

func AscendCallingIDPresentatn_Lookup(p *radius.Packet) (value AscendCallingIDPresentatn, err error) {
	a, ok := _Ascend_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallingIDPresentatn(i)
	return
}

func AscendCallingIDPresentatn_Set(p *radius.Packet, value AscendCallingIDPresentatn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 68, a)
}

func AscendCallingIDPresentatn_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 68)
}

type AscendCallingIDScreening uint32

const (
	AscendCallingIDScreening_Value_UserNotScreened    AscendCallingIDScreening = 0
	AscendCallingIDScreening_Value_UserProvidedPassed AscendCallingIDScreening = 1
	AscendCallingIDScreening_Value_UserProvidedFailed AscendCallingIDScreening = 2
	AscendCallingIDScreening_Value_NetworkProvided    AscendCallingIDScreening = 3
)

var AscendCallingIDScreening_Strings = map[AscendCallingIDScreening]string{
	AscendCallingIDScreening_Value_UserNotScreened:    "User-Not-Screened",
	AscendCallingIDScreening_Value_UserProvidedPassed: "User-Provided-Passed",
	AscendCallingIDScreening_Value_UserProvidedFailed: "User-Provided-Failed",
	AscendCallingIDScreening_Value_NetworkProvided:    "Network-Provided",
}

func (a AscendCallingIDScreening) String() string {
	if str, ok := AscendCallingIDScreening_Strings[a]; ok {
		return str
	}
	return "AscendCallingIDScreening(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallingIDScreening_Add(p *radius.Packet, value AscendCallingIDScreening) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 69, a)
}

func AscendCallingIDScreening_Get(p *radius.Packet) (value AscendCallingIDScreening) {
	value, _ = AscendCallingIDScreening_Lookup(p)
	return
}

func AscendCallingIDScreening_Gets(p *radius.Packet) (values []AscendCallingIDScreening, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallingIDScreening(i))
	}
	return
}

func AscendCallingIDScreening_Lookup(p *radius.Packet) (value AscendCallingIDScreening, err error) {
	a, ok := _Ascend_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallingIDScreening(i)
	return
}

func AscendCallingIDScreening_Set(p *radius.Packet, value AscendCallingIDScreening) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 69, a)
}

func AscendCallingIDScreening_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 69)
}

type AscendBIREnable uint32

const (
	AscendBIREnable_Value_BIREnableNo  AscendBIREnable = 0
	AscendBIREnable_Value_BIREnableYes AscendBIREnable = 1
)

var AscendBIREnable_Strings = map[AscendBIREnable]string{
	AscendBIREnable_Value_BIREnableNo:  "BIR-Enable-No",
	AscendBIREnable_Value_BIREnableYes: "BIR-Enable-Yes",
}

func (a AscendBIREnable) String() string {
	if str, ok := AscendBIREnable_Strings[a]; ok {
		return str
	}
	return "AscendBIREnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBIREnable_Add(p *radius.Packet, value AscendBIREnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 70, a)
}

func AscendBIREnable_Get(p *radius.Packet) (value AscendBIREnable) {
	value, _ = AscendBIREnable_Lookup(p)
	return
}

func AscendBIREnable_Gets(p *radius.Packet) (values []AscendBIREnable, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBIREnable(i))
	}
	return
}

func AscendBIREnable_Lookup(p *radius.Packet) (value AscendBIREnable, err error) {
	a, ok := _Ascend_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBIREnable(i)
	return
}

func AscendBIREnable_Set(p *radius.Packet, value AscendBIREnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 70, a)
}

func AscendBIREnable_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 70)
}

type AscendBIRProxy uint32

const (
	AscendBIRProxy_Value_BIRProxyNo  AscendBIRProxy = 0
	AscendBIRProxy_Value_BIRProxyYes AscendBIRProxy = 1
)

var AscendBIRProxy_Strings = map[AscendBIRProxy]string{
	AscendBIRProxy_Value_BIRProxyNo:  "BIR-Proxy-No",
	AscendBIRProxy_Value_BIRProxyYes: "BIR-Proxy-Yes",
}

func (a AscendBIRProxy) String() string {
	if str, ok := AscendBIRProxy_Strings[a]; ok {
		return str
	}
	return "AscendBIRProxy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBIRProxy_Add(p *radius.Packet, value AscendBIRProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 71, a)
}

func AscendBIRProxy_Get(p *radius.Packet) (value AscendBIRProxy) {
	value, _ = AscendBIRProxy_Lookup(p)
	return
}

func AscendBIRProxy_Gets(p *radius.Packet) (values []AscendBIRProxy, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBIRProxy(i))
	}
	return
}

func AscendBIRProxy_Lookup(p *radius.Packet) (value AscendBIRProxy, err error) {
	a, ok := _Ascend_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBIRProxy(i)
	return
}

func AscendBIRProxy_Set(p *radius.Packet, value AscendBIRProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 71, a)
}

func AscendBIRProxy_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 71)
}

type AscendBIRBridgeGroup uint32

var AscendBIRBridgeGroup_Strings = map[AscendBIRBridgeGroup]string{}

func (a AscendBIRBridgeGroup) String() string {
	if str, ok := AscendBIRBridgeGroup_Strings[a]; ok {
		return str
	}
	return "AscendBIRBridgeGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBIRBridgeGroup_Add(p *radius.Packet, value AscendBIRBridgeGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 72, a)
}

func AscendBIRBridgeGroup_Get(p *radius.Packet) (value AscendBIRBridgeGroup) {
	value, _ = AscendBIRBridgeGroup_Lookup(p)
	return
}

func AscendBIRBridgeGroup_Gets(p *radius.Packet) (values []AscendBIRBridgeGroup, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBIRBridgeGroup(i))
	}
	return
}

func AscendBIRBridgeGroup_Lookup(p *radius.Packet) (value AscendBIRBridgeGroup, err error) {
	a, ok := _Ascend_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBIRBridgeGroup(i)
	return
}

func AscendBIRBridgeGroup_Set(p *radius.Packet, value AscendBIRBridgeGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 72, a)
}

func AscendBIRBridgeGroup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 72)
}

func AscendIPSECProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 73, a)
}

func AscendIPSECProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 73, a)
}

func AscendIPSECProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendIPSECProfile_Lookup(p)
	return
}

func AscendIPSECProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AscendIPSECProfile_LookupString(p)
	return
}

func AscendIPSECProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPSECProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPSECProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendIPSECProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendIPSECProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 73, a)
}

func AscendIPSECProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 73, a)
}

func AscendIPSECProfile_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 73)
}

type AscendPPPoEEnable uint32

const (
	AscendPPPoEEnable_Value_PPPoENo  AscendPPPoEEnable = 0
	AscendPPPoEEnable_Value_PPPoEYes AscendPPPoEEnable = 1
)

var AscendPPPoEEnable_Strings = map[AscendPPPoEEnable]string{
	AscendPPPoEEnable_Value_PPPoENo:  "PPPoE-No",
	AscendPPPoEEnable_Value_PPPoEYes: "PPPoE-Yes",
}

func (a AscendPPPoEEnable) String() string {
	if str, ok := AscendPPPoEEnable_Strings[a]; ok {
		return str
	}
	return "AscendPPPoEEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPPPoEEnable_Add(p *radius.Packet, value AscendPPPoEEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 74, a)
}

func AscendPPPoEEnable_Get(p *radius.Packet) (value AscendPPPoEEnable) {
	value, _ = AscendPPPoEEnable_Lookup(p)
	return
}

func AscendPPPoEEnable_Gets(p *radius.Packet) (values []AscendPPPoEEnable, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPPPoEEnable(i))
	}
	return
}

func AscendPPPoEEnable_Lookup(p *radius.Packet) (value AscendPPPoEEnable, err error) {
	a, ok := _Ascend_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPPPoEEnable(i)
	return
}

func AscendPPPoEEnable_Set(p *radius.Packet, value AscendPPPoEEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 74, a)
}

func AscendPPPoEEnable_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 74)
}

type AscendBridgeNonPPPoE uint32

const (
	AscendBridgeNonPPPoE_Value_BridgeNonPPPoENo  AscendBridgeNonPPPoE = 0
	AscendBridgeNonPPPoE_Value_BridgeNonPPPoEYes AscendBridgeNonPPPoE = 1
)

var AscendBridgeNonPPPoE_Strings = map[AscendBridgeNonPPPoE]string{
	AscendBridgeNonPPPoE_Value_BridgeNonPPPoENo:  "Bridge-Non-PPPoE-No",
	AscendBridgeNonPPPoE_Value_BridgeNonPPPoEYes: "Bridge-Non-PPPoE-Yes",
}

func (a AscendBridgeNonPPPoE) String() string {
	if str, ok := AscendBridgeNonPPPoE_Strings[a]; ok {
		return str
	}
	return "AscendBridgeNonPPPoE(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBridgeNonPPPoE_Add(p *radius.Packet, value AscendBridgeNonPPPoE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 75, a)
}

func AscendBridgeNonPPPoE_Get(p *radius.Packet) (value AscendBridgeNonPPPoE) {
	value, _ = AscendBridgeNonPPPoE_Lookup(p)
	return
}

func AscendBridgeNonPPPoE_Gets(p *radius.Packet) (values []AscendBridgeNonPPPoE, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 75) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBridgeNonPPPoE(i))
	}
	return
}

func AscendBridgeNonPPPoE_Lookup(p *radius.Packet) (value AscendBridgeNonPPPoE, err error) {
	a, ok := _Ascend_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBridgeNonPPPoE(i)
	return
}

func AscendBridgeNonPPPoE_Set(p *radius.Packet, value AscendBridgeNonPPPoE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 75, a)
}

func AscendBridgeNonPPPoE_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 75)
}

type AscendATMDirect uint32

const (
	AscendATMDirect_Value_ATMDirectNo  AscendATMDirect = 0
	AscendATMDirect_Value_ATMDirectYes AscendATMDirect = 1
)

var AscendATMDirect_Strings = map[AscendATMDirect]string{
	AscendATMDirect_Value_ATMDirectNo:  "ATM-Direct-No",
	AscendATMDirect_Value_ATMDirectYes: "ATM-Direct-Yes",
}

func (a AscendATMDirect) String() string {
	if str, ok := AscendATMDirect_Strings[a]; ok {
		return str
	}
	return "AscendATMDirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMDirect_Add(p *radius.Packet, value AscendATMDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 76, a)
}

func AscendATMDirect_Get(p *radius.Packet) (value AscendATMDirect) {
	value, _ = AscendATMDirect_Lookup(p)
	return
}

func AscendATMDirect_Gets(p *radius.Packet) (values []AscendATMDirect, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 76) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMDirect(i))
	}
	return
}

func AscendATMDirect_Lookup(p *radius.Packet) (value AscendATMDirect, err error) {
	a, ok := _Ascend_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMDirect(i)
	return
}

func AscendATMDirect_Set(p *radius.Packet, value AscendATMDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 76, a)
}

func AscendATMDirect_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 76)
}

func AscendATMDirectProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 77, a)
}

func AscendATMDirectProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 77, a)
}

func AscendATMDirectProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendATMDirectProfile_Lookup(p)
	return
}

func AscendATMDirectProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AscendATMDirectProfile_LookupString(p)
	return
}

func AscendATMDirectProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 77) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendATMDirectProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 77) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendATMDirectProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendATMDirectProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendATMDirectProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 77, a)
}

func AscendATMDirectProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 77, a)
}

func AscendATMDirectProfile_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 77)
}

func AscendClientPrimaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 78, a)
}

func AscendClientPrimaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendClientPrimaryWINS_Lookup(p)
	return
}

func AscendClientPrimaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 78) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendClientPrimaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendClientPrimaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 78, a)
}

func AscendClientPrimaryWINS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 78)
}

func AscendClientSecondaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 79, a)
}

func AscendClientSecondaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendClientSecondaryWINS_Lookup(p)
	return
}

func AscendClientSecondaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 79) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendClientSecondaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendClientSecondaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 79, a)
}

func AscendClientSecondaryWINS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 79)
}

type AscendClientAssignWINS uint32

const (
	AscendClientAssignWINS_Value_WINSAssignNo  AscendClientAssignWINS = 0
	AscendClientAssignWINS_Value_WINSAssignYes AscendClientAssignWINS = 1
)

var AscendClientAssignWINS_Strings = map[AscendClientAssignWINS]string{
	AscendClientAssignWINS_Value_WINSAssignNo:  "WINS-Assign-No",
	AscendClientAssignWINS_Value_WINSAssignYes: "WINS-Assign-Yes",
}

func (a AscendClientAssignWINS) String() string {
	if str, ok := AscendClientAssignWINS_Strings[a]; ok {
		return str
	}
	return "AscendClientAssignWINS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendClientAssignWINS_Add(p *radius.Packet, value AscendClientAssignWINS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 80, a)
}

func AscendClientAssignWINS_Get(p *radius.Packet) (value AscendClientAssignWINS) {
	value, _ = AscendClientAssignWINS_Lookup(p)
	return
}

func AscendClientAssignWINS_Gets(p *radius.Packet) (values []AscendClientAssignWINS, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 80) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendClientAssignWINS(i))
	}
	return
}

func AscendClientAssignWINS_Lookup(p *radius.Packet) (value AscendClientAssignWINS, err error) {
	a, ok := _Ascend_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendClientAssignWINS(i)
	return
}

func AscendClientAssignWINS_Set(p *radius.Packet, value AscendClientAssignWINS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 80, a)
}

func AscendClientAssignWINS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 80)
}

type AscendAuthType uint32

const (
	AscendAuthType_Value_AuthNone    AscendAuthType = 0
	AscendAuthType_Value_AuthDefault AscendAuthType = 1
	AscendAuthType_Value_AuthAny     AscendAuthType = 2
	AscendAuthType_Value_AuthPAP     AscendAuthType = 3
	AscendAuthType_Value_AuthCHAP    AscendAuthType = 4
	AscendAuthType_Value_AuthMSCHAP  AscendAuthType = 5
)

var AscendAuthType_Strings = map[AscendAuthType]string{
	AscendAuthType_Value_AuthNone:    "Auth-None",
	AscendAuthType_Value_AuthDefault: "Auth-Default",
	AscendAuthType_Value_AuthAny:     "Auth-Any",
	AscendAuthType_Value_AuthPAP:     "Auth-PAP",
	AscendAuthType_Value_AuthCHAP:    "Auth-CHAP",
	AscendAuthType_Value_AuthMSCHAP:  "Auth-MS-CHAP",
}

func (a AscendAuthType) String() string {
	if str, ok := AscendAuthType_Strings[a]; ok {
		return str
	}
	return "AscendAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendAuthType_Add(p *radius.Packet, value AscendAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 81, a)
}

func AscendAuthType_Get(p *radius.Packet) (value AscendAuthType) {
	value, _ = AscendAuthType_Lookup(p)
	return
}

func AscendAuthType_Gets(p *radius.Packet) (values []AscendAuthType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 81) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendAuthType(i))
	}
	return
}

func AscendAuthType_Lookup(p *radius.Packet) (value AscendAuthType, err error) {
	a, ok := _Ascend_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendAuthType(i)
	return
}

func AscendAuthType_Set(p *radius.Packet, value AscendAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 81, a)
}

func AscendAuthType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 81)
}

type AscendPortRedirProtocol uint32

const (
	AscendPortRedirProtocol_Value_AscendProtoTCP AscendPortRedirProtocol = 6
	AscendPortRedirProtocol_Value_AscendProtoUDP AscendPortRedirProtocol = 17
)

var AscendPortRedirProtocol_Strings = map[AscendPortRedirProtocol]string{
	AscendPortRedirProtocol_Value_AscendProtoTCP: "Ascend-Proto-TCP",
	AscendPortRedirProtocol_Value_AscendProtoUDP: "Ascend-Proto-UDP",
}

func (a AscendPortRedirProtocol) String() string {
	if str, ok := AscendPortRedirProtocol_Strings[a]; ok {
		return str
	}
	return "AscendPortRedirProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPortRedirProtocol_Add(p *radius.Packet, value AscendPortRedirProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 82, a)
}

func AscendPortRedirProtocol_Get(p *radius.Packet) (value AscendPortRedirProtocol) {
	value, _ = AscendPortRedirProtocol_Lookup(p)
	return
}

func AscendPortRedirProtocol_Gets(p *radius.Packet) (values []AscendPortRedirProtocol, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 82) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPortRedirProtocol(i))
	}
	return
}

func AscendPortRedirProtocol_Lookup(p *radius.Packet) (value AscendPortRedirProtocol, err error) {
	a, ok := _Ascend_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPortRedirProtocol(i)
	return
}

func AscendPortRedirProtocol_Set(p *radius.Packet, value AscendPortRedirProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 82, a)
}

func AscendPortRedirProtocol_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 82)
}

type AscendPortRedirPortnum uint32

var AscendPortRedirPortnum_Strings = map[AscendPortRedirPortnum]string{}

func (a AscendPortRedirPortnum) String() string {
	if str, ok := AscendPortRedirPortnum_Strings[a]; ok {
		return str
	}
	return "AscendPortRedirPortnum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPortRedirPortnum_Add(p *radius.Packet, value AscendPortRedirPortnum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 83, a)
}

func AscendPortRedirPortnum_Get(p *radius.Packet) (value AscendPortRedirPortnum) {
	value, _ = AscendPortRedirPortnum_Lookup(p)
	return
}

func AscendPortRedirPortnum_Gets(p *radius.Packet) (values []AscendPortRedirPortnum, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPortRedirPortnum(i))
	}
	return
}

func AscendPortRedirPortnum_Lookup(p *radius.Packet) (value AscendPortRedirPortnum, err error) {
	a, ok := _Ascend_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPortRedirPortnum(i)
	return
}

func AscendPortRedirPortnum_Set(p *radius.Packet, value AscendPortRedirPortnum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 83, a)
}

func AscendPortRedirPortnum_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 83)
}

func AscendPortRedirServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 84, a)
}

func AscendPortRedirServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendPortRedirServer_Lookup(p)
	return
}

func AscendPortRedirServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 84) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPortRedirServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendPortRedirServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 84, a)
}

func AscendPortRedirServer_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 84)
}

type AscendIPPoolChaining uint32

const (
	AscendIPPoolChaining_Value_IPPoolChainingNo  AscendIPPoolChaining = 0
	AscendIPPoolChaining_Value_IPPoolChainingYes AscendIPPoolChaining = 1
)

var AscendIPPoolChaining_Strings = map[AscendIPPoolChaining]string{
	AscendIPPoolChaining_Value_IPPoolChainingNo:  "IP-Pool-Chaining-No",
	AscendIPPoolChaining_Value_IPPoolChainingYes: "IP-Pool-Chaining-Yes",
}

func (a AscendIPPoolChaining) String() string {
	if str, ok := AscendIPPoolChaining_Strings[a]; ok {
		return str
	}
	return "AscendIPPoolChaining(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPPoolChaining_Add(p *radius.Packet, value AscendIPPoolChaining) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 85, a)
}

func AscendIPPoolChaining_Get(p *radius.Packet) (value AscendIPPoolChaining) {
	value, _ = AscendIPPoolChaining_Lookup(p)
	return
}

func AscendIPPoolChaining_Gets(p *radius.Packet) (values []AscendIPPoolChaining, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPPoolChaining(i))
	}
	return
}

func AscendIPPoolChaining_Lookup(p *radius.Packet) (value AscendIPPoolChaining, err error) {
	a, ok := _Ascend_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPPoolChaining(i)
	return
}

func AscendIPPoolChaining_Set(p *radius.Packet, value AscendIPPoolChaining) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 85, a)
}

func AscendIPPoolChaining_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 85)
}

func AscendOwnerIPAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 86, a)
}

func AscendOwnerIPAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendOwnerIPAddr_Lookup(p)
	return
}

func AscendOwnerIPAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 86) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendOwnerIPAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendOwnerIPAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 86, a)
}

func AscendOwnerIPAddr_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 86)
}

type AscendIPTOS uint32

const (
	AscendIPTOS_Value_IPTOSNormal      AscendIPTOS = 0
	AscendIPTOS_Value_IPTOSDisabled    AscendIPTOS = 1
	AscendIPTOS_Value_IPTOSCost        AscendIPTOS = 2
	AscendIPTOS_Value_IPTOSReliability AscendIPTOS = 4
	AscendIPTOS_Value_IPTOSThroughput  AscendIPTOS = 8
	AscendIPTOS_Value_IPTOSLatency     AscendIPTOS = 16
)

var AscendIPTOS_Strings = map[AscendIPTOS]string{
	AscendIPTOS_Value_IPTOSNormal:      "IP-TOS-Normal",
	AscendIPTOS_Value_IPTOSDisabled:    "IP-TOS-Disabled",
	AscendIPTOS_Value_IPTOSCost:        "IP-TOS-Cost",
	AscendIPTOS_Value_IPTOSReliability: "IP-TOS-Reliability",
	AscendIPTOS_Value_IPTOSThroughput:  "IP-TOS-Throughput",
	AscendIPTOS_Value_IPTOSLatency:     "IP-TOS-Latency",
}

func (a AscendIPTOS) String() string {
	if str, ok := AscendIPTOS_Strings[a]; ok {
		return str
	}
	return "AscendIPTOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPTOS_Add(p *radius.Packet, value AscendIPTOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 87, a)
}

func AscendIPTOS_Get(p *radius.Packet) (value AscendIPTOS) {
	value, _ = AscendIPTOS_Lookup(p)
	return
}

func AscendIPTOS_Gets(p *radius.Packet) (values []AscendIPTOS, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 87) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPTOS(i))
	}
	return
}

func AscendIPTOS_Lookup(p *radius.Packet) (value AscendIPTOS, err error) {
	a, ok := _Ascend_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPTOS(i)
	return
}

func AscendIPTOS_Set(p *radius.Packet, value AscendIPTOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 87, a)
}

func AscendIPTOS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 87)
}

type AscendIPTOSPrecedence uint32

const (
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriNormal AscendIPTOSPrecedence = 0
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriOne    AscendIPTOSPrecedence = 32
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriTwo    AscendIPTOSPrecedence = 64
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriThree  AscendIPTOSPrecedence = 96
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriFour   AscendIPTOSPrecedence = 128
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriFive   AscendIPTOSPrecedence = 160
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriSix    AscendIPTOSPrecedence = 192
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriSeven  AscendIPTOSPrecedence = 224
)

var AscendIPTOSPrecedence_Strings = map[AscendIPTOSPrecedence]string{
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriNormal: "IP-TOS-Precedence-Pri-Normal",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriOne:    "IP-TOS-Precedence-Pri-One",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriTwo:    "IP-TOS-Precedence-Pri-Two",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriThree:  "IP-TOS-Precedence-Pri-Three",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriFour:   "IP-TOS-Precedence-Pri-Four",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriFive:   "IP-TOS-Precedence-Pri-Five",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriSix:    "IP-TOS-Precedence-Pri-Six",
	AscendIPTOSPrecedence_Value_IPTOSPrecedencePriSeven:  "IP-TOS-Precedence-Pri-Seven",
}

func (a AscendIPTOSPrecedence) String() string {
	if str, ok := AscendIPTOSPrecedence_Strings[a]; ok {
		return str
	}
	return "AscendIPTOSPrecedence(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPTOSPrecedence_Add(p *radius.Packet, value AscendIPTOSPrecedence) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 88, a)
}

func AscendIPTOSPrecedence_Get(p *radius.Packet) (value AscendIPTOSPrecedence) {
	value, _ = AscendIPTOSPrecedence_Lookup(p)
	return
}

func AscendIPTOSPrecedence_Gets(p *radius.Packet) (values []AscendIPTOSPrecedence, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 88) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPTOSPrecedence(i))
	}
	return
}

func AscendIPTOSPrecedence_Lookup(p *radius.Packet) (value AscendIPTOSPrecedence, err error) {
	a, ok := _Ascend_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPTOSPrecedence(i)
	return
}

func AscendIPTOSPrecedence_Set(p *radius.Packet, value AscendIPTOSPrecedence) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 88, a)
}

func AscendIPTOSPrecedence_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 88)
}

type AscendIPTOSApplyTo uint32

const (
	AscendIPTOSApplyTo_Value_IPTOSApplyToIncoming AscendIPTOSApplyTo = 1024
	AscendIPTOSApplyTo_Value_IPTOSApplyToOutgoing AscendIPTOSApplyTo = 2048
	AscendIPTOSApplyTo_Value_IPTOSApplyToBoth     AscendIPTOSApplyTo = 3072
)

var AscendIPTOSApplyTo_Strings = map[AscendIPTOSApplyTo]string{
	AscendIPTOSApplyTo_Value_IPTOSApplyToIncoming: "IP-TOS-Apply-To-Incoming",
	AscendIPTOSApplyTo_Value_IPTOSApplyToOutgoing: "IP-TOS-Apply-To-Outgoing",
	AscendIPTOSApplyTo_Value_IPTOSApplyToBoth:     "IP-TOS-Apply-To-Both",
}

func (a AscendIPTOSApplyTo) String() string {
	if str, ok := AscendIPTOSApplyTo_Strings[a]; ok {
		return str
	}
	return "AscendIPTOSApplyTo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPTOSApplyTo_Add(p *radius.Packet, value AscendIPTOSApplyTo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 89, a)
}

func AscendIPTOSApplyTo_Get(p *radius.Packet) (value AscendIPTOSApplyTo) {
	value, _ = AscendIPTOSApplyTo_Lookup(p)
	return
}

func AscendIPTOSApplyTo_Gets(p *radius.Packet) (values []AscendIPTOSApplyTo, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPTOSApplyTo(i))
	}
	return
}

func AscendIPTOSApplyTo_Lookup(p *radius.Packet) (value AscendIPTOSApplyTo, err error) {
	a, ok := _Ascend_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPTOSApplyTo(i)
	return
}

func AscendIPTOSApplyTo_Set(p *radius.Packet, value AscendIPTOSApplyTo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 89, a)
}

func AscendIPTOSApplyTo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 89)
}

func AscendFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 90, a)
}

func AscendFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 90, a)
}

func AscendFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFilter_Lookup(p)
	return
}

func AscendFilter_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFilter_LookupString(p)
	return
}

func AscendFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 90, a)
}

func AscendFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 90, a)
}

func AscendFilter_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 90)
}

func AscendTelnetProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 91, a)
}

func AscendTelnetProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 91, a)
}

func AscendTelnetProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendTelnetProfile_Lookup(p)
	return
}

func AscendTelnetProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AscendTelnetProfile_LookupString(p)
	return
}

func AscendTelnetProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTelnetProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTelnetProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendTelnetProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendTelnetProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 91, a)
}

func AscendTelnetProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 91, a)
}

func AscendTelnetProfile_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 91)
}

type AscendDslRateType uint32

const (
	AscendDslRateType_Value_RateTypeDisabled    AscendDslRateType = 0
	AscendDslRateType_Value_RateTypeSdsl        AscendDslRateType = 1
	AscendDslRateType_Value_RateTypeAdslCap     AscendDslRateType = 2
	AscendDslRateType_Value_RateTypeAdslDmtCell AscendDslRateType = 3
	AscendDslRateType_Value_RateTypeAdslDmt     AscendDslRateType = 4
)

var AscendDslRateType_Strings = map[AscendDslRateType]string{
	AscendDslRateType_Value_RateTypeDisabled:    "Rate-Type-Disabled",
	AscendDslRateType_Value_RateTypeSdsl:        "Rate-Type-Sdsl",
	AscendDslRateType_Value_RateTypeAdslCap:     "Rate-Type-AdslCap",
	AscendDslRateType_Value_RateTypeAdslDmtCell: "Rate-Type-AdslDmtCell",
	AscendDslRateType_Value_RateTypeAdslDmt:     "Rate-Type-AdslDmt",
}

func (a AscendDslRateType) String() string {
	if str, ok := AscendDslRateType_Strings[a]; ok {
		return str
	}
	return "AscendDslRateType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslRateType_Add(p *radius.Packet, value AscendDslRateType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 92, a)
}

func AscendDslRateType_Get(p *radius.Packet) (value AscendDslRateType) {
	value, _ = AscendDslRateType_Lookup(p)
	return
}

func AscendDslRateType_Gets(p *radius.Packet) (values []AscendDslRateType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 92) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslRateType(i))
	}
	return
}

func AscendDslRateType_Lookup(p *radius.Packet) (value AscendDslRateType, err error) {
	a, ok := _Ascend_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslRateType(i)
	return
}

func AscendDslRateType_Set(p *radius.Packet, value AscendDslRateType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 92, a)
}

func AscendDslRateType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 92)
}

func AscendRedirectNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 93, a)
}

func AscendRedirectNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 93, a)
}

func AscendRedirectNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendRedirectNumber_Lookup(p)
	return
}

func AscendRedirectNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AscendRedirectNumber_LookupString(p)
	return
}

func AscendRedirectNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRedirectNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRedirectNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendRedirectNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendRedirectNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 93, a)
}

func AscendRedirectNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 93, a)
}

func AscendRedirectNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 93)
}

type AscendATMVpi uint32

var AscendATMVpi_Strings = map[AscendATMVpi]string{}

func (a AscendATMVpi) String() string {
	if str, ok := AscendATMVpi_Strings[a]; ok {
		return str
	}
	return "AscendATMVpi(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMVpi_Add(p *radius.Packet, value AscendATMVpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 94, a)
}

func AscendATMVpi_Get(p *radius.Packet) (value AscendATMVpi) {
	value, _ = AscendATMVpi_Lookup(p)
	return
}

func AscendATMVpi_Gets(p *radius.Packet) (values []AscendATMVpi, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 94) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMVpi(i))
	}
	return
}

func AscendATMVpi_Lookup(p *radius.Packet) (value AscendATMVpi, err error) {
	a, ok := _Ascend_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMVpi(i)
	return
}

func AscendATMVpi_Set(p *radius.Packet, value AscendATMVpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 94, a)
}

func AscendATMVpi_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 94)
}

type AscendATMVci uint32

var AscendATMVci_Strings = map[AscendATMVci]string{}

func (a AscendATMVci) String() string {
	if str, ok := AscendATMVci_Strings[a]; ok {
		return str
	}
	return "AscendATMVci(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendATMVci_Add(p *radius.Packet, value AscendATMVci) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 95, a)
}

func AscendATMVci_Get(p *radius.Packet) (value AscendATMVci) {
	value, _ = AscendATMVci_Lookup(p)
	return
}

func AscendATMVci_Gets(p *radius.Packet) (values []AscendATMVci, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendATMVci(i))
	}
	return
}

func AscendATMVci_Lookup(p *radius.Packet) (value AscendATMVci, err error) {
	a, ok := _Ascend_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendATMVci(i)
	return
}

func AscendATMVci_Set(p *radius.Packet, value AscendATMVci) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 95, a)
}

func AscendATMVci_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 95)
}

type AscendSourceIPCheck uint32

const (
	AscendSourceIPCheck_Value_SourceIPCheckNo  AscendSourceIPCheck = 0
	AscendSourceIPCheck_Value_SourceIPCheckYes AscendSourceIPCheck = 1
)

var AscendSourceIPCheck_Strings = map[AscendSourceIPCheck]string{
	AscendSourceIPCheck_Value_SourceIPCheckNo:  "Source-IP-Check-No",
	AscendSourceIPCheck_Value_SourceIPCheckYes: "Source-IP-Check-Yes",
}

func (a AscendSourceIPCheck) String() string {
	if str, ok := AscendSourceIPCheck_Strings[a]; ok {
		return str
	}
	return "AscendSourceIPCheck(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSourceIPCheck_Add(p *radius.Packet, value AscendSourceIPCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 96, a)
}

func AscendSourceIPCheck_Get(p *radius.Packet) (value AscendSourceIPCheck) {
	value, _ = AscendSourceIPCheck_Lookup(p)
	return
}

func AscendSourceIPCheck_Gets(p *radius.Packet) (values []AscendSourceIPCheck, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSourceIPCheck(i))
	}
	return
}

func AscendSourceIPCheck_Lookup(p *radius.Packet) (value AscendSourceIPCheck, err error) {
	a, ok := _Ascend_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSourceIPCheck(i)
	return
}

func AscendSourceIPCheck_Set(p *radius.Packet, value AscendSourceIPCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 96, a)
}

func AscendSourceIPCheck_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 96)
}

type AscendDslRateMode uint32

const (
	AscendDslRateMode_Value_RateModeAutoBaud AscendDslRateMode = 1
	AscendDslRateMode_Value_RateModeSingle   AscendDslRateMode = 2
)

var AscendDslRateMode_Strings = map[AscendDslRateMode]string{
	AscendDslRateMode_Value_RateModeAutoBaud: "Rate-Mode-AutoBaud",
	AscendDslRateMode_Value_RateModeSingle:   "Rate-Mode-Single",
}

func (a AscendDslRateMode) String() string {
	if str, ok := AscendDslRateMode_Strings[a]; ok {
		return str
	}
	return "AscendDslRateMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslRateMode_Add(p *radius.Packet, value AscendDslRateMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 97, a)
}

func AscendDslRateMode_Get(p *radius.Packet) (value AscendDslRateMode) {
	value, _ = AscendDslRateMode_Lookup(p)
	return
}

func AscendDslRateMode_Gets(p *radius.Packet) (values []AscendDslRateMode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslRateMode(i))
	}
	return
}

func AscendDslRateMode_Lookup(p *radius.Packet) (value AscendDslRateMode, err error) {
	a, ok := _Ascend_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslRateMode(i)
	return
}

func AscendDslRateMode_Set(p *radius.Packet, value AscendDslRateMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 97, a)
}

func AscendDslRateMode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 97)
}

type AscendDslUpstreamLimit uint32

const (
	AscendDslUpstreamLimit_Value_Sdsl144000       AscendDslUpstreamLimit = 0
	AscendDslUpstreamLimit_Value_Sdsl272000       AscendDslUpstreamLimit = 1
	AscendDslUpstreamLimit_Value_Sdsl400000       AscendDslUpstreamLimit = 2
	AscendDslUpstreamLimit_Value_Sdsl528000       AscendDslUpstreamLimit = 3
	AscendDslUpstreamLimit_Value_Sdsl784000       AscendDslUpstreamLimit = 4
	AscendDslUpstreamLimit_Value_Sdsl1168000      AscendDslUpstreamLimit = 5
	AscendDslUpstreamLimit_Value_Sdsl1552000      AscendDslUpstreamLimit = 6
	AscendDslUpstreamLimit_Value_Sdsl2320000      AscendDslUpstreamLimit = 7
	AscendDslUpstreamLimit_Value_AdslcapUp1088000 AscendDslUpstreamLimit = 50
	AscendDslUpstreamLimit_Value_AdslcapUp952000  AscendDslUpstreamLimit = 51
	AscendDslUpstreamLimit_Value_AdslcapUp816000  AscendDslUpstreamLimit = 52
	AscendDslUpstreamLimit_Value_AdslcapUp680000  AscendDslUpstreamLimit = 53
	AscendDslUpstreamLimit_Value_AdslcapUp544000  AscendDslUpstreamLimit = 54
	AscendDslUpstreamLimit_Value_AdslcapUp408000  AscendDslUpstreamLimit = 55
	AscendDslUpstreamLimit_Value_AdslcapUp272000  AscendDslUpstreamLimit = 56
	AscendDslUpstreamLimit_Value_AdsldmtUpAuto    AscendDslUpstreamLimit = 150
	AscendDslUpstreamLimit_Value_AdsldmtUp1088000 AscendDslUpstreamLimit = 151
	AscendDslUpstreamLimit_Value_AdsldmtUp928000  AscendDslUpstreamLimit = 152
	AscendDslUpstreamLimit_Value_AdsldmtUp896000  AscendDslUpstreamLimit = 153
	AscendDslUpstreamLimit_Value_AdsldmtUp800000  AscendDslUpstreamLimit = 154
	AscendDslUpstreamLimit_Value_AdsldmtUp768000  AscendDslUpstreamLimit = 155
	AscendDslUpstreamLimit_Value_AdsldmtUp640000  AscendDslUpstreamLimit = 156
	AscendDslUpstreamLimit_Value_AdsldmtUp512000  AscendDslUpstreamLimit = 157
	AscendDslUpstreamLimit_Value_AdsldmtUp384000  AscendDslUpstreamLimit = 158
	AscendDslUpstreamLimit_Value_AdsldmtUp256000  AscendDslUpstreamLimit = 159
	AscendDslUpstreamLimit_Value_AdsldmtUp128000  AscendDslUpstreamLimit = 160
)

var AscendDslUpstreamLimit_Strings = map[AscendDslUpstreamLimit]string{
	AscendDslUpstreamLimit_Value_Sdsl144000:       "sdsl-144000",
	AscendDslUpstreamLimit_Value_Sdsl272000:       "sdsl-272000",
	AscendDslUpstreamLimit_Value_Sdsl400000:       "sdsl-400000",
	AscendDslUpstreamLimit_Value_Sdsl528000:       "sdsl-528000",
	AscendDslUpstreamLimit_Value_Sdsl784000:       "sdsl-784000",
	AscendDslUpstreamLimit_Value_Sdsl1168000:      "sdsl-1168000",
	AscendDslUpstreamLimit_Value_Sdsl1552000:      "sdsl-1552000",
	AscendDslUpstreamLimit_Value_Sdsl2320000:      "sdsl-2320000",
	AscendDslUpstreamLimit_Value_AdslcapUp1088000: "adslcap-up-1088000",
	AscendDslUpstreamLimit_Value_AdslcapUp952000:  "adslcap-up-952000",
	AscendDslUpstreamLimit_Value_AdslcapUp816000:  "adslcap-up-816000",
	AscendDslUpstreamLimit_Value_AdslcapUp680000:  "adslcap-up-680000",
	AscendDslUpstreamLimit_Value_AdslcapUp544000:  "adslcap-up-544000",
	AscendDslUpstreamLimit_Value_AdslcapUp408000:  "adslcap-up-408000",
	AscendDslUpstreamLimit_Value_AdslcapUp272000:  "adslcap-up-272000",
	AscendDslUpstreamLimit_Value_AdsldmtUpAuto:    "adsldmt-up-auto",
	AscendDslUpstreamLimit_Value_AdsldmtUp1088000: "adsldmt-up-1088000",
	AscendDslUpstreamLimit_Value_AdsldmtUp928000:  "adsldmt-up-928000",
	AscendDslUpstreamLimit_Value_AdsldmtUp896000:  "adsldmt-up-896000",
	AscendDslUpstreamLimit_Value_AdsldmtUp800000:  "adsldmt-up-800000",
	AscendDslUpstreamLimit_Value_AdsldmtUp768000:  "adsldmt-up-768000",
	AscendDslUpstreamLimit_Value_AdsldmtUp640000:  "adsldmt-up-640000",
	AscendDslUpstreamLimit_Value_AdsldmtUp512000:  "adsldmt-up-512000",
	AscendDslUpstreamLimit_Value_AdsldmtUp384000:  "adsldmt-up-384000",
	AscendDslUpstreamLimit_Value_AdsldmtUp256000:  "adsldmt-up-256000",
	AscendDslUpstreamLimit_Value_AdsldmtUp128000:  "adsldmt-up-128000",
}

func (a AscendDslUpstreamLimit) String() string {
	if str, ok := AscendDslUpstreamLimit_Strings[a]; ok {
		return str
	}
	return "AscendDslUpstreamLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslUpstreamLimit_Add(p *radius.Packet, value AscendDslUpstreamLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 98, a)
}

func AscendDslUpstreamLimit_Get(p *radius.Packet) (value AscendDslUpstreamLimit) {
	value, _ = AscendDslUpstreamLimit_Lookup(p)
	return
}

func AscendDslUpstreamLimit_Gets(p *radius.Packet) (values []AscendDslUpstreamLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslUpstreamLimit(i))
	}
	return
}

func AscendDslUpstreamLimit_Lookup(p *radius.Packet) (value AscendDslUpstreamLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslUpstreamLimit(i)
	return
}

func AscendDslUpstreamLimit_Set(p *radius.Packet, value AscendDslUpstreamLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 98, a)
}

func AscendDslUpstreamLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 98)
}

type AscendDslDownstreamLimit uint32

const (
	AscendDslDownstreamLimit_Value_AdslcapDn7168000 AscendDslDownstreamLimit = 0
	AscendDslDownstreamLimit_Value_AdslcapDn6272000 AscendDslDownstreamLimit = 1
	AscendDslDownstreamLimit_Value_AdslcapDn5120000 AscendDslDownstreamLimit = 2
	AscendDslDownstreamLimit_Value_AdslcapDn4480000 AscendDslDownstreamLimit = 3
	AscendDslDownstreamLimit_Value_AdslcapDn3200000 AscendDslDownstreamLimit = 4
	AscendDslDownstreamLimit_Value_AdslcapDn2688000 AscendDslDownstreamLimit = 5
	AscendDslDownstreamLimit_Value_AdslcapDn2560000 AscendDslDownstreamLimit = 6
	AscendDslDownstreamLimit_Value_AdslcapDn2240000 AscendDslDownstreamLimit = 7
	AscendDslDownstreamLimit_Value_AdslcapDn1920000 AscendDslDownstreamLimit = 8
	AscendDslDownstreamLimit_Value_AdslcapDn1600000 AscendDslDownstreamLimit = 9
	AscendDslDownstreamLimit_Value_AdslcapDn1280000 AscendDslDownstreamLimit = 10
	AscendDslDownstreamLimit_Value_AdslcapDn960000  AscendDslDownstreamLimit = 11
	AscendDslDownstreamLimit_Value_AdslcapDn640000  AscendDslDownstreamLimit = 12
	AscendDslDownstreamLimit_Value_AdsldmtDnAuto    AscendDslDownstreamLimit = 100
	AscendDslDownstreamLimit_Value_AdsldmtDn9504000 AscendDslDownstreamLimit = 101
	AscendDslDownstreamLimit_Value_AdsldmtDn8960000 AscendDslDownstreamLimit = 102
	AscendDslDownstreamLimit_Value_AdsldmtDn8000000 AscendDslDownstreamLimit = 103
	AscendDslDownstreamLimit_Value_AdsldmtDn7168000 AscendDslDownstreamLimit = 104
	AscendDslDownstreamLimit_Value_AdsldmtDn6272000 AscendDslDownstreamLimit = 105
	AscendDslDownstreamLimit_Value_AdsldmtDn5120000 AscendDslDownstreamLimit = 106
	AscendDslDownstreamLimit_Value_AdsldmtDn4480000 AscendDslDownstreamLimit = 107
	AscendDslDownstreamLimit_Value_AdsldmtDn3200000 AscendDslDownstreamLimit = 108
	AscendDslDownstreamLimit_Value_AdsldmtDn2688000 AscendDslDownstreamLimit = 109
	AscendDslDownstreamLimit_Value_AdsldmtDn2560000 AscendDslDownstreamLimit = 110
	AscendDslDownstreamLimit_Value_AdsldmtDn2240000 AscendDslDownstreamLimit = 111
	AscendDslDownstreamLimit_Value_AdsldmtDn1920000 AscendDslDownstreamLimit = 112
	AscendDslDownstreamLimit_Value_AdsldmtDn1600000 AscendDslDownstreamLimit = 113
	AscendDslDownstreamLimit_Value_AdsldmtDn1280000 AscendDslDownstreamLimit = 114
	AscendDslDownstreamLimit_Value_AdsldmtDn960000  AscendDslDownstreamLimit = 115
	AscendDslDownstreamLimit_Value_AdsldmtDn768000  AscendDslDownstreamLimit = 116
	AscendDslDownstreamLimit_Value_AdsldmtDn640000  AscendDslDownstreamLimit = 117
	AscendDslDownstreamLimit_Value_AdsldmtDn512000  AscendDslDownstreamLimit = 118
	AscendDslDownstreamLimit_Value_AdsldmtDn384000  AscendDslDownstreamLimit = 119
	AscendDslDownstreamLimit_Value_AdsldmtDn256000  AscendDslDownstreamLimit = 120
	AscendDslDownstreamLimit_Value_AdsldmtDn128000  AscendDslDownstreamLimit = 121
)

var AscendDslDownstreamLimit_Strings = map[AscendDslDownstreamLimit]string{
	AscendDslDownstreamLimit_Value_AdslcapDn7168000: "adslcap-dn-7168000",
	AscendDslDownstreamLimit_Value_AdslcapDn6272000: "adslcap-dn-6272000",
	AscendDslDownstreamLimit_Value_AdslcapDn5120000: "adslcap-dn-5120000",
	AscendDslDownstreamLimit_Value_AdslcapDn4480000: "adslcap-dn-4480000",
	AscendDslDownstreamLimit_Value_AdslcapDn3200000: "adslcap-dn-3200000",
	AscendDslDownstreamLimit_Value_AdslcapDn2688000: "adslcap-dn-2688000",
	AscendDslDownstreamLimit_Value_AdslcapDn2560000: "adslcap-dn-2560000",
	AscendDslDownstreamLimit_Value_AdslcapDn2240000: "adslcap-dn-2240000",
	AscendDslDownstreamLimit_Value_AdslcapDn1920000: "adslcap-dn-1920000",
	AscendDslDownstreamLimit_Value_AdslcapDn1600000: "adslcap-dn-1600000",
	AscendDslDownstreamLimit_Value_AdslcapDn1280000: "adslcap-dn-1280000",
	AscendDslDownstreamLimit_Value_AdslcapDn960000:  "adslcap-dn-960000",
	AscendDslDownstreamLimit_Value_AdslcapDn640000:  "adslcap-dn-640000",
	AscendDslDownstreamLimit_Value_AdsldmtDnAuto:    "adsldmt-dn-auto",
	AscendDslDownstreamLimit_Value_AdsldmtDn9504000: "adsldmt-dn-9504000",
	AscendDslDownstreamLimit_Value_AdsldmtDn8960000: "adsldmt-dn-8960000",
	AscendDslDownstreamLimit_Value_AdsldmtDn8000000: "adsldmt-dn-8000000",
	AscendDslDownstreamLimit_Value_AdsldmtDn7168000: "adsldmt-dn-7168000",
	AscendDslDownstreamLimit_Value_AdsldmtDn6272000: "adsldmt-dn-6272000",
	AscendDslDownstreamLimit_Value_AdsldmtDn5120000: "adsldmt-dn-5120000",
	AscendDslDownstreamLimit_Value_AdsldmtDn4480000: "adsldmt-dn-4480000",
	AscendDslDownstreamLimit_Value_AdsldmtDn3200000: "adsldmt-dn-3200000",
	AscendDslDownstreamLimit_Value_AdsldmtDn2688000: "adsldmt-dn-2688000",
	AscendDslDownstreamLimit_Value_AdsldmtDn2560000: "adsldmt-dn-2560000",
	AscendDslDownstreamLimit_Value_AdsldmtDn2240000: "adsldmt-dn-2240000",
	AscendDslDownstreamLimit_Value_AdsldmtDn1920000: "adsldmt-dn-1920000",
	AscendDslDownstreamLimit_Value_AdsldmtDn1600000: "adsldmt-dn-1600000",
	AscendDslDownstreamLimit_Value_AdsldmtDn1280000: "adsldmt-dn-1280000",
	AscendDslDownstreamLimit_Value_AdsldmtDn960000:  "adsldmt-dn-960000",
	AscendDslDownstreamLimit_Value_AdsldmtDn768000:  "adsldmt-dn-768000",
	AscendDslDownstreamLimit_Value_AdsldmtDn640000:  "adsldmt-dn-640000",
	AscendDslDownstreamLimit_Value_AdsldmtDn512000:  "adsldmt-dn-512000",
	AscendDslDownstreamLimit_Value_AdsldmtDn384000:  "adsldmt-dn-384000",
	AscendDslDownstreamLimit_Value_AdsldmtDn256000:  "adsldmt-dn-256000",
	AscendDslDownstreamLimit_Value_AdsldmtDn128000:  "adsldmt-dn-128000",
}

func (a AscendDslDownstreamLimit) String() string {
	if str, ok := AscendDslDownstreamLimit_Strings[a]; ok {
		return str
	}
	return "AscendDslDownstreamLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslDownstreamLimit_Add(p *radius.Packet, value AscendDslDownstreamLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 99, a)
}

func AscendDslDownstreamLimit_Get(p *radius.Packet) (value AscendDslDownstreamLimit) {
	value, _ = AscendDslDownstreamLimit_Lookup(p)
	return
}

func AscendDslDownstreamLimit_Gets(p *radius.Packet) (values []AscendDslDownstreamLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslDownstreamLimit(i))
	}
	return
}

func AscendDslDownstreamLimit_Lookup(p *radius.Packet) (value AscendDslDownstreamLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslDownstreamLimit(i)
	return
}

func AscendDslDownstreamLimit_Set(p *radius.Packet, value AscendDslDownstreamLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 99, a)
}

func AscendDslDownstreamLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 99)
}

type AscendDslCIRRecvLimit uint32

var AscendDslCIRRecvLimit_Strings = map[AscendDslCIRRecvLimit]string{}

func (a AscendDslCIRRecvLimit) String() string {
	if str, ok := AscendDslCIRRecvLimit_Strings[a]; ok {
		return str
	}
	return "AscendDslCIRRecvLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslCIRRecvLimit_Add(p *radius.Packet, value AscendDslCIRRecvLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 100, a)
}

func AscendDslCIRRecvLimit_Get(p *radius.Packet) (value AscendDslCIRRecvLimit) {
	value, _ = AscendDslCIRRecvLimit_Lookup(p)
	return
}

func AscendDslCIRRecvLimit_Gets(p *radius.Packet) (values []AscendDslCIRRecvLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslCIRRecvLimit(i))
	}
	return
}

func AscendDslCIRRecvLimit_Lookup(p *radius.Packet) (value AscendDslCIRRecvLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslCIRRecvLimit(i)
	return
}

func AscendDslCIRRecvLimit_Set(p *radius.Packet, value AscendDslCIRRecvLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 100, a)
}

func AscendDslCIRRecvLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 100)
}

type AscendDslCIRXmitLimit uint32

var AscendDslCIRXmitLimit_Strings = map[AscendDslCIRXmitLimit]string{}

func (a AscendDslCIRXmitLimit) String() string {
	if str, ok := AscendDslCIRXmitLimit_Strings[a]; ok {
		return str
	}
	return "AscendDslCIRXmitLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDslCIRXmitLimit_Add(p *radius.Packet, value AscendDslCIRXmitLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 101, a)
}

func AscendDslCIRXmitLimit_Get(p *radius.Packet) (value AscendDslCIRXmitLimit) {
	value, _ = AscendDslCIRXmitLimit_Lookup(p)
	return
}

func AscendDslCIRXmitLimit_Gets(p *radius.Packet) (values []AscendDslCIRXmitLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDslCIRXmitLimit(i))
	}
	return
}

func AscendDslCIRXmitLimit_Lookup(p *radius.Packet) (value AscendDslCIRXmitLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDslCIRXmitLimit(i)
	return
}

func AscendDslCIRXmitLimit_Set(p *radius.Packet, value AscendDslCIRXmitLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 101, a)
}

func AscendDslCIRXmitLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 101)
}

func AscendVRouterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 102, a)
}

func AscendVRouterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 102, a)
}

func AscendVRouterName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendVRouterName_Lookup(p)
	return
}

func AscendVRouterName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendVRouterName_LookupString(p)
	return
}

func AscendVRouterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendVRouterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendVRouterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendVRouterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendVRouterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 102, a)
}

func AscendVRouterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 102, a)
}

func AscendVRouterName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 102)
}

func AscendSourceAuth_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 103, a)
}

func AscendSourceAuth_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 103, a)
}

func AscendSourceAuth_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendSourceAuth_Lookup(p)
	return
}

func AscendSourceAuth_GetString(p *radius.Packet) (value string) {
	value, _ = AscendSourceAuth_LookupString(p)
	return
}

func AscendSourceAuth_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSourceAuth_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSourceAuth_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendSourceAuth_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendSourceAuth_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 103, a)
}

func AscendSourceAuth_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 103, a)
}

func AscendSourceAuth_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 103)
}

func AscendPrivateRoute_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 104, a)
}

func AscendPrivateRoute_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 104, a)
}

func AscendPrivateRoute_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendPrivateRoute_Lookup(p)
	return
}

func AscendPrivateRoute_GetString(p *radius.Packet) (value string) {
	value, _ = AscendPrivateRoute_LookupString(p)
	return
}

func AscendPrivateRoute_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrivateRoute_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrivateRoute_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendPrivateRoute_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendPrivateRoute_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 104, a)
}

func AscendPrivateRoute_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 104, a)
}

func AscendPrivateRoute_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 104)
}

type AscendNumberingPlanID uint32

const (
	AscendNumberingPlanID_Value_UnknownNumberingPlan AscendNumberingPlanID = 0
	AscendNumberingPlanID_Value_ISDNNumberingPlan    AscendNumberingPlanID = 1
	AscendNumberingPlanID_Value_PrivateNumberingPlan AscendNumberingPlanID = 9
)

var AscendNumberingPlanID_Strings = map[AscendNumberingPlanID]string{
	AscendNumberingPlanID_Value_UnknownNumberingPlan: "Unknown-Numbering-Plan",
	AscendNumberingPlanID_Value_ISDNNumberingPlan:    "ISDN-Numbering-Plan",
	AscendNumberingPlanID_Value_PrivateNumberingPlan: "Private-Numbering-Plan",
}

func (a AscendNumberingPlanID) String() string {
	if str, ok := AscendNumberingPlanID_Strings[a]; ok {
		return str
	}
	return "AscendNumberingPlanID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendNumberingPlanID_Add(p *radius.Packet, value AscendNumberingPlanID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 105, a)
}

func AscendNumberingPlanID_Get(p *radius.Packet) (value AscendNumberingPlanID) {
	value, _ = AscendNumberingPlanID_Lookup(p)
	return
}

func AscendNumberingPlanID_Gets(p *radius.Packet) (values []AscendNumberingPlanID, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendNumberingPlanID(i))
	}
	return
}

func AscendNumberingPlanID_Lookup(p *radius.Packet) (value AscendNumberingPlanID, err error) {
	a, ok := _Ascend_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendNumberingPlanID(i)
	return
}

func AscendNumberingPlanID_Set(p *radius.Packet, value AscendNumberingPlanID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 105, a)
}

func AscendNumberingPlanID_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 105)
}

type AscendFRLinkStatusDLCI uint32

const (
	AscendFRLinkStatusDLCI_Value_AscendFRLMIDlci0    AscendFRLinkStatusDLCI = 0
	AscendFRLinkStatusDLCI_Value_AscendFRLMIDlci1023 AscendFRLinkStatusDLCI = 1023
)

var AscendFRLinkStatusDLCI_Strings = map[AscendFRLinkStatusDLCI]string{
	AscendFRLinkStatusDLCI_Value_AscendFRLMIDlci0:    "Ascend-FR-LMI-Dlci-0",
	AscendFRLinkStatusDLCI_Value_AscendFRLMIDlci1023: "Ascend-FR-LMI-Dlci-1023",
}

func (a AscendFRLinkStatusDLCI) String() string {
	if str, ok := AscendFRLinkStatusDLCI_Strings[a]; ok {
		return str
	}
	return "AscendFRLinkStatusDLCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRLinkStatusDLCI_Add(p *radius.Packet, value AscendFRLinkStatusDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 106, a)
}

func AscendFRLinkStatusDLCI_Get(p *radius.Packet) (value AscendFRLinkStatusDLCI) {
	value, _ = AscendFRLinkStatusDLCI_Lookup(p)
	return
}

func AscendFRLinkStatusDLCI_Gets(p *radius.Packet) (values []AscendFRLinkStatusDLCI, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRLinkStatusDLCI(i))
	}
	return
}

func AscendFRLinkStatusDLCI_Lookup(p *radius.Packet) (value AscendFRLinkStatusDLCI, err error) {
	a, ok := _Ascend_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRLinkStatusDLCI(i)
	return
}

func AscendFRLinkStatusDLCI_Set(p *radius.Packet, value AscendFRLinkStatusDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 106, a)
}

func AscendFRLinkStatusDLCI_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 106)
}

func AscendCallingSubaddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 107, a)
}

func AscendCallingSubaddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 107, a)
}

func AscendCallingSubaddress_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendCallingSubaddress_Lookup(p)
	return
}

func AscendCallingSubaddress_GetString(p *radius.Packet) (value string) {
	value, _ = AscendCallingSubaddress_LookupString(p)
	return
}

func AscendCallingSubaddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendCallingSubaddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendCallingSubaddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendCallingSubaddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendCallingSubaddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 107, a)
}

func AscendCallingSubaddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 107, a)
}

func AscendCallingSubaddress_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 107)
}

type AscendCallbackDelay uint32

var AscendCallbackDelay_Strings = map[AscendCallbackDelay]string{}

func (a AscendCallbackDelay) String() string {
	if str, ok := AscendCallbackDelay_Strings[a]; ok {
		return str
	}
	return "AscendCallbackDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallbackDelay_Add(p *radius.Packet, value AscendCallbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 108, a)
}

func AscendCallbackDelay_Get(p *radius.Packet) (value AscendCallbackDelay) {
	value, _ = AscendCallbackDelay_Lookup(p)
	return
}

func AscendCallbackDelay_Gets(p *radius.Packet) (values []AscendCallbackDelay, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallbackDelay(i))
	}
	return
}

func AscendCallbackDelay_Lookup(p *radius.Packet) (value AscendCallbackDelay, err error) {
	a, ok := _Ascend_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallbackDelay(i)
	return
}

func AscendCallbackDelay_Set(p *radius.Packet, value AscendCallbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 108, a)
}

func AscendCallbackDelay_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 108)
}

func AscendEndpointDisc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 109, a)
}

func AscendEndpointDisc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 109, a)
}

func AscendEndpointDisc_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendEndpointDisc_Lookup(p)
	return
}

func AscendEndpointDisc_GetString(p *radius.Packet) (value string) {
	value, _ = AscendEndpointDisc_LookupString(p)
	return
}

func AscendEndpointDisc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendEndpointDisc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendEndpointDisc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendEndpointDisc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendEndpointDisc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 109, a)
}

func AscendEndpointDisc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 109, a)
}

func AscendEndpointDisc_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 109)
}

func AscendRemoteFW_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 110, a)
}

func AscendRemoteFW_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 110, a)
}

func AscendRemoteFW_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendRemoteFW_Lookup(p)
	return
}

func AscendRemoteFW_GetString(p *radius.Packet) (value string) {
	value, _ = AscendRemoteFW_LookupString(p)
	return
}

func AscendRemoteFW_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRemoteFW_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRemoteFW_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendRemoteFW_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendRemoteFW_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 110, a)
}

func AscendRemoteFW_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 110, a)
}

func AscendRemoteFW_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 110)
}

type AscendMulticastGLeaveDelay uint32

var AscendMulticastGLeaveDelay_Strings = map[AscendMulticastGLeaveDelay]string{}

func (a AscendMulticastGLeaveDelay) String() string {
	if str, ok := AscendMulticastGLeaveDelay_Strings[a]; ok {
		return str
	}
	return "AscendMulticastGLeaveDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMulticastGLeaveDelay_Add(p *radius.Packet, value AscendMulticastGLeaveDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 111, a)
}

func AscendMulticastGLeaveDelay_Get(p *radius.Packet) (value AscendMulticastGLeaveDelay) {
	value, _ = AscendMulticastGLeaveDelay_Lookup(p)
	return
}

func AscendMulticastGLeaveDelay_Gets(p *radius.Packet) (values []AscendMulticastGLeaveDelay, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMulticastGLeaveDelay(i))
	}
	return
}

func AscendMulticastGLeaveDelay_Lookup(p *radius.Packet) (value AscendMulticastGLeaveDelay, err error) {
	a, ok := _Ascend_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMulticastGLeaveDelay(i)
	return
}

func AscendMulticastGLeaveDelay_Set(p *radius.Packet, value AscendMulticastGLeaveDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 111, a)
}

func AscendMulticastGLeaveDelay_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 111)
}

type AscendCBCPEnable uint32

const (
	AscendCBCPEnable_Value_CBCPNotEnabled AscendCBCPEnable = 0
	AscendCBCPEnable_Value_CBCPEnabled    AscendCBCPEnable = 1
)

var AscendCBCPEnable_Strings = map[AscendCBCPEnable]string{
	AscendCBCPEnable_Value_CBCPNotEnabled: "CBCP-Not-Enabled",
	AscendCBCPEnable_Value_CBCPEnabled:    "CBCP-Enabled",
}

func (a AscendCBCPEnable) String() string {
	if str, ok := AscendCBCPEnable_Strings[a]; ok {
		return str
	}
	return "AscendCBCPEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCBCPEnable_Add(p *radius.Packet, value AscendCBCPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 112, a)
}

func AscendCBCPEnable_Get(p *radius.Packet) (value AscendCBCPEnable) {
	value, _ = AscendCBCPEnable_Lookup(p)
	return
}

func AscendCBCPEnable_Gets(p *radius.Packet) (values []AscendCBCPEnable, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCBCPEnable(i))
	}
	return
}

func AscendCBCPEnable_Lookup(p *radius.Packet) (value AscendCBCPEnable, err error) {
	a, ok := _Ascend_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCBCPEnable(i)
	return
}

func AscendCBCPEnable_Set(p *radius.Packet, value AscendCBCPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 112, a)
}

func AscendCBCPEnable_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 112)
}

type AscendCBCPMode uint32

const (
	AscendCBCPMode_Value_CBCPNoCallback      AscendCBCPMode = 1
	AscendCBCPMode_Value_CBCPUserCallback    AscendCBCPMode = 2
	AscendCBCPMode_Value_CBCPProfileCallback AscendCBCPMode = 3
	AscendCBCPMode_Value_CBCPAnyOrNo         AscendCBCPMode = 7
	AscendCBCPMode_Value_CBCPOff             AscendCBCPMode = 8
)

var AscendCBCPMode_Strings = map[AscendCBCPMode]string{
	AscendCBCPMode_Value_CBCPNoCallback:      "CBCP-No-Callback",
	AscendCBCPMode_Value_CBCPUserCallback:    "CBCP-User-Callback",
	AscendCBCPMode_Value_CBCPProfileCallback: "CBCP-Profile-Callback",
	AscendCBCPMode_Value_CBCPAnyOrNo:         "CBCP-Any-Or-No",
	AscendCBCPMode_Value_CBCPOff:             "CBCP-Off",
}

func (a AscendCBCPMode) String() string {
	if str, ok := AscendCBCPMode_Strings[a]; ok {
		return str
	}
	return "AscendCBCPMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCBCPMode_Add(p *radius.Packet, value AscendCBCPMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 113, a)
}

func AscendCBCPMode_Get(p *radius.Packet) (value AscendCBCPMode) {
	value, _ = AscendCBCPMode_Lookup(p)
	return
}

func AscendCBCPMode_Gets(p *radius.Packet) (values []AscendCBCPMode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCBCPMode(i))
	}
	return
}

func AscendCBCPMode_Lookup(p *radius.Packet) (value AscendCBCPMode, err error) {
	a, ok := _Ascend_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCBCPMode(i)
	return
}

func AscendCBCPMode_Set(p *radius.Packet, value AscendCBCPMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 113, a)
}

func AscendCBCPMode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 113)
}

type AscendCBCPDelay uint32

var AscendCBCPDelay_Strings = map[AscendCBCPDelay]string{}

func (a AscendCBCPDelay) String() string {
	if str, ok := AscendCBCPDelay_Strings[a]; ok {
		return str
	}
	return "AscendCBCPDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCBCPDelay_Add(p *radius.Packet, value AscendCBCPDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 114, a)
}

func AscendCBCPDelay_Get(p *radius.Packet) (value AscendCBCPDelay) {
	value, _ = AscendCBCPDelay_Lookup(p)
	return
}

func AscendCBCPDelay_Gets(p *radius.Packet) (values []AscendCBCPDelay, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 114) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCBCPDelay(i))
	}
	return
}

func AscendCBCPDelay_Lookup(p *radius.Packet) (value AscendCBCPDelay, err error) {
	a, ok := _Ascend_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCBCPDelay(i)
	return
}

func AscendCBCPDelay_Set(p *radius.Packet, value AscendCBCPDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 114, a)
}

func AscendCBCPDelay_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 114)
}

type AscendCBCPTrunkGroup uint32

var AscendCBCPTrunkGroup_Strings = map[AscendCBCPTrunkGroup]string{}

func (a AscendCBCPTrunkGroup) String() string {
	if str, ok := AscendCBCPTrunkGroup_Strings[a]; ok {
		return str
	}
	return "AscendCBCPTrunkGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCBCPTrunkGroup_Add(p *radius.Packet, value AscendCBCPTrunkGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 115, a)
}

func AscendCBCPTrunkGroup_Get(p *radius.Packet) (value AscendCBCPTrunkGroup) {
	value, _ = AscendCBCPTrunkGroup_Lookup(p)
	return
}

func AscendCBCPTrunkGroup_Gets(p *radius.Packet) (values []AscendCBCPTrunkGroup, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 115) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCBCPTrunkGroup(i))
	}
	return
}

func AscendCBCPTrunkGroup_Lookup(p *radius.Packet) (value AscendCBCPTrunkGroup, err error) {
	a, ok := _Ascend_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCBCPTrunkGroup(i)
	return
}

func AscendCBCPTrunkGroup_Set(p *radius.Packet, value AscendCBCPTrunkGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 115, a)
}

func AscendCBCPTrunkGroup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 115)
}

func AscendAppletalkRoute_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 116, a)
}

func AscendAppletalkRoute_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 116, a)
}

func AscendAppletalkRoute_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAppletalkRoute_Lookup(p)
	return
}

func AscendAppletalkRoute_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAppletalkRoute_LookupString(p)
	return
}

func AscendAppletalkRoute_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAppletalkRoute_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAppletalkRoute_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAppletalkRoute_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAppletalkRoute_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 116, a)
}

func AscendAppletalkRoute_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 116, a)
}

func AscendAppletalkRoute_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 116)
}

type AscendAppletalkPeerMode uint32

const (
	AscendAppletalkPeerMode_Value_AppletalkPeerRouter AscendAppletalkPeerMode = 0
	AscendAppletalkPeerMode_Value_AppletalkPeerDialin AscendAppletalkPeerMode = 1
)

var AscendAppletalkPeerMode_Strings = map[AscendAppletalkPeerMode]string{
	AscendAppletalkPeerMode_Value_AppletalkPeerRouter: "Appletalk-Peer-Router",
	AscendAppletalkPeerMode_Value_AppletalkPeerDialin: "Appletalk-Peer-Dialin",
}

func (a AscendAppletalkPeerMode) String() string {
	if str, ok := AscendAppletalkPeerMode_Strings[a]; ok {
		return str
	}
	return "AscendAppletalkPeerMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendAppletalkPeerMode_Add(p *radius.Packet, value AscendAppletalkPeerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 117, a)
}

func AscendAppletalkPeerMode_Get(p *radius.Packet) (value AscendAppletalkPeerMode) {
	value, _ = AscendAppletalkPeerMode_Lookup(p)
	return
}

func AscendAppletalkPeerMode_Gets(p *radius.Packet) (values []AscendAppletalkPeerMode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 117) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendAppletalkPeerMode(i))
	}
	return
}

func AscendAppletalkPeerMode_Lookup(p *radius.Packet) (value AscendAppletalkPeerMode, err error) {
	a, ok := _Ascend_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendAppletalkPeerMode(i)
	return
}

func AscendAppletalkPeerMode_Set(p *radius.Packet, value AscendAppletalkPeerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 117, a)
}

func AscendAppletalkPeerMode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 117)
}

type AscendRouteAppletalk uint32

const (
	AscendRouteAppletalk_Value_RouteAppletalkNo  AscendRouteAppletalk = 0
	AscendRouteAppletalk_Value_RouteAppletalkYes AscendRouteAppletalk = 1
)

var AscendRouteAppletalk_Strings = map[AscendRouteAppletalk]string{
	AscendRouteAppletalk_Value_RouteAppletalkNo:  "Route-Appletalk-No",
	AscendRouteAppletalk_Value_RouteAppletalkYes: "Route-Appletalk-Yes",
}

func (a AscendRouteAppletalk) String() string {
	if str, ok := AscendRouteAppletalk_Strings[a]; ok {
		return str
	}
	return "AscendRouteAppletalk(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendRouteAppletalk_Add(p *radius.Packet, value AscendRouteAppletalk) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 118, a)
}

func AscendRouteAppletalk_Get(p *radius.Packet) (value AscendRouteAppletalk) {
	value, _ = AscendRouteAppletalk_Lookup(p)
	return
}

func AscendRouteAppletalk_Gets(p *radius.Packet) (values []AscendRouteAppletalk, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendRouteAppletalk(i))
	}
	return
}

func AscendRouteAppletalk_Lookup(p *radius.Packet) (value AscendRouteAppletalk, err error) {
	a, ok := _Ascend_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendRouteAppletalk(i)
	return
}

func AscendRouteAppletalk_Set(p *radius.Packet, value AscendRouteAppletalk) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 118, a)
}

func AscendRouteAppletalk_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 118)
}

func AscendFCPParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 119, a)
}

func AscendFCPParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 119, a)
}

func AscendFCPParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFCPParameter_Lookup(p)
	return
}

func AscendFCPParameter_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFCPParameter_LookupString(p)
	return
}

func AscendFCPParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 119) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFCPParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 119) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFCPParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFCPParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFCPParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 119, a)
}

func AscendFCPParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 119, a)
}

func AscendFCPParameter_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 119)
}

type AscendModemPortNo uint32

var AscendModemPortNo_Strings = map[AscendModemPortNo]string{}

func (a AscendModemPortNo) String() string {
	if str, ok := AscendModemPortNo_Strings[a]; ok {
		return str
	}
	return "AscendModemPortNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendModemPortNo_Add(p *radius.Packet, value AscendModemPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 120, a)
}

func AscendModemPortNo_Get(p *radius.Packet) (value AscendModemPortNo) {
	value, _ = AscendModemPortNo_Lookup(p)
	return
}

func AscendModemPortNo_Gets(p *radius.Packet) (values []AscendModemPortNo, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendModemPortNo(i))
	}
	return
}

func AscendModemPortNo_Lookup(p *radius.Packet) (value AscendModemPortNo, err error) {
	a, ok := _Ascend_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendModemPortNo(i)
	return
}

func AscendModemPortNo_Set(p *radius.Packet, value AscendModemPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 120, a)
}

func AscendModemPortNo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 120)
}

type AscendModemSlotNo uint32

var AscendModemSlotNo_Strings = map[AscendModemSlotNo]string{}

func (a AscendModemSlotNo) String() string {
	if str, ok := AscendModemSlotNo_Strings[a]; ok {
		return str
	}
	return "AscendModemSlotNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendModemSlotNo_Add(p *radius.Packet, value AscendModemSlotNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 121, a)
}

func AscendModemSlotNo_Get(p *radius.Packet) (value AscendModemSlotNo) {
	value, _ = AscendModemSlotNo_Lookup(p)
	return
}

func AscendModemSlotNo_Gets(p *radius.Packet) (values []AscendModemSlotNo, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 121) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendModemSlotNo(i))
	}
	return
}

func AscendModemSlotNo_Lookup(p *radius.Packet) (value AscendModemSlotNo, err error) {
	a, ok := _Ascend_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendModemSlotNo(i)
	return
}

func AscendModemSlotNo_Set(p *radius.Packet, value AscendModemSlotNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 121, a)
}

func AscendModemSlotNo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 121)
}

type AscendModemShelfNo uint32

var AscendModemShelfNo_Strings = map[AscendModemShelfNo]string{}

func (a AscendModemShelfNo) String() string {
	if str, ok := AscendModemShelfNo_Strings[a]; ok {
		return str
	}
	return "AscendModemShelfNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendModemShelfNo_Add(p *radius.Packet, value AscendModemShelfNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 122, a)
}

func AscendModemShelfNo_Get(p *radius.Packet) (value AscendModemShelfNo) {
	value, _ = AscendModemShelfNo_Lookup(p)
	return
}

func AscendModemShelfNo_Gets(p *radius.Packet) (values []AscendModemShelfNo, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 122) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendModemShelfNo(i))
	}
	return
}

func AscendModemShelfNo_Lookup(p *radius.Packet) (value AscendModemShelfNo, err error) {
	a, ok := _Ascend_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendModemShelfNo(i)
	return
}

func AscendModemShelfNo_Set(p *radius.Packet, value AscendModemShelfNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 122, a)
}

func AscendModemShelfNo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 122)
}

type AscendCallAttemptLimit uint32

var AscendCallAttemptLimit_Strings = map[AscendCallAttemptLimit]string{}

func (a AscendCallAttemptLimit) String() string {
	if str, ok := AscendCallAttemptLimit_Strings[a]; ok {
		return str
	}
	return "AscendCallAttemptLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallAttemptLimit_Add(p *radius.Packet, value AscendCallAttemptLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 123, a)
}

func AscendCallAttemptLimit_Get(p *radius.Packet) (value AscendCallAttemptLimit) {
	value, _ = AscendCallAttemptLimit_Lookup(p)
	return
}

func AscendCallAttemptLimit_Gets(p *radius.Packet) (values []AscendCallAttemptLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallAttemptLimit(i))
	}
	return
}

func AscendCallAttemptLimit_Lookup(p *radius.Packet) (value AscendCallAttemptLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallAttemptLimit(i)
	return
}

func AscendCallAttemptLimit_Set(p *radius.Packet, value AscendCallAttemptLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 123, a)
}

func AscendCallAttemptLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 123)
}

type AscendCallBlockDuration uint32

var AscendCallBlockDuration_Strings = map[AscendCallBlockDuration]string{}

func (a AscendCallBlockDuration) String() string {
	if str, ok := AscendCallBlockDuration_Strings[a]; ok {
		return str
	}
	return "AscendCallBlockDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallBlockDuration_Add(p *radius.Packet, value AscendCallBlockDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 124, a)
}

func AscendCallBlockDuration_Get(p *radius.Packet) (value AscendCallBlockDuration) {
	value, _ = AscendCallBlockDuration_Lookup(p)
	return
}

func AscendCallBlockDuration_Gets(p *radius.Packet) (values []AscendCallBlockDuration, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 124) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallBlockDuration(i))
	}
	return
}

func AscendCallBlockDuration_Lookup(p *radius.Packet) (value AscendCallBlockDuration, err error) {
	a, ok := _Ascend_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallBlockDuration(i)
	return
}

func AscendCallBlockDuration_Set(p *radius.Packet, value AscendCallBlockDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 124, a)
}

func AscendCallBlockDuration_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 124)
}

type AscendMaximumCallDuration uint32

var AscendMaximumCallDuration_Strings = map[AscendMaximumCallDuration]string{}

func (a AscendMaximumCallDuration) String() string {
	if str, ok := AscendMaximumCallDuration_Strings[a]; ok {
		return str
	}
	return "AscendMaximumCallDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMaximumCallDuration_Add(p *radius.Packet, value AscendMaximumCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 125, a)
}

func AscendMaximumCallDuration_Get(p *radius.Packet) (value AscendMaximumCallDuration) {
	value, _ = AscendMaximumCallDuration_Lookup(p)
	return
}

func AscendMaximumCallDuration_Gets(p *radius.Packet) (values []AscendMaximumCallDuration, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMaximumCallDuration(i))
	}
	return
}

func AscendMaximumCallDuration_Lookup(p *radius.Packet) (value AscendMaximumCallDuration, err error) {
	a, ok := _Ascend_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMaximumCallDuration(i)
	return
}

func AscendMaximumCallDuration_Set(p *radius.Packet, value AscendMaximumCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 125, a)
}

func AscendMaximumCallDuration_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 125)
}

type AscendTemporaryRtes uint32

const (
	AscendTemporaryRtes_Value_TempRtesNo  AscendTemporaryRtes = 0
	AscendTemporaryRtes_Value_TempRtesYes AscendTemporaryRtes = 1
)

var AscendTemporaryRtes_Strings = map[AscendTemporaryRtes]string{
	AscendTemporaryRtes_Value_TempRtesNo:  "Temp-Rtes-No",
	AscendTemporaryRtes_Value_TempRtesYes: "Temp-Rtes-Yes",
}

func (a AscendTemporaryRtes) String() string {
	if str, ok := AscendTemporaryRtes_Strings[a]; ok {
		return str
	}
	return "AscendTemporaryRtes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTemporaryRtes_Add(p *radius.Packet, value AscendTemporaryRtes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 126, a)
}

func AscendTemporaryRtes_Get(p *radius.Packet) (value AscendTemporaryRtes) {
	value, _ = AscendTemporaryRtes_Lookup(p)
	return
}

func AscendTemporaryRtes_Gets(p *radius.Packet) (values []AscendTemporaryRtes, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTemporaryRtes(i))
	}
	return
}

func AscendTemporaryRtes_Lookup(p *radius.Packet) (value AscendTemporaryRtes, err error) {
	a, ok := _Ascend_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTemporaryRtes(i)
	return
}

func AscendTemporaryRtes_Set(p *radius.Packet, value AscendTemporaryRtes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 126, a)
}

func AscendTemporaryRtes_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 126)
}

type AscendTunnelingProtocol uint32

const (
	AscendTunnelingProtocol_Value_ATMPTunnel AscendTunnelingProtocol = 0
	AscendTunnelingProtocol_Value_VTPTunnel  AscendTunnelingProtocol = 1
)

var AscendTunnelingProtocol_Strings = map[AscendTunnelingProtocol]string{
	AscendTunnelingProtocol_Value_ATMPTunnel: "ATMP-Tunnel",
	AscendTunnelingProtocol_Value_VTPTunnel:  "VTP-Tunnel",
}

func (a AscendTunnelingProtocol) String() string {
	if str, ok := AscendTunnelingProtocol_Strings[a]; ok {
		return str
	}
	return "AscendTunnelingProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTunnelingProtocol_Add(p *radius.Packet, value AscendTunnelingProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 127, a)
}

func AscendTunnelingProtocol_Get(p *radius.Packet) (value AscendTunnelingProtocol) {
	value, _ = AscendTunnelingProtocol_Lookup(p)
	return
}

func AscendTunnelingProtocol_Gets(p *radius.Packet) (values []AscendTunnelingProtocol, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTunnelingProtocol(i))
	}
	return
}

func AscendTunnelingProtocol_Lookup(p *radius.Packet) (value AscendTunnelingProtocol, err error) {
	a, ok := _Ascend_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTunnelingProtocol(i)
	return
}

func AscendTunnelingProtocol_Set(p *radius.Packet, value AscendTunnelingProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 127, a)
}

func AscendTunnelingProtocol_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 127)
}

type AscendSharedProfileEnable uint32

const (
	AscendSharedProfileEnable_Value_SharedProfileNo  AscendSharedProfileEnable = 0
	AscendSharedProfileEnable_Value_SharedProfileYes AscendSharedProfileEnable = 1
)

var AscendSharedProfileEnable_Strings = map[AscendSharedProfileEnable]string{
	AscendSharedProfileEnable_Value_SharedProfileNo:  "Shared-Profile-No",
	AscendSharedProfileEnable_Value_SharedProfileYes: "Shared-Profile-Yes",
}

func (a AscendSharedProfileEnable) String() string {
	if str, ok := AscendSharedProfileEnable_Strings[a]; ok {
		return str
	}
	return "AscendSharedProfileEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSharedProfileEnable_Add(p *radius.Packet, value AscendSharedProfileEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 128, a)
}

func AscendSharedProfileEnable_Get(p *radius.Packet) (value AscendSharedProfileEnable) {
	value, _ = AscendSharedProfileEnable_Lookup(p)
	return
}

func AscendSharedProfileEnable_Gets(p *radius.Packet) (values []AscendSharedProfileEnable, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSharedProfileEnable(i))
	}
	return
}

func AscendSharedProfileEnable_Lookup(p *radius.Packet) (value AscendSharedProfileEnable, err error) {
	a, ok := _Ascend_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSharedProfileEnable(i)
	return
}

func AscendSharedProfileEnable_Set(p *radius.Packet, value AscendSharedProfileEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 128, a)
}

func AscendSharedProfileEnable_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 128)
}

func AscendPrimaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 129, a)
}

func AscendPrimaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 129, a)
}

func AscendPrimaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendPrimaryHomeAgent_Lookup(p)
	return
}

func AscendPrimaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AscendPrimaryHomeAgent_LookupString(p)
	return
}

func AscendPrimaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 129) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrimaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 129) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPrimaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendPrimaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendPrimaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 129, a)
}

func AscendPrimaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 129, a)
}

func AscendPrimaryHomeAgent_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 129)
}

func AscendSecondaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 130, a)
}

func AscendSecondaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 130, a)
}

func AscendSecondaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendSecondaryHomeAgent_Lookup(p)
	return
}

func AscendSecondaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AscendSecondaryHomeAgent_LookupString(p)
	return
}

func AscendSecondaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSecondaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSecondaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendSecondaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendSecondaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 130, a)
}

func AscendSecondaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 130, a)
}

func AscendSecondaryHomeAgent_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 130)
}

type AscendDialoutAllowed uint32

const (
	AscendDialoutAllowed_Value_DialoutNotAllowed AscendDialoutAllowed = 0
	AscendDialoutAllowed_Value_DialoutAllowed    AscendDialoutAllowed = 1
)

var AscendDialoutAllowed_Strings = map[AscendDialoutAllowed]string{
	AscendDialoutAllowed_Value_DialoutNotAllowed: "Dialout-Not-Allowed",
	AscendDialoutAllowed_Value_DialoutAllowed:    "Dialout-Allowed",
}

func (a AscendDialoutAllowed) String() string {
	if str, ok := AscendDialoutAllowed_Strings[a]; ok {
		return str
	}
	return "AscendDialoutAllowed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDialoutAllowed_Add(p *radius.Packet, value AscendDialoutAllowed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 131, a)
}

func AscendDialoutAllowed_Get(p *radius.Packet) (value AscendDialoutAllowed) {
	value, _ = AscendDialoutAllowed_Lookup(p)
	return
}

func AscendDialoutAllowed_Gets(p *radius.Packet) (values []AscendDialoutAllowed, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDialoutAllowed(i))
	}
	return
}

func AscendDialoutAllowed_Lookup(p *radius.Packet) (value AscendDialoutAllowed, err error) {
	a, ok := _Ascend_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDialoutAllowed(i)
	return
}

func AscendDialoutAllowed_Set(p *radius.Packet, value AscendDialoutAllowed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 131, a)
}

func AscendDialoutAllowed_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 131)
}

func AscendClientGateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 132, a)
}

func AscendClientGateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendClientGateway_Lookup(p)
	return
}

func AscendClientGateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 132) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendClientGateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendClientGateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 132, a)
}

func AscendClientGateway_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 132)
}

type AscendBACPEnable uint32

const (
	AscendBACPEnable_Value_BACPNo  AscendBACPEnable = 0
	AscendBACPEnable_Value_BACPYes AscendBACPEnable = 1
)

var AscendBACPEnable_Strings = map[AscendBACPEnable]string{
	AscendBACPEnable_Value_BACPNo:  "BACP-No",
	AscendBACPEnable_Value_BACPYes: "BACP-Yes",
}

func (a AscendBACPEnable) String() string {
	if str, ok := AscendBACPEnable_Strings[a]; ok {
		return str
	}
	return "AscendBACPEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBACPEnable_Add(p *radius.Packet, value AscendBACPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 133, a)
}

func AscendBACPEnable_Get(p *radius.Packet) (value AscendBACPEnable) {
	value, _ = AscendBACPEnable_Lookup(p)
	return
}

func AscendBACPEnable_Gets(p *radius.Packet) (values []AscendBACPEnable, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 133) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBACPEnable(i))
	}
	return
}

func AscendBACPEnable_Lookup(p *radius.Packet) (value AscendBACPEnable, err error) {
	a, ok := _Ascend_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBACPEnable(i)
	return
}

func AscendBACPEnable_Set(p *radius.Packet, value AscendBACPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 133, a)
}

func AscendBACPEnable_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 133)
}

type AscendDHCPMaximumLeases uint32

var AscendDHCPMaximumLeases_Strings = map[AscendDHCPMaximumLeases]string{}

func (a AscendDHCPMaximumLeases) String() string {
	if str, ok := AscendDHCPMaximumLeases_Strings[a]; ok {
		return str
	}
	return "AscendDHCPMaximumLeases(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDHCPMaximumLeases_Add(p *radius.Packet, value AscendDHCPMaximumLeases) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 134, a)
}

func AscendDHCPMaximumLeases_Get(p *radius.Packet) (value AscendDHCPMaximumLeases) {
	value, _ = AscendDHCPMaximumLeases_Lookup(p)
	return
}

func AscendDHCPMaximumLeases_Gets(p *radius.Packet) (values []AscendDHCPMaximumLeases, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 134) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDHCPMaximumLeases(i))
	}
	return
}

func AscendDHCPMaximumLeases_Lookup(p *radius.Packet) (value AscendDHCPMaximumLeases, err error) {
	a, ok := _Ascend_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDHCPMaximumLeases(i)
	return
}

func AscendDHCPMaximumLeases_Set(p *radius.Packet, value AscendDHCPMaximumLeases) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 134, a)
}

func AscendDHCPMaximumLeases_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 134)
}

func AscendClientPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 135, a)
}

func AscendClientPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendClientPrimaryDNS_Lookup(p)
	return
}

func AscendClientPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 135) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendClientPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendClientPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 135, a)
}

func AscendClientPrimaryDNS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 135)
}

func AscendClientSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 136, a)
}

func AscendClientSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendClientSecondaryDNS_Lookup(p)
	return
}

func AscendClientSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 136) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendClientSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendClientSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 136, a)
}

func AscendClientSecondaryDNS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 136)
}

type AscendClientAssignDNS uint32

const (
	AscendClientAssignDNS_Value_DNSAssignNo  AscendClientAssignDNS = 0
	AscendClientAssignDNS_Value_DNSAssignYes AscendClientAssignDNS = 1
)

var AscendClientAssignDNS_Strings = map[AscendClientAssignDNS]string{
	AscendClientAssignDNS_Value_DNSAssignNo:  "DNS-Assign-No",
	AscendClientAssignDNS_Value_DNSAssignYes: "DNS-Assign-Yes",
}

func (a AscendClientAssignDNS) String() string {
	if str, ok := AscendClientAssignDNS_Strings[a]; ok {
		return str
	}
	return "AscendClientAssignDNS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendClientAssignDNS_Add(p *radius.Packet, value AscendClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 137, a)
}

func AscendClientAssignDNS_Get(p *radius.Packet) (value AscendClientAssignDNS) {
	value, _ = AscendClientAssignDNS_Lookup(p)
	return
}

func AscendClientAssignDNS_Gets(p *radius.Packet) (values []AscendClientAssignDNS, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendClientAssignDNS(i))
	}
	return
}

func AscendClientAssignDNS_Lookup(p *radius.Packet) (value AscendClientAssignDNS, err error) {
	a, ok := _Ascend_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendClientAssignDNS(i)
	return
}

func AscendClientAssignDNS_Set(p *radius.Packet, value AscendClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 137, a)
}

func AscendClientAssignDNS_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 137)
}

type AscendUserAcctType uint32

const (
	AscendUserAcctType_Value_AscendUserAcctNone        AscendUserAcctType = 0
	AscendUserAcctType_Value_AscendUserAcctUser        AscendUserAcctType = 1
	AscendUserAcctType_Value_AscendUserAcctUserDefault AscendUserAcctType = 2
)

var AscendUserAcctType_Strings = map[AscendUserAcctType]string{
	AscendUserAcctType_Value_AscendUserAcctNone:        "Ascend-User-Acct-None",
	AscendUserAcctType_Value_AscendUserAcctUser:        "Ascend-User-Acct-User",
	AscendUserAcctType_Value_AscendUserAcctUserDefault: "Ascend-User-Acct-User-Default",
}

func (a AscendUserAcctType) String() string {
	if str, ok := AscendUserAcctType_Strings[a]; ok {
		return str
	}
	return "AscendUserAcctType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendUserAcctType_Add(p *radius.Packet, value AscendUserAcctType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 138, a)
}

func AscendUserAcctType_Get(p *radius.Packet) (value AscendUserAcctType) {
	value, _ = AscendUserAcctType_Lookup(p)
	return
}

func AscendUserAcctType_Gets(p *radius.Packet) (values []AscendUserAcctType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendUserAcctType(i))
	}
	return
}

func AscendUserAcctType_Lookup(p *radius.Packet) (value AscendUserAcctType, err error) {
	a, ok := _Ascend_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendUserAcctType(i)
	return
}

func AscendUserAcctType_Set(p *radius.Packet, value AscendUserAcctType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 138, a)
}

func AscendUserAcctType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 138)
}

func AscendUserAcctHost_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 139, a)
}

func AscendUserAcctHost_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendUserAcctHost_Lookup(p)
	return
}

func AscendUserAcctHost_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 139) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendUserAcctHost_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendUserAcctHost_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 139, a)
}

func AscendUserAcctHost_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 139)
}

type AscendUserAcctPort uint32

var AscendUserAcctPort_Strings = map[AscendUserAcctPort]string{}

func (a AscendUserAcctPort) String() string {
	if str, ok := AscendUserAcctPort_Strings[a]; ok {
		return str
	}
	return "AscendUserAcctPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendUserAcctPort_Add(p *radius.Packet, value AscendUserAcctPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 140, a)
}

func AscendUserAcctPort_Get(p *radius.Packet) (value AscendUserAcctPort) {
	value, _ = AscendUserAcctPort_Lookup(p)
	return
}

func AscendUserAcctPort_Gets(p *radius.Packet) (values []AscendUserAcctPort, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendUserAcctPort(i))
	}
	return
}

func AscendUserAcctPort_Lookup(p *radius.Packet) (value AscendUserAcctPort, err error) {
	a, ok := _Ascend_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendUserAcctPort(i)
	return
}

func AscendUserAcctPort_Set(p *radius.Packet, value AscendUserAcctPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 140, a)
}

func AscendUserAcctPort_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 140)
}

func AscendUserAcctKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 141, a)
}

func AscendUserAcctKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 141, a)
}

func AscendUserAcctKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendUserAcctKey_Lookup(p)
	return
}

func AscendUserAcctKey_GetString(p *radius.Packet) (value string) {
	value, _ = AscendUserAcctKey_LookupString(p)
	return
}

func AscendUserAcctKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendUserAcctKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendUserAcctKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendUserAcctKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendUserAcctKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 141, a)
}

func AscendUserAcctKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 141, a)
}

func AscendUserAcctKey_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 141)
}

type AscendUserAcctBase uint32

const (
	AscendUserAcctBase_Value_Base10 AscendUserAcctBase = 0
	AscendUserAcctBase_Value_Base16 AscendUserAcctBase = 1
)

var AscendUserAcctBase_Strings = map[AscendUserAcctBase]string{
	AscendUserAcctBase_Value_Base10: "Base-10",
	AscendUserAcctBase_Value_Base16: "Base-16",
}

func (a AscendUserAcctBase) String() string {
	if str, ok := AscendUserAcctBase_Strings[a]; ok {
		return str
	}
	return "AscendUserAcctBase(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendUserAcctBase_Add(p *radius.Packet, value AscendUserAcctBase) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 142, a)
}

func AscendUserAcctBase_Get(p *radius.Packet) (value AscendUserAcctBase) {
	value, _ = AscendUserAcctBase_Lookup(p)
	return
}

func AscendUserAcctBase_Gets(p *radius.Packet) (values []AscendUserAcctBase, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendUserAcctBase(i))
	}
	return
}

func AscendUserAcctBase_Lookup(p *radius.Packet) (value AscendUserAcctBase, err error) {
	a, ok := _Ascend_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendUserAcctBase(i)
	return
}

func AscendUserAcctBase_Set(p *radius.Packet, value AscendUserAcctBase) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 142, a)
}

func AscendUserAcctBase_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 142)
}

type AscendUserAcctTime uint32

var AscendUserAcctTime_Strings = map[AscendUserAcctTime]string{}

func (a AscendUserAcctTime) String() string {
	if str, ok := AscendUserAcctTime_Strings[a]; ok {
		return str
	}
	return "AscendUserAcctTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendUserAcctTime_Add(p *radius.Packet, value AscendUserAcctTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 143, a)
}

func AscendUserAcctTime_Get(p *radius.Packet) (value AscendUserAcctTime) {
	value, _ = AscendUserAcctTime_Lookup(p)
	return
}

func AscendUserAcctTime_Gets(p *radius.Packet) (values []AscendUserAcctTime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendUserAcctTime(i))
	}
	return
}

func AscendUserAcctTime_Lookup(p *radius.Packet) (value AscendUserAcctTime, err error) {
	a, ok := _Ascend_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendUserAcctTime(i)
	return
}

func AscendUserAcctTime_Set(p *radius.Packet, value AscendUserAcctTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 143, a)
}

func AscendUserAcctTime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 143)
}

func AscendAssignIPClient_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 144, a)
}

func AscendAssignIPClient_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendAssignIPClient_Lookup(p)
	return
}

func AscendAssignIPClient_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 144) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAssignIPClient_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendAssignIPClient_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 144, a)
}

func AscendAssignIPClient_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 144)
}

func AscendAssignIPServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 145, a)
}

func AscendAssignIPServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendAssignIPServer_Lookup(p)
	return
}

func AscendAssignIPServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 145) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAssignIPServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendAssignIPServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 145, a)
}

func AscendAssignIPServer_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 145)
}

func AscendAssignIPGlobalPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 146, a)
}

func AscendAssignIPGlobalPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 146, a)
}

func AscendAssignIPGlobalPool_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAssignIPGlobalPool_Lookup(p)
	return
}

func AscendAssignIPGlobalPool_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAssignIPGlobalPool_LookupString(p)
	return
}

func AscendAssignIPGlobalPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 146) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAssignIPGlobalPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 146) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAssignIPGlobalPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAssignIPGlobalPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAssignIPGlobalPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 146, a)
}

func AscendAssignIPGlobalPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 146, a)
}

func AscendAssignIPGlobalPool_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 146)
}

type AscendDHCPReply uint32

const (
	AscendDHCPReply_Value_DHCPReplyNo  AscendDHCPReply = 0
	AscendDHCPReply_Value_DHCPReplyYes AscendDHCPReply = 1
)

var AscendDHCPReply_Strings = map[AscendDHCPReply]string{
	AscendDHCPReply_Value_DHCPReplyNo:  "DHCP-Reply-No",
	AscendDHCPReply_Value_DHCPReplyYes: "DHCP-Reply-Yes",
}

func (a AscendDHCPReply) String() string {
	if str, ok := AscendDHCPReply_Strings[a]; ok {
		return str
	}
	return "AscendDHCPReply(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDHCPReply_Add(p *radius.Packet, value AscendDHCPReply) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 147, a)
}

func AscendDHCPReply_Get(p *radius.Packet) (value AscendDHCPReply) {
	value, _ = AscendDHCPReply_Lookup(p)
	return
}

func AscendDHCPReply_Gets(p *radius.Packet) (values []AscendDHCPReply, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDHCPReply(i))
	}
	return
}

func AscendDHCPReply_Lookup(p *radius.Packet) (value AscendDHCPReply, err error) {
	a, ok := _Ascend_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDHCPReply(i)
	return
}

func AscendDHCPReply_Set(p *radius.Packet, value AscendDHCPReply) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 147, a)
}

func AscendDHCPReply_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 147)
}

type AscendDHCPPoolNumber uint32

var AscendDHCPPoolNumber_Strings = map[AscendDHCPPoolNumber]string{}

func (a AscendDHCPPoolNumber) String() string {
	if str, ok := AscendDHCPPoolNumber_Strings[a]; ok {
		return str
	}
	return "AscendDHCPPoolNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDHCPPoolNumber_Add(p *radius.Packet, value AscendDHCPPoolNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 148, a)
}

func AscendDHCPPoolNumber_Get(p *radius.Packet) (value AscendDHCPPoolNumber) {
	value, _ = AscendDHCPPoolNumber_Lookup(p)
	return
}

func AscendDHCPPoolNumber_Gets(p *radius.Packet) (values []AscendDHCPPoolNumber, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDHCPPoolNumber(i))
	}
	return
}

func AscendDHCPPoolNumber_Lookup(p *radius.Packet) (value AscendDHCPPoolNumber, err error) {
	a, ok := _Ascend_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDHCPPoolNumber(i)
	return
}

func AscendDHCPPoolNumber_Set(p *radius.Packet, value AscendDHCPPoolNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 148, a)
}

func AscendDHCPPoolNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 148)
}

type AscendExpectCallback uint32

const (
	AscendExpectCallback_Value_ExpectCallbackNo  AscendExpectCallback = 0
	AscendExpectCallback_Value_ExpectCallbackYes AscendExpectCallback = 1
)

var AscendExpectCallback_Strings = map[AscendExpectCallback]string{
	AscendExpectCallback_Value_ExpectCallbackNo:  "Expect-Callback-No",
	AscendExpectCallback_Value_ExpectCallbackYes: "Expect-Callback-Yes",
}

func (a AscendExpectCallback) String() string {
	if str, ok := AscendExpectCallback_Strings[a]; ok {
		return str
	}
	return "AscendExpectCallback(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendExpectCallback_Add(p *radius.Packet, value AscendExpectCallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 149, a)
}

func AscendExpectCallback_Get(p *radius.Packet) (value AscendExpectCallback) {
	value, _ = AscendExpectCallback_Lookup(p)
	return
}

func AscendExpectCallback_Gets(p *radius.Packet) (values []AscendExpectCallback, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendExpectCallback(i))
	}
	return
}

func AscendExpectCallback_Lookup(p *radius.Packet) (value AscendExpectCallback, err error) {
	a, ok := _Ascend_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendExpectCallback(i)
	return
}

func AscendExpectCallback_Set(p *radius.Packet, value AscendExpectCallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 149, a)
}

func AscendExpectCallback_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 149)
}

type AscendEventType uint32

const (
	AscendEventType_Value_AscendColdStart    AscendEventType = 1
	AscendEventType_Value_AscendSessionEvent AscendEventType = 2
)

var AscendEventType_Strings = map[AscendEventType]string{
	AscendEventType_Value_AscendColdStart:    "Ascend-ColdStart",
	AscendEventType_Value_AscendSessionEvent: "Ascend-Session-Event",
}

func (a AscendEventType) String() string {
	if str, ok := AscendEventType_Strings[a]; ok {
		return str
	}
	return "AscendEventType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendEventType_Add(p *radius.Packet, value AscendEventType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 150, a)
}

func AscendEventType_Get(p *radius.Packet) (value AscendEventType) {
	value, _ = AscendEventType_Lookup(p)
	return
}

func AscendEventType_Gets(p *radius.Packet) (values []AscendEventType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 150) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendEventType(i))
	}
	return
}

func AscendEventType_Lookup(p *radius.Packet) (value AscendEventType, err error) {
	a, ok := _Ascend_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendEventType(i)
	return
}

func AscendEventType_Set(p *radius.Packet, value AscendEventType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 150, a)
}

func AscendEventType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 150)
}

func AscendSessionSvrKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 151, a)
}

func AscendSessionSvrKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 151, a)
}

func AscendSessionSvrKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendSessionSvrKey_Lookup(p)
	return
}

func AscendSessionSvrKey_GetString(p *radius.Packet) (value string) {
	value, _ = AscendSessionSvrKey_LookupString(p)
	return
}

func AscendSessionSvrKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSessionSvrKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSessionSvrKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendSessionSvrKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendSessionSvrKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 151, a)
}

func AscendSessionSvrKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 151, a)
}

func AscendSessionSvrKey_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 151)
}

type AscendMulticastRateLimit uint32

var AscendMulticastRateLimit_Strings = map[AscendMulticastRateLimit]string{}

func (a AscendMulticastRateLimit) String() string {
	if str, ok := AscendMulticastRateLimit_Strings[a]; ok {
		return str
	}
	return "AscendMulticastRateLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMulticastRateLimit_Add(p *radius.Packet, value AscendMulticastRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 152, a)
}

func AscendMulticastRateLimit_Get(p *radius.Packet) (value AscendMulticastRateLimit) {
	value, _ = AscendMulticastRateLimit_Lookup(p)
	return
}

func AscendMulticastRateLimit_Gets(p *radius.Packet) (values []AscendMulticastRateLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMulticastRateLimit(i))
	}
	return
}

func AscendMulticastRateLimit_Lookup(p *radius.Packet) (value AscendMulticastRateLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMulticastRateLimit(i)
	return
}

func AscendMulticastRateLimit_Set(p *radius.Packet, value AscendMulticastRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 152, a)
}

func AscendMulticastRateLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 152)
}

func AscendIFNetmask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 153, a)
}

func AscendIFNetmask_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendIFNetmask_Lookup(p)
	return
}

func AscendIFNetmask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 153) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIFNetmask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendIFNetmask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 153, a)
}

func AscendIFNetmask_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 153)
}

func AscendRemoteAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 154, a)
}

func AscendRemoteAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendRemoteAddr_Lookup(p)
	return
}

func AscendRemoteAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 154) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendRemoteAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendRemoteAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 154, a)
}

func AscendRemoteAddr_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 154)
}

type AscendMulticastClient uint32

const (
	AscendMulticastClient_Value_MulticastNo  AscendMulticastClient = 0
	AscendMulticastClient_Value_MulticastYes AscendMulticastClient = 1
)

var AscendMulticastClient_Strings = map[AscendMulticastClient]string{
	AscendMulticastClient_Value_MulticastNo:  "Multicast-No",
	AscendMulticastClient_Value_MulticastYes: "Multicast-Yes",
}

func (a AscendMulticastClient) String() string {
	if str, ok := AscendMulticastClient_Strings[a]; ok {
		return str
	}
	return "AscendMulticastClient(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMulticastClient_Add(p *radius.Packet, value AscendMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 155, a)
}

func AscendMulticastClient_Get(p *radius.Packet) (value AscendMulticastClient) {
	value, _ = AscendMulticastClient_Lookup(p)
	return
}

func AscendMulticastClient_Gets(p *radius.Packet) (values []AscendMulticastClient, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 155) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMulticastClient(i))
	}
	return
}

func AscendMulticastClient_Lookup(p *radius.Packet) (value AscendMulticastClient, err error) {
	a, ok := _Ascend_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMulticastClient(i)
	return
}

func AscendMulticastClient_Set(p *radius.Packet, value AscendMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 155, a)
}

func AscendMulticastClient_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 155)
}

func AscendFRCircuitName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 156, a)
}

func AscendFRCircuitName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 156, a)
}

func AscendFRCircuitName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFRCircuitName_Lookup(p)
	return
}

func AscendFRCircuitName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFRCircuitName_LookupString(p)
	return
}

func AscendFRCircuitName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 156) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRCircuitName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 156) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRCircuitName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFRCircuitName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFRCircuitName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 156, a)
}

func AscendFRCircuitName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 156, a)
}

func AscendFRCircuitName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 156)
}

type AscendFRLinkUp uint32

const (
	AscendFRLinkUp_Value_AscendLinkUpDefault  AscendFRLinkUp = 0
	AscendFRLinkUp_Value_AscendLinkUpAlwaysUp AscendFRLinkUp = 1
)

var AscendFRLinkUp_Strings = map[AscendFRLinkUp]string{
	AscendFRLinkUp_Value_AscendLinkUpDefault:  "Ascend-LinkUp-Default",
	AscendFRLinkUp_Value_AscendLinkUpAlwaysUp: "Ascend-LinkUp-AlwaysUp",
}

func (a AscendFRLinkUp) String() string {
	if str, ok := AscendFRLinkUp_Strings[a]; ok {
		return str
	}
	return "AscendFRLinkUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRLinkUp_Add(p *radius.Packet, value AscendFRLinkUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 157, a)
}

func AscendFRLinkUp_Get(p *radius.Packet) (value AscendFRLinkUp) {
	value, _ = AscendFRLinkUp_Lookup(p)
	return
}

func AscendFRLinkUp_Gets(p *radius.Packet) (values []AscendFRLinkUp, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 157) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRLinkUp(i))
	}
	return
}

func AscendFRLinkUp_Lookup(p *radius.Packet) (value AscendFRLinkUp, err error) {
	a, ok := _Ascend_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRLinkUp(i)
	return
}

func AscendFRLinkUp_Set(p *radius.Packet, value AscendFRLinkUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 157, a)
}

func AscendFRLinkUp_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 157)
}

type AscendFRNailedGrp uint32

var AscendFRNailedGrp_Strings = map[AscendFRNailedGrp]string{}

func (a AscendFRNailedGrp) String() string {
	if str, ok := AscendFRNailedGrp_Strings[a]; ok {
		return str
	}
	return "AscendFRNailedGrp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRNailedGrp_Add(p *radius.Packet, value AscendFRNailedGrp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 158, a)
}

func AscendFRNailedGrp_Get(p *radius.Packet) (value AscendFRNailedGrp) {
	value, _ = AscendFRNailedGrp_Lookup(p)
	return
}

func AscendFRNailedGrp_Gets(p *radius.Packet) (values []AscendFRNailedGrp, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 158) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRNailedGrp(i))
	}
	return
}

func AscendFRNailedGrp_Lookup(p *radius.Packet) (value AscendFRNailedGrp, err error) {
	a, ok := _Ascend_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRNailedGrp(i)
	return
}

func AscendFRNailedGrp_Set(p *radius.Packet, value AscendFRNailedGrp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 158, a)
}

func AscendFRNailedGrp_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 158)
}

type AscendFRType uint32

const (
	AscendFRType_Value_AscendFRDTE AscendFRType = 0
	AscendFRType_Value_AscendFRDCE AscendFRType = 1
	AscendFRType_Value_AscendFRNNI AscendFRType = 2
)

var AscendFRType_Strings = map[AscendFRType]string{
	AscendFRType_Value_AscendFRDTE: "Ascend-FR-DTE",
	AscendFRType_Value_AscendFRDCE: "Ascend-FR-DCE",
	AscendFRType_Value_AscendFRNNI: "Ascend-FR-NNI",
}

func (a AscendFRType) String() string {
	if str, ok := AscendFRType_Strings[a]; ok {
		return str
	}
	return "AscendFRType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRType_Add(p *radius.Packet, value AscendFRType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 159, a)
}

func AscendFRType_Get(p *radius.Packet) (value AscendFRType) {
	value, _ = AscendFRType_Lookup(p)
	return
}

func AscendFRType_Gets(p *radius.Packet) (values []AscendFRType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRType(i))
	}
	return
}

func AscendFRType_Lookup(p *radius.Packet) (value AscendFRType, err error) {
	a, ok := _Ascend_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRType(i)
	return
}

func AscendFRType_Set(p *radius.Packet, value AscendFRType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 159, a)
}

func AscendFRType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 159)
}

type AscendFRLinkMgt uint32

const (
	AscendFRLinkMgt_Value_AscendFRNoLinkMgt AscendFRLinkMgt = 0
	AscendFRLinkMgt_Value_AscendFRT1617D    AscendFRLinkMgt = 1
	AscendFRLinkMgt_Value_AscendFRQ933A     AscendFRLinkMgt = 2
)

var AscendFRLinkMgt_Strings = map[AscendFRLinkMgt]string{
	AscendFRLinkMgt_Value_AscendFRNoLinkMgt: "Ascend-FR-No-Link-Mgt",
	AscendFRLinkMgt_Value_AscendFRT1617D:    "Ascend-FR-T1-617D",
	AscendFRLinkMgt_Value_AscendFRQ933A:     "Ascend-FR-Q-933A",
}

func (a AscendFRLinkMgt) String() string {
	if str, ok := AscendFRLinkMgt_Strings[a]; ok {
		return str
	}
	return "AscendFRLinkMgt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRLinkMgt_Add(p *radius.Packet, value AscendFRLinkMgt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 160, a)
}

func AscendFRLinkMgt_Get(p *radius.Packet) (value AscendFRLinkMgt) {
	value, _ = AscendFRLinkMgt_Lookup(p)
	return
}

func AscendFRLinkMgt_Gets(p *radius.Packet) (values []AscendFRLinkMgt, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 160) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRLinkMgt(i))
	}
	return
}

func AscendFRLinkMgt_Lookup(p *radius.Packet) (value AscendFRLinkMgt, err error) {
	a, ok := _Ascend_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRLinkMgt(i)
	return
}

func AscendFRLinkMgt_Set(p *radius.Packet, value AscendFRLinkMgt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 160, a)
}

func AscendFRLinkMgt_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 160)
}

type AscendFRN391 uint32

var AscendFRN391_Strings = map[AscendFRN391]string{}

func (a AscendFRN391) String() string {
	if str, ok := AscendFRN391_Strings[a]; ok {
		return str
	}
	return "AscendFRN391(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRN391_Add(p *radius.Packet, value AscendFRN391) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 161, a)
}

func AscendFRN391_Get(p *radius.Packet) (value AscendFRN391) {
	value, _ = AscendFRN391_Lookup(p)
	return
}

func AscendFRN391_Gets(p *radius.Packet) (values []AscendFRN391, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 161) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRN391(i))
	}
	return
}

func AscendFRN391_Lookup(p *radius.Packet) (value AscendFRN391, err error) {
	a, ok := _Ascend_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRN391(i)
	return
}

func AscendFRN391_Set(p *radius.Packet, value AscendFRN391) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 161, a)
}

func AscendFRN391_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 161)
}

type AscendFRDCEN392 uint32

var AscendFRDCEN392_Strings = map[AscendFRDCEN392]string{}

func (a AscendFRDCEN392) String() string {
	if str, ok := AscendFRDCEN392_Strings[a]; ok {
		return str
	}
	return "AscendFRDCEN392(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDCEN392_Add(p *radius.Packet, value AscendFRDCEN392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 162, a)
}

func AscendFRDCEN392_Get(p *radius.Packet) (value AscendFRDCEN392) {
	value, _ = AscendFRDCEN392_Lookup(p)
	return
}

func AscendFRDCEN392_Gets(p *radius.Packet) (values []AscendFRDCEN392, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 162) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDCEN392(i))
	}
	return
}

func AscendFRDCEN392_Lookup(p *radius.Packet) (value AscendFRDCEN392, err error) {
	a, ok := _Ascend_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDCEN392(i)
	return
}

func AscendFRDCEN392_Set(p *radius.Packet, value AscendFRDCEN392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 162, a)
}

func AscendFRDCEN392_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 162)
}

type AscendFRDTEN392 uint32

var AscendFRDTEN392_Strings = map[AscendFRDTEN392]string{}

func (a AscendFRDTEN392) String() string {
	if str, ok := AscendFRDTEN392_Strings[a]; ok {
		return str
	}
	return "AscendFRDTEN392(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDTEN392_Add(p *radius.Packet, value AscendFRDTEN392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 163, a)
}

func AscendFRDTEN392_Get(p *radius.Packet) (value AscendFRDTEN392) {
	value, _ = AscendFRDTEN392_Lookup(p)
	return
}

func AscendFRDTEN392_Gets(p *radius.Packet) (values []AscendFRDTEN392, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 163) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDTEN392(i))
	}
	return
}

func AscendFRDTEN392_Lookup(p *radius.Packet) (value AscendFRDTEN392, err error) {
	a, ok := _Ascend_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDTEN392(i)
	return
}

func AscendFRDTEN392_Set(p *radius.Packet, value AscendFRDTEN392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 163, a)
}

func AscendFRDTEN392_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 163)
}

type AscendFRDCEN393 uint32

var AscendFRDCEN393_Strings = map[AscendFRDCEN393]string{}

func (a AscendFRDCEN393) String() string {
	if str, ok := AscendFRDCEN393_Strings[a]; ok {
		return str
	}
	return "AscendFRDCEN393(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDCEN393_Add(p *radius.Packet, value AscendFRDCEN393) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 164, a)
}

func AscendFRDCEN393_Get(p *radius.Packet) (value AscendFRDCEN393) {
	value, _ = AscendFRDCEN393_Lookup(p)
	return
}

func AscendFRDCEN393_Gets(p *radius.Packet) (values []AscendFRDCEN393, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 164) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDCEN393(i))
	}
	return
}

func AscendFRDCEN393_Lookup(p *radius.Packet) (value AscendFRDCEN393, err error) {
	a, ok := _Ascend_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDCEN393(i)
	return
}

func AscendFRDCEN393_Set(p *radius.Packet, value AscendFRDCEN393) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 164, a)
}

func AscendFRDCEN393_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 164)
}

type AscendFRDTEN393 uint32

var AscendFRDTEN393_Strings = map[AscendFRDTEN393]string{}

func (a AscendFRDTEN393) String() string {
	if str, ok := AscendFRDTEN393_Strings[a]; ok {
		return str
	}
	return "AscendFRDTEN393(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDTEN393_Add(p *radius.Packet, value AscendFRDTEN393) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 165, a)
}

func AscendFRDTEN393_Get(p *radius.Packet) (value AscendFRDTEN393) {
	value, _ = AscendFRDTEN393_Lookup(p)
	return
}

func AscendFRDTEN393_Gets(p *radius.Packet) (values []AscendFRDTEN393, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 165) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDTEN393(i))
	}
	return
}

func AscendFRDTEN393_Lookup(p *radius.Packet) (value AscendFRDTEN393, err error) {
	a, ok := _Ascend_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDTEN393(i)
	return
}

func AscendFRDTEN393_Set(p *radius.Packet, value AscendFRDTEN393) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 165, a)
}

func AscendFRDTEN393_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 165)
}

type AscendFRT391 uint32

var AscendFRT391_Strings = map[AscendFRT391]string{}

func (a AscendFRT391) String() string {
	if str, ok := AscendFRT391_Strings[a]; ok {
		return str
	}
	return "AscendFRT391(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRT391_Add(p *radius.Packet, value AscendFRT391) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 166, a)
}

func AscendFRT391_Get(p *radius.Packet) (value AscendFRT391) {
	value, _ = AscendFRT391_Lookup(p)
	return
}

func AscendFRT391_Gets(p *radius.Packet) (values []AscendFRT391, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 166) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRT391(i))
	}
	return
}

func AscendFRT391_Lookup(p *radius.Packet) (value AscendFRT391, err error) {
	a, ok := _Ascend_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRT391(i)
	return
}

func AscendFRT391_Set(p *radius.Packet, value AscendFRT391) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 166, a)
}

func AscendFRT391_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 166)
}

type AscendFRT392 uint32

var AscendFRT392_Strings = map[AscendFRT392]string{}

func (a AscendFRT392) String() string {
	if str, ok := AscendFRT392_Strings[a]; ok {
		return str
	}
	return "AscendFRT392(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRT392_Add(p *radius.Packet, value AscendFRT392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 167, a)
}

func AscendFRT392_Get(p *radius.Packet) (value AscendFRT392) {
	value, _ = AscendFRT392_Lookup(p)
	return
}

func AscendFRT392_Gets(p *radius.Packet) (values []AscendFRT392, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 167) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRT392(i))
	}
	return
}

func AscendFRT392_Lookup(p *radius.Packet) (value AscendFRT392, err error) {
	a, ok := _Ascend_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRT392(i)
	return
}

func AscendFRT392_Set(p *radius.Packet, value AscendFRT392) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 167, a)
}

func AscendFRT392_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 167)
}

func AscendBridgeAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 168, a)
}

func AscendBridgeAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 168, a)
}

func AscendBridgeAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendBridgeAddress_Lookup(p)
	return
}

func AscendBridgeAddress_GetString(p *radius.Packet) (value string) {
	value, _ = AscendBridgeAddress_LookupString(p)
	return
}

func AscendBridgeAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 168) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBridgeAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 168) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBridgeAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendBridgeAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendBridgeAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 168, a)
}

func AscendBridgeAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 168, a)
}

func AscendBridgeAddress_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 168)
}

type AscendTSIdleLimit uint32

var AscendTSIdleLimit_Strings = map[AscendTSIdleLimit]string{}

func (a AscendTSIdleLimit) String() string {
	if str, ok := AscendTSIdleLimit_Strings[a]; ok {
		return str
	}
	return "AscendTSIdleLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTSIdleLimit_Add(p *radius.Packet, value AscendTSIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 169, a)
}

func AscendTSIdleLimit_Get(p *radius.Packet) (value AscendTSIdleLimit) {
	value, _ = AscendTSIdleLimit_Lookup(p)
	return
}

func AscendTSIdleLimit_Gets(p *radius.Packet) (values []AscendTSIdleLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 169) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTSIdleLimit(i))
	}
	return
}

func AscendTSIdleLimit_Lookup(p *radius.Packet) (value AscendTSIdleLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 169)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTSIdleLimit(i)
	return
}

func AscendTSIdleLimit_Set(p *radius.Packet, value AscendTSIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 169, a)
}

func AscendTSIdleLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 169)
}

type AscendTSIdleMode uint32

const (
	AscendTSIdleMode_Value_TSIdleNone        AscendTSIdleMode = 0
	AscendTSIdleMode_Value_TSIdleInput       AscendTSIdleMode = 1
	AscendTSIdleMode_Value_TSIdleInputOutput AscendTSIdleMode = 2
)

var AscendTSIdleMode_Strings = map[AscendTSIdleMode]string{
	AscendTSIdleMode_Value_TSIdleNone:        "TS-Idle-None",
	AscendTSIdleMode_Value_TSIdleInput:       "TS-Idle-Input",
	AscendTSIdleMode_Value_TSIdleInputOutput: "TS-Idle-Input-Output",
}

func (a AscendTSIdleMode) String() string {
	if str, ok := AscendTSIdleMode_Strings[a]; ok {
		return str
	}
	return "AscendTSIdleMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTSIdleMode_Add(p *radius.Packet, value AscendTSIdleMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 170, a)
}

func AscendTSIdleMode_Get(p *radius.Packet) (value AscendTSIdleMode) {
	value, _ = AscendTSIdleMode_Lookup(p)
	return
}

func AscendTSIdleMode_Gets(p *radius.Packet) (values []AscendTSIdleMode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 170) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTSIdleMode(i))
	}
	return
}

func AscendTSIdleMode_Lookup(p *radius.Packet) (value AscendTSIdleMode, err error) {
	a, ok := _Ascend_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTSIdleMode(i)
	return
}

func AscendTSIdleMode_Set(p *radius.Packet, value AscendTSIdleMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 170, a)
}

func AscendTSIdleMode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 170)
}

type AscendDBAMonitor uint32

const (
	AscendDBAMonitor_Value_DBATransmit     AscendDBAMonitor = 0
	AscendDBAMonitor_Value_DBATransmitRecv AscendDBAMonitor = 1
	AscendDBAMonitor_Value_DBANone         AscendDBAMonitor = 2
)

var AscendDBAMonitor_Strings = map[AscendDBAMonitor]string{
	AscendDBAMonitor_Value_DBATransmit:     "DBA-Transmit",
	AscendDBAMonitor_Value_DBATransmitRecv: "DBA-Transmit-Recv",
	AscendDBAMonitor_Value_DBANone:         "DBA-None",
}

func (a AscendDBAMonitor) String() string {
	if str, ok := AscendDBAMonitor_Strings[a]; ok {
		return str
	}
	return "AscendDBAMonitor(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDBAMonitor_Add(p *radius.Packet, value AscendDBAMonitor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 171, a)
}

func AscendDBAMonitor_Get(p *radius.Packet) (value AscendDBAMonitor) {
	value, _ = AscendDBAMonitor_Lookup(p)
	return
}

func AscendDBAMonitor_Gets(p *radius.Packet) (values []AscendDBAMonitor, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 171) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDBAMonitor(i))
	}
	return
}

func AscendDBAMonitor_Lookup(p *radius.Packet) (value AscendDBAMonitor, err error) {
	a, ok := _Ascend_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDBAMonitor(i)
	return
}

func AscendDBAMonitor_Set(p *radius.Packet, value AscendDBAMonitor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 171, a)
}

func AscendDBAMonitor_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 171)
}

type AscendBaseChannelCount uint32

var AscendBaseChannelCount_Strings = map[AscendBaseChannelCount]string{}

func (a AscendBaseChannelCount) String() string {
	if str, ok := AscendBaseChannelCount_Strings[a]; ok {
		return str
	}
	return "AscendBaseChannelCount(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBaseChannelCount_Add(p *radius.Packet, value AscendBaseChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 172, a)
}

func AscendBaseChannelCount_Get(p *radius.Packet) (value AscendBaseChannelCount) {
	value, _ = AscendBaseChannelCount_Lookup(p)
	return
}

func AscendBaseChannelCount_Gets(p *radius.Packet) (values []AscendBaseChannelCount, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 172) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBaseChannelCount(i))
	}
	return
}

func AscendBaseChannelCount_Lookup(p *radius.Packet) (value AscendBaseChannelCount, err error) {
	a, ok := _Ascend_LookupVendor(p, 172)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBaseChannelCount(i)
	return
}

func AscendBaseChannelCount_Set(p *radius.Packet, value AscendBaseChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 172, a)
}

func AscendBaseChannelCount_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 172)
}

type AscendMinimumChannels uint32

var AscendMinimumChannels_Strings = map[AscendMinimumChannels]string{}

func (a AscendMinimumChannels) String() string {
	if str, ok := AscendMinimumChannels_Strings[a]; ok {
		return str
	}
	return "AscendMinimumChannels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMinimumChannels_Add(p *radius.Packet, value AscendMinimumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 173, a)
}

func AscendMinimumChannels_Get(p *radius.Packet) (value AscendMinimumChannels) {
	value, _ = AscendMinimumChannels_Lookup(p)
	return
}

func AscendMinimumChannels_Gets(p *radius.Packet) (values []AscendMinimumChannels, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 173) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMinimumChannels(i))
	}
	return
}

func AscendMinimumChannels_Lookup(p *radius.Packet) (value AscendMinimumChannels, err error) {
	a, ok := _Ascend_LookupVendor(p, 173)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMinimumChannels(i)
	return
}

func AscendMinimumChannels_Set(p *radius.Packet, value AscendMinimumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 173, a)
}

func AscendMinimumChannels_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 173)
}

func AscendIPXRoute_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 174, a)
}

func AscendIPXRoute_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 174, a)
}

func AscendIPXRoute_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendIPXRoute_Lookup(p)
	return
}

func AscendIPXRoute_GetString(p *radius.Packet) (value string) {
	value, _ = AscendIPXRoute_LookupString(p)
	return
}

func AscendIPXRoute_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 174) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPXRoute_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 174) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPXRoute_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendIPXRoute_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendIPXRoute_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 174, a)
}

func AscendIPXRoute_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 174, a)
}

func AscendIPXRoute_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 174)
}

type AscendFT1Caller uint32

const (
	AscendFT1Caller_Value_FT1No  AscendFT1Caller = 0
	AscendFT1Caller_Value_FT1Yes AscendFT1Caller = 1
)

var AscendFT1Caller_Strings = map[AscendFT1Caller]string{
	AscendFT1Caller_Value_FT1No:  "FT1-No",
	AscendFT1Caller_Value_FT1Yes: "FT1-Yes",
}

func (a AscendFT1Caller) String() string {
	if str, ok := AscendFT1Caller_Strings[a]; ok {
		return str
	}
	return "AscendFT1Caller(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFT1Caller_Add(p *radius.Packet, value AscendFT1Caller) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 175, a)
}

func AscendFT1Caller_Get(p *radius.Packet) (value AscendFT1Caller) {
	value, _ = AscendFT1Caller_Lookup(p)
	return
}

func AscendFT1Caller_Gets(p *radius.Packet) (values []AscendFT1Caller, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 175) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFT1Caller(i))
	}
	return
}

func AscendFT1Caller_Lookup(p *radius.Packet) (value AscendFT1Caller, err error) {
	a, ok := _Ascend_LookupVendor(p, 175)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFT1Caller(i)
	return
}

func AscendFT1Caller_Set(p *radius.Packet, value AscendFT1Caller) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 175, a)
}

func AscendFT1Caller_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 175)
}

func AscendBackup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 176, a)
}

func AscendBackup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 176, a)
}

func AscendBackup_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendBackup_Lookup(p)
	return
}

func AscendBackup_GetString(p *radius.Packet) (value string) {
	value, _ = AscendBackup_LookupString(p)
	return
}

func AscendBackup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 176) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBackup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 176) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBackup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendBackup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendBackup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 176, a)
}

func AscendBackup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 176, a)
}

func AscendBackup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 176)
}

type AscendCallType uint32

const (
	AscendCallType_Value_Switched     AscendCallType = 0
	AscendCallType_Value_Nailed       AscendCallType = 1
	AscendCallType_Value_NailedMpp    AscendCallType = 2
	AscendCallType_Value_PermSwitched AscendCallType = 3
	AscendCallType_Value_AODI         AscendCallType = 6
	AscendCallType_Value_MegaMax      AscendCallType = 7
)

var AscendCallType_Strings = map[AscendCallType]string{
	AscendCallType_Value_Switched:     "Switched",
	AscendCallType_Value_Nailed:       "Nailed",
	AscendCallType_Value_NailedMpp:    "Nailed/Mpp",
	AscendCallType_Value_PermSwitched: "Perm/Switched",
	AscendCallType_Value_AODI:         "AO/DI",
	AscendCallType_Value_MegaMax:      "MegaMax",
}

func (a AscendCallType) String() string {
	if str, ok := AscendCallType_Strings[a]; ok {
		return str
	}
	return "AscendCallType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallType_Add(p *radius.Packet, value AscendCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 177, a)
}

func AscendCallType_Get(p *radius.Packet) (value AscendCallType) {
	value, _ = AscendCallType_Lookup(p)
	return
}

func AscendCallType_Gets(p *radius.Packet) (values []AscendCallType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 177) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallType(i))
	}
	return
}

func AscendCallType_Lookup(p *radius.Packet) (value AscendCallType, err error) {
	a, ok := _Ascend_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallType(i)
	return
}

func AscendCallType_Set(p *radius.Packet, value AscendCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 177, a)
}

func AscendCallType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 177)
}

func AscendGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 178, a)
}

func AscendGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 178, a)
}

func AscendGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendGroup_Lookup(p)
	return
}

func AscendGroup_GetString(p *radius.Packet) (value string) {
	value, _ = AscendGroup_LookupString(p)
	return
}

func AscendGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 178) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 178) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 178, a)
}

func AscendGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 178, a)
}

func AscendGroup_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 178)
}

type AscendFRDLCI uint32

var AscendFRDLCI_Strings = map[AscendFRDLCI]string{}

func (a AscendFRDLCI) String() string {
	if str, ok := AscendFRDLCI_Strings[a]; ok {
		return str
	}
	return "AscendFRDLCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDLCI_Add(p *radius.Packet, value AscendFRDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 179, a)
}

func AscendFRDLCI_Get(p *radius.Packet) (value AscendFRDLCI) {
	value, _ = AscendFRDLCI_Lookup(p)
	return
}

func AscendFRDLCI_Gets(p *radius.Packet) (values []AscendFRDLCI, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 179) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDLCI(i))
	}
	return
}

func AscendFRDLCI_Lookup(p *radius.Packet) (value AscendFRDLCI, err error) {
	a, ok := _Ascend_LookupVendor(p, 179)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDLCI(i)
	return
}

func AscendFRDLCI_Set(p *radius.Packet, value AscendFRDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 179, a)
}

func AscendFRDLCI_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 179)
}

func AscendFRProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 180, a)
}

func AscendFRProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 180, a)
}

func AscendFRProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFRProfileName_Lookup(p)
	return
}

func AscendFRProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFRProfileName_LookupString(p)
	return
}

func AscendFRProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 180) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 180) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFRProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFRProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 180, a)
}

func AscendFRProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 180, a)
}

func AscendFRProfileName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 180)
}

func AscendAraPW_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 181, a)
}

func AscendAraPW_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 181, a)
}

func AscendAraPW_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAraPW_Lookup(p)
	return
}

func AscendAraPW_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAraPW_LookupString(p)
	return
}

func AscendAraPW_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 181) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAraPW_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 181) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAraPW_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAraPW_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAraPW_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 181, a)
}

func AscendAraPW_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 181, a)
}

func AscendAraPW_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 181)
}

func AscendIPXNodeAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 182, a)
}

func AscendIPXNodeAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 182, a)
}

func AscendIPXNodeAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendIPXNodeAddr_Lookup(p)
	return
}

func AscendIPXNodeAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AscendIPXNodeAddr_LookupString(p)
	return
}

func AscendIPXNodeAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPXNodeAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPXNodeAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendIPXNodeAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendIPXNodeAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 182, a)
}

func AscendIPXNodeAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 182, a)
}

func AscendIPXNodeAddr_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 182)
}

func AscendHomeAgentIPAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 183, a)
}

func AscendHomeAgentIPAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendHomeAgentIPAddr_Lookup(p)
	return
}

func AscendHomeAgentIPAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 183) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHomeAgentIPAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendHomeAgentIPAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 183, a)
}

func AscendHomeAgentIPAddr_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 183)
}

func AscendHomeAgentPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 184, a)
}

func AscendHomeAgentPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 184, a)
}

func AscendHomeAgentPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendHomeAgentPassword_Lookup(p)
	return
}

func AscendHomeAgentPassword_GetString(p *radius.Packet) (value string) {
	value, _ = AscendHomeAgentPassword_LookupString(p)
	return
}

func AscendHomeAgentPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 184) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHomeAgentPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 184) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHomeAgentPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendHomeAgentPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendHomeAgentPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 184, a)
}

func AscendHomeAgentPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 184, a)
}

func AscendHomeAgentPassword_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 184)
}

func AscendHomeNetworkName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 185, a)
}

func AscendHomeNetworkName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 185, a)
}

func AscendHomeNetworkName_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendHomeNetworkName_Lookup(p)
	return
}

func AscendHomeNetworkName_GetString(p *radius.Packet) (value string) {
	value, _ = AscendHomeNetworkName_LookupString(p)
	return
}

func AscendHomeNetworkName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 185) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHomeNetworkName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 185) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHomeNetworkName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendHomeNetworkName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendHomeNetworkName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 185, a)
}

func AscendHomeNetworkName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 185, a)
}

func AscendHomeNetworkName_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 185)
}

type AscendHomeAgentUDPPort uint32

var AscendHomeAgentUDPPort_Strings = map[AscendHomeAgentUDPPort]string{}

func (a AscendHomeAgentUDPPort) String() string {
	if str, ok := AscendHomeAgentUDPPort_Strings[a]; ok {
		return str
	}
	return "AscendHomeAgentUDPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendHomeAgentUDPPort_Add(p *radius.Packet, value AscendHomeAgentUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 186, a)
}

func AscendHomeAgentUDPPort_Get(p *radius.Packet) (value AscendHomeAgentUDPPort) {
	value, _ = AscendHomeAgentUDPPort_Lookup(p)
	return
}

func AscendHomeAgentUDPPort_Gets(p *radius.Packet) (values []AscendHomeAgentUDPPort, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 186) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendHomeAgentUDPPort(i))
	}
	return
}

func AscendHomeAgentUDPPort_Lookup(p *radius.Packet) (value AscendHomeAgentUDPPort, err error) {
	a, ok := _Ascend_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendHomeAgentUDPPort(i)
	return
}

func AscendHomeAgentUDPPort_Set(p *radius.Packet, value AscendHomeAgentUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 186, a)
}

func AscendHomeAgentUDPPort_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 186)
}

type AscendMultilinkID uint32

var AscendMultilinkID_Strings = map[AscendMultilinkID]string{}

func (a AscendMultilinkID) String() string {
	if str, ok := AscendMultilinkID_Strings[a]; ok {
		return str
	}
	return "AscendMultilinkID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMultilinkID_Add(p *radius.Packet, value AscendMultilinkID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 187, a)
}

func AscendMultilinkID_Get(p *radius.Packet) (value AscendMultilinkID) {
	value, _ = AscendMultilinkID_Lookup(p)
	return
}

func AscendMultilinkID_Gets(p *radius.Packet) (values []AscendMultilinkID, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 187) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMultilinkID(i))
	}
	return
}

func AscendMultilinkID_Lookup(p *radius.Packet) (value AscendMultilinkID, err error) {
	a, ok := _Ascend_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMultilinkID(i)
	return
}

func AscendMultilinkID_Set(p *radius.Packet, value AscendMultilinkID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 187, a)
}

func AscendMultilinkID_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 187)
}

type AscendNumInMultilink uint32

var AscendNumInMultilink_Strings = map[AscendNumInMultilink]string{}

func (a AscendNumInMultilink) String() string {
	if str, ok := AscendNumInMultilink_Strings[a]; ok {
		return str
	}
	return "AscendNumInMultilink(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendNumInMultilink_Add(p *radius.Packet, value AscendNumInMultilink) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 188, a)
}

func AscendNumInMultilink_Get(p *radius.Packet) (value AscendNumInMultilink) {
	value, _ = AscendNumInMultilink_Lookup(p)
	return
}

func AscendNumInMultilink_Gets(p *radius.Packet) (values []AscendNumInMultilink, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 188) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendNumInMultilink(i))
	}
	return
}

func AscendNumInMultilink_Lookup(p *radius.Packet) (value AscendNumInMultilink, err error) {
	a, ok := _Ascend_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendNumInMultilink(i)
	return
}

func AscendNumInMultilink_Set(p *radius.Packet, value AscendNumInMultilink) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 188, a)
}

func AscendNumInMultilink_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 188)
}

func AscendFirstDest_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 189, a)
}

func AscendFirstDest_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendFirstDest_Lookup(p)
	return
}

func AscendFirstDest_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 189) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFirstDest_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 189)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendFirstDest_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 189, a)
}

func AscendFirstDest_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 189)
}

type AscendPreInputOctets uint32

var AscendPreInputOctets_Strings = map[AscendPreInputOctets]string{}

func (a AscendPreInputOctets) String() string {
	if str, ok := AscendPreInputOctets_Strings[a]; ok {
		return str
	}
	return "AscendPreInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreInputOctets_Add(p *radius.Packet, value AscendPreInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 190, a)
}

func AscendPreInputOctets_Get(p *radius.Packet) (value AscendPreInputOctets) {
	value, _ = AscendPreInputOctets_Lookup(p)
	return
}

func AscendPreInputOctets_Gets(p *radius.Packet) (values []AscendPreInputOctets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 190) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreInputOctets(i))
	}
	return
}

func AscendPreInputOctets_Lookup(p *radius.Packet) (value AscendPreInputOctets, err error) {
	a, ok := _Ascend_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreInputOctets(i)
	return
}

func AscendPreInputOctets_Set(p *radius.Packet, value AscendPreInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 190, a)
}

func AscendPreInputOctets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 190)
}

type AscendPreOutputOctets uint32

var AscendPreOutputOctets_Strings = map[AscendPreOutputOctets]string{}

func (a AscendPreOutputOctets) String() string {
	if str, ok := AscendPreOutputOctets_Strings[a]; ok {
		return str
	}
	return "AscendPreOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreOutputOctets_Add(p *radius.Packet, value AscendPreOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 191, a)
}

func AscendPreOutputOctets_Get(p *radius.Packet) (value AscendPreOutputOctets) {
	value, _ = AscendPreOutputOctets_Lookup(p)
	return
}

func AscendPreOutputOctets_Gets(p *radius.Packet) (values []AscendPreOutputOctets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 191) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreOutputOctets(i))
	}
	return
}

func AscendPreOutputOctets_Lookup(p *radius.Packet) (value AscendPreOutputOctets, err error) {
	a, ok := _Ascend_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreOutputOctets(i)
	return
}

func AscendPreOutputOctets_Set(p *radius.Packet, value AscendPreOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 191, a)
}

func AscendPreOutputOctets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 191)
}

type AscendPreInputPackets uint32

var AscendPreInputPackets_Strings = map[AscendPreInputPackets]string{}

func (a AscendPreInputPackets) String() string {
	if str, ok := AscendPreInputPackets_Strings[a]; ok {
		return str
	}
	return "AscendPreInputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreInputPackets_Add(p *radius.Packet, value AscendPreInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 192, a)
}

func AscendPreInputPackets_Get(p *radius.Packet) (value AscendPreInputPackets) {
	value, _ = AscendPreInputPackets_Lookup(p)
	return
}

func AscendPreInputPackets_Gets(p *radius.Packet) (values []AscendPreInputPackets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreInputPackets(i))
	}
	return
}

func AscendPreInputPackets_Lookup(p *radius.Packet) (value AscendPreInputPackets, err error) {
	a, ok := _Ascend_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreInputPackets(i)
	return
}

func AscendPreInputPackets_Set(p *radius.Packet, value AscendPreInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 192, a)
}

func AscendPreInputPackets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 192)
}

type AscendPreOutputPackets uint32

var AscendPreOutputPackets_Strings = map[AscendPreOutputPackets]string{}

func (a AscendPreOutputPackets) String() string {
	if str, ok := AscendPreOutputPackets_Strings[a]; ok {
		return str
	}
	return "AscendPreOutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreOutputPackets_Add(p *radius.Packet, value AscendPreOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 193, a)
}

func AscendPreOutputPackets_Get(p *radius.Packet) (value AscendPreOutputPackets) {
	value, _ = AscendPreOutputPackets_Lookup(p)
	return
}

func AscendPreOutputPackets_Gets(p *radius.Packet) (values []AscendPreOutputPackets, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 193) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreOutputPackets(i))
	}
	return
}

func AscendPreOutputPackets_Lookup(p *radius.Packet) (value AscendPreOutputPackets, err error) {
	a, ok := _Ascend_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreOutputPackets(i)
	return
}

func AscendPreOutputPackets_Set(p *radius.Packet, value AscendPreOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 193, a)
}

func AscendPreOutputPackets_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 193)
}

type AscendMaximumTime uint32

var AscendMaximumTime_Strings = map[AscendMaximumTime]string{}

func (a AscendMaximumTime) String() string {
	if str, ok := AscendMaximumTime_Strings[a]; ok {
		return str
	}
	return "AscendMaximumTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMaximumTime_Add(p *radius.Packet, value AscendMaximumTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 194, a)
}

func AscendMaximumTime_Get(p *radius.Packet) (value AscendMaximumTime) {
	value, _ = AscendMaximumTime_Lookup(p)
	return
}

func AscendMaximumTime_Gets(p *radius.Packet) (values []AscendMaximumTime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 194) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMaximumTime(i))
	}
	return
}

func AscendMaximumTime_Lookup(p *radius.Packet) (value AscendMaximumTime, err error) {
	a, ok := _Ascend_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMaximumTime(i)
	return
}

func AscendMaximumTime_Set(p *radius.Packet, value AscendMaximumTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 194, a)
}

func AscendMaximumTime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 194)
}

type AscendDisconnectCause uint32

const (
	AscendDisconnectCause_Value_NoReason                   AscendDisconnectCause = 0
	AscendDisconnectCause_Value_NotApplicable              AscendDisconnectCause = 1
	AscendDisconnectCause_Value_Unknown                    AscendDisconnectCause = 2
	AscendDisconnectCause_Value_CallDisconnected           AscendDisconnectCause = 3
	AscendDisconnectCause_Value_CLIDAuthenticationFailed   AscendDisconnectCause = 4
	AscendDisconnectCause_Value_CLIDRADIUSTimeout          AscendDisconnectCause = 5
	AscendDisconnectCause_Value_ModemNoDCD                 AscendDisconnectCause = 10
	AscendDisconnectCause_Value_DCDDetectedThenInactive    AscendDisconnectCause = 11
	AscendDisconnectCause_Value_ModemInvalidResultCodes    AscendDisconnectCause = 12
	AscendDisconnectCause_Value_TermSrvUserQuit            AscendDisconnectCause = 20
	AscendDisconnectCause_Value_TermSrvIdleTimeout         AscendDisconnectCause = 21
	AscendDisconnectCause_Value_TermSrvExitTelnet          AscendDisconnectCause = 22
	AscendDisconnectCause_Value_TermSrvNoIPaddr            AscendDisconnectCause = 23
	AscendDisconnectCause_Value_TermSrvExitRawTCP          AscendDisconnectCause = 24
	AscendDisconnectCause_Value_TermSrvExitLoginFailed     AscendDisconnectCause = 25
	AscendDisconnectCause_Value_TermSrvExitRawTCPDisabled  AscendDisconnectCause = 26
	AscendDisconnectCause_Value_TermSrvCTRLCInLogin        AscendDisconnectCause = 27
	AscendDisconnectCause_Value_TermSrvDestroyed           AscendDisconnectCause = 28
	AscendDisconnectCause_Value_TermSrvUserClosedVCon      AscendDisconnectCause = 29
	AscendDisconnectCause_Value_TermSrvVConDestroyed       AscendDisconnectCause = 30
	AscendDisconnectCause_Value_TermSrvExitRlogin          AscendDisconnectCause = 31
	AscendDisconnectCause_Value_TermSrvBadRloginOption     AscendDisconnectCause = 32
	AscendDisconnectCause_Value_TermSrvNotEnoughResources  AscendDisconnectCause = 33
	AscendDisconnectCause_Value_MPPNoNULLMsgTimeout        AscendDisconnectCause = 35
	AscendDisconnectCause_Value_PPPLCPTimeout              AscendDisconnectCause = 40
	AscendDisconnectCause_Value_PPPLCPNegotionFailed       AscendDisconnectCause = 41
	AscendDisconnectCause_Value_PPPPAPAuthFailed           AscendDisconnectCause = 42
	AscendDisconnectCause_Value_PPPCHAPAuthFailed          AscendDisconnectCause = 43
	AscendDisconnectCause_Value_PPPRmtAuthFailed           AscendDisconnectCause = 44
	AscendDisconnectCause_Value_PPPRcvTerminateReq         AscendDisconnectCause = 45
	AscendDisconnectCause_Value_PPPRcvCloseEvent           AscendDisconnectCause = 46
	AscendDisconnectCause_Value_PPPNoNCPsOpen              AscendDisconnectCause = 47
	AscendDisconnectCause_Value_PPPMPBundleUnknown         AscendDisconnectCause = 48
	AscendDisconnectCause_Value_PPPLCPCloseMPAddFail       AscendDisconnectCause = 49
	AscendDisconnectCause_Value_SessionTableFull           AscendDisconnectCause = 50
	AscendDisconnectCause_Value_OutOfResources             AscendDisconnectCause = 51
	AscendDisconnectCause_Value_InvalidIPAddress           AscendDisconnectCause = 52
	AscendDisconnectCause_Value_HostnameResolutionFailed   AscendDisconnectCause = 53
	AscendDisconnectCause_Value_BadOrMissingPortNumber     AscendDisconnectCause = 54
	AscendDisconnectCause_Value_HostReset                  AscendDisconnectCause = 60
	AscendDisconnectCause_Value_ConnectionRefused          AscendDisconnectCause = 61
	AscendDisconnectCause_Value_ConnectionTimeout          AscendDisconnectCause = 62
	AscendDisconnectCause_Value_ConnectionClosed           AscendDisconnectCause = 63
	AscendDisconnectCause_Value_NetworkUnreachable         AscendDisconnectCause = 64
	AscendDisconnectCause_Value_HostUnreachable            AscendDisconnectCause = 65
	AscendDisconnectCause_Value_NetworkUnreachableAdmin    AscendDisconnectCause = 66
	AscendDisconnectCause_Value_HostUnreachableAdmin       AscendDisconnectCause = 67
	AscendDisconnectCause_Value_PortUnreachable            AscendDisconnectCause = 68
	AscendDisconnectCause_Value_SessionTimeout             AscendDisconnectCause = 100
	AscendDisconnectCause_Value_InvalidIncomingUser        AscendDisconnectCause = 101
	AscendDisconnectCause_Value_DisconnectDueToCallback    AscendDisconnectCause = 102
	AscendDisconnectCause_Value_ProtoDisabledOrUnsupported AscendDisconnectCause = 120
	AscendDisconnectCause_Value_DisconnectReqByRADIUS      AscendDisconnectCause = 150
	AscendDisconnectCause_Value_DisconnectReqByLocalAdmin  AscendDisconnectCause = 151
	AscendDisconnectCause_Value_V110TimeoutSyncRetryExceed AscendDisconnectCause = 160
	AscendDisconnectCause_Value_PPPAuthTimeoutExceeded     AscendDisconnectCause = 170
	AscendDisconnectCause_Value_UserExecutedDoHangup       AscendDisconnectCause = 180
	AscendDisconnectCause_Value_RemoteEndHungUp            AscendDisconnectCause = 185
	AscendDisconnectCause_Value_ResourceHasBeenQuiesced    AscendDisconnectCause = 190
	AscendDisconnectCause_Value_MaxCallDurationReached     AscendDisconnectCause = 195
)

var AscendDisconnectCause_Strings = map[AscendDisconnectCause]string{
	AscendDisconnectCause_Value_NoReason:                   "No-Reason",
	AscendDisconnectCause_Value_NotApplicable:              "Not-Applicable",
	AscendDisconnectCause_Value_Unknown:                    "Unknown",
	AscendDisconnectCause_Value_CallDisconnected:           "Call-Disconnected",
	AscendDisconnectCause_Value_CLIDAuthenticationFailed:   "CLID-Authentication-Failed",
	AscendDisconnectCause_Value_CLIDRADIUSTimeout:          "CLID-RADIUS-Timeout",
	AscendDisconnectCause_Value_ModemNoDCD:                 "Modem-No-DCD",
	AscendDisconnectCause_Value_DCDDetectedThenInactive:    "DCD-Detected-Then-Inactive",
	AscendDisconnectCause_Value_ModemInvalidResultCodes:    "Modem-Invalid-Result-Codes",
	AscendDisconnectCause_Value_TermSrvUserQuit:            "TermSrv-User-Quit",
	AscendDisconnectCause_Value_TermSrvIdleTimeout:         "TermSrv-Idle-Timeout",
	AscendDisconnectCause_Value_TermSrvExitTelnet:          "TermSrv-Exit-Telnet",
	AscendDisconnectCause_Value_TermSrvNoIPaddr:            "TermSrv-No-IPaddr",
	AscendDisconnectCause_Value_TermSrvExitRawTCP:          "TermSrv-Exit-Raw-TCP",
	AscendDisconnectCause_Value_TermSrvExitLoginFailed:     "TermSrv-Exit-Login-Failed",
	AscendDisconnectCause_Value_TermSrvExitRawTCPDisabled:  "TermSrv-Exit-Raw-TCP-Disabled",
	AscendDisconnectCause_Value_TermSrvCTRLCInLogin:        "TermSrv-CTRL-C-In-Login",
	AscendDisconnectCause_Value_TermSrvDestroyed:           "TermSrv-Destroyed",
	AscendDisconnectCause_Value_TermSrvUserClosedVCon:      "TermSrv-User-Closed-VCon",
	AscendDisconnectCause_Value_TermSrvVConDestroyed:       "TermSrv-VCon-Destroyed",
	AscendDisconnectCause_Value_TermSrvExitRlogin:          "TermSrv-Exit-Rlogin",
	AscendDisconnectCause_Value_TermSrvBadRloginOption:     "TermSrv-Bad-Rlogin-Option",
	AscendDisconnectCause_Value_TermSrvNotEnoughResources:  "TermSrv-Not-Enough-Resources",
	AscendDisconnectCause_Value_MPPNoNULLMsgTimeout:        "MPP-No-NULL-Msg-Timeout",
	AscendDisconnectCause_Value_PPPLCPTimeout:              "PPP-LCP-Timeout",
	AscendDisconnectCause_Value_PPPLCPNegotionFailed:       "PPP-LCP-Negotion-Failed",
	AscendDisconnectCause_Value_PPPPAPAuthFailed:           "PPP-PAP-Auth-Failed",
	AscendDisconnectCause_Value_PPPCHAPAuthFailed:          "PPP-CHAP-Auth-Failed",
	AscendDisconnectCause_Value_PPPRmtAuthFailed:           "PPP-Rmt-Auth-Failed",
	AscendDisconnectCause_Value_PPPRcvTerminateReq:         "PPP-Rcv-Terminate-Req",
	AscendDisconnectCause_Value_PPPRcvCloseEvent:           "PPP-Rcv-Close-Event",
	AscendDisconnectCause_Value_PPPNoNCPsOpen:              "PPP-No-NCPs-Open",
	AscendDisconnectCause_Value_PPPMPBundleUnknown:         "PPP-MP-Bundle-Unknown",
	AscendDisconnectCause_Value_PPPLCPCloseMPAddFail:       "PPP-LCP-Close-MP-Add-Fail",
	AscendDisconnectCause_Value_SessionTableFull:           "Session-Table-Full",
	AscendDisconnectCause_Value_OutOfResources:             "Out-Of-Resources",
	AscendDisconnectCause_Value_InvalidIPAddress:           "Invalid-IP-Address",
	AscendDisconnectCause_Value_HostnameResolutionFailed:   "Hostname-Resolution-Failed",
	AscendDisconnectCause_Value_BadOrMissingPortNumber:     "Bad-Or-Missing-Port-Number",
	AscendDisconnectCause_Value_HostReset:                  "Host-Reset",
	AscendDisconnectCause_Value_ConnectionRefused:          "Connection-Refused",
	AscendDisconnectCause_Value_ConnectionTimeout:          "Connection-Timeout",
	AscendDisconnectCause_Value_ConnectionClosed:           "Connection-Closed",
	AscendDisconnectCause_Value_NetworkUnreachable:         "Network-Unreachable",
	AscendDisconnectCause_Value_HostUnreachable:            "Host-Unreachable",
	AscendDisconnectCause_Value_NetworkUnreachableAdmin:    "Network-Unreachable-Admin",
	AscendDisconnectCause_Value_HostUnreachableAdmin:       "Host-Unreachable-Admin",
	AscendDisconnectCause_Value_PortUnreachable:            "Port-Unreachable",
	AscendDisconnectCause_Value_SessionTimeout:             "Session-Timeout",
	AscendDisconnectCause_Value_InvalidIncomingUser:        "Invalid-Incoming-User",
	AscendDisconnectCause_Value_DisconnectDueToCallback:    "Disconnect-Due-To-Callback",
	AscendDisconnectCause_Value_ProtoDisabledOrUnsupported: "Proto-Disabled-Or-Unsupported",
	AscendDisconnectCause_Value_DisconnectReqByRADIUS:      "Disconnect-Req-By-RADIUS",
	AscendDisconnectCause_Value_DisconnectReqByLocalAdmin:  "Disconnect-Req-By-Local-Admin",
	AscendDisconnectCause_Value_V110TimeoutSyncRetryExceed: "V110-Timeout-Sync-Retry-Exceed",
	AscendDisconnectCause_Value_PPPAuthTimeoutExceeded:     "PPP-Auth-Timeout-Exceeded",
	AscendDisconnectCause_Value_UserExecutedDoHangup:       "User-Executed-Do-Hangup",
	AscendDisconnectCause_Value_RemoteEndHungUp:            "Remote-End-Hung-Up",
	AscendDisconnectCause_Value_ResourceHasBeenQuiesced:    "Resource-Has-Been-Quiesced",
	AscendDisconnectCause_Value_MaxCallDurationReached:     "Max-Call-Duration-Reached",
}

func (a AscendDisconnectCause) String() string {
	if str, ok := AscendDisconnectCause_Strings[a]; ok {
		return str
	}
	return "AscendDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDisconnectCause_Add(p *radius.Packet, value AscendDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 195, a)
}

func AscendDisconnectCause_Get(p *radius.Packet) (value AscendDisconnectCause) {
	value, _ = AscendDisconnectCause_Lookup(p)
	return
}

func AscendDisconnectCause_Gets(p *radius.Packet) (values []AscendDisconnectCause, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 195) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDisconnectCause(i))
	}
	return
}

func AscendDisconnectCause_Lookup(p *radius.Packet) (value AscendDisconnectCause, err error) {
	a, ok := _Ascend_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDisconnectCause(i)
	return
}

func AscendDisconnectCause_Set(p *radius.Packet, value AscendDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 195, a)
}

func AscendDisconnectCause_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 195)
}

type AscendConnectProgress uint32

const (
	AscendConnectProgress_Value_NoProgress             AscendConnectProgress = 0
	AscendConnectProgress_Value_CallUp                 AscendConnectProgress = 10
	AscendConnectProgress_Value_ModemUp                AscendConnectProgress = 30
	AscendConnectProgress_Value_ModemAwaitingDCD       AscendConnectProgress = 31
	AscendConnectProgress_Value_ModemAwaitingCodes     AscendConnectProgress = 32
	AscendConnectProgress_Value_TermSrvStarted         AscendConnectProgress = 40
	AscendConnectProgress_Value_TermSrvRawTCPStarted   AscendConnectProgress = 41
	AscendConnectProgress_Value_TermSrvTelnetStarted   AscendConnectProgress = 42
	AscendConnectProgress_Value_TermSrvRawTCPConnected AscendConnectProgress = 43
	AscendConnectProgress_Value_TermSrvTelnetConnected AscendConnectProgress = 44
	AscendConnectProgress_Value_TermSrvRloginStarted   AscendConnectProgress = 45
	AscendConnectProgress_Value_TermSrvRloginConnected AscendConnectProgress = 46
	AscendConnectProgress_Value_ModemOutdialCallUp     AscendConnectProgress = 50
	AscendConnectProgress_Value_LANSessionUp           AscendConnectProgress = 60
	AscendConnectProgress_Value_LCPOpening             AscendConnectProgress = 61
	AscendConnectProgress_Value_CCPOpening             AscendConnectProgress = 62
	AscendConnectProgress_Value_IPNCPOpening           AscendConnectProgress = 63
	AscendConnectProgress_Value_BNCPOpening            AscendConnectProgress = 64
	AscendConnectProgress_Value_LCPOpened              AscendConnectProgress = 65
	AscendConnectProgress_Value_CCPOpened              AscendConnectProgress = 66
	AscendConnectProgress_Value_IPNCPOpened            AscendConnectProgress = 67
	AscendConnectProgress_Value_BNCPOpened             AscendConnectProgress = 68
	AscendConnectProgress_Value_LCPStateInitial        AscendConnectProgress = 69
	AscendConnectProgress_Value_LCPStateStarting       AscendConnectProgress = 70
	AscendConnectProgress_Value_LCPStateClosed         AscendConnectProgress = 71
	AscendConnectProgress_Value_LCPStateStopped        AscendConnectProgress = 72
	AscendConnectProgress_Value_LCPStateClosing        AscendConnectProgress = 73
	AscendConnectProgress_Value_LCPStateStopping       AscendConnectProgress = 74
	AscendConnectProgress_Value_LCPStateRequestSent    AscendConnectProgress = 75
	AscendConnectProgress_Value_LCPStateAckReceived    AscendConnectProgress = 76
	AscendConnectProgress_Value_LCPStateAckSent        AscendConnectProgress = 77
	AscendConnectProgress_Value_IPXNCPOpened           AscendConnectProgress = 80
	AscendConnectProgress_Value_ATNCPOpened            AscendConnectProgress = 81
	AscendConnectProgress_Value_BACPOpening            AscendConnectProgress = 82
	AscendConnectProgress_Value_BACPOpened             AscendConnectProgress = 83
	AscendConnectProgress_Value_V110Up                 AscendConnectProgress = 90
	AscendConnectProgress_Value_V110StateOpened        AscendConnectProgress = 91
	AscendConnectProgress_Value_V110StateCarrier       AscendConnectProgress = 92
	AscendConnectProgress_Value_V110StateReset         AscendConnectProgress = 93
	AscendConnectProgress_Value_V110StateClosed        AscendConnectProgress = 94
)

var AscendConnectProgress_Strings = map[AscendConnectProgress]string{
	AscendConnectProgress_Value_NoProgress:             "No-Progress",
	AscendConnectProgress_Value_CallUp:                 "Call-Up",
	AscendConnectProgress_Value_ModemUp:                "Modem-Up",
	AscendConnectProgress_Value_ModemAwaitingDCD:       "Modem-Awaiting-DCD",
	AscendConnectProgress_Value_ModemAwaitingCodes:     "Modem-Awaiting-Codes",
	AscendConnectProgress_Value_TermSrvStarted:         "TermSrv-Started",
	AscendConnectProgress_Value_TermSrvRawTCPStarted:   "TermSrv-Raw-TCP-Started",
	AscendConnectProgress_Value_TermSrvTelnetStarted:   "TermSrv-Telnet-Started",
	AscendConnectProgress_Value_TermSrvRawTCPConnected: "TermSrv-Raw-TCP-Connected",
	AscendConnectProgress_Value_TermSrvTelnetConnected: "TermSrv-Telnet-Connected",
	AscendConnectProgress_Value_TermSrvRloginStarted:   "TermSrv-Rlogin-Started",
	AscendConnectProgress_Value_TermSrvRloginConnected: "TermSrv-Rlogin-Connected",
	AscendConnectProgress_Value_ModemOutdialCallUp:     "Modem-Outdial-Call-Up",
	AscendConnectProgress_Value_LANSessionUp:           "LAN-Session-Up",
	AscendConnectProgress_Value_LCPOpening:             "LCP-Opening",
	AscendConnectProgress_Value_CCPOpening:             "CCP-Opening",
	AscendConnectProgress_Value_IPNCPOpening:           "IPNCP-Opening",
	AscendConnectProgress_Value_BNCPOpening:            "BNCP-Opening",
	AscendConnectProgress_Value_LCPOpened:              "LCP-Opened",
	AscendConnectProgress_Value_CCPOpened:              "CCP-Opened",
	AscendConnectProgress_Value_IPNCPOpened:            "IPNCP-Opened",
	AscendConnectProgress_Value_BNCPOpened:             "BNCP-Opened",
	AscendConnectProgress_Value_LCPStateInitial:        "LCP-State-Initial",
	AscendConnectProgress_Value_LCPStateStarting:       "LCP-State-Starting",
	AscendConnectProgress_Value_LCPStateClosed:         "LCP-State-Closed",
	AscendConnectProgress_Value_LCPStateStopped:        "LCP-State-Stopped",
	AscendConnectProgress_Value_LCPStateClosing:        "LCP-State-Closing",
	AscendConnectProgress_Value_LCPStateStopping:       "LCP-State-Stopping",
	AscendConnectProgress_Value_LCPStateRequestSent:    "LCP-State-Request-Sent",
	AscendConnectProgress_Value_LCPStateAckReceived:    "LCP-State-Ack-Received",
	AscendConnectProgress_Value_LCPStateAckSent:        "LCP-State-Ack-Sent",
	AscendConnectProgress_Value_IPXNCPOpened:           "IPXNCP-Opened",
	AscendConnectProgress_Value_ATNCPOpened:            "ATNCP-Opened",
	AscendConnectProgress_Value_BACPOpening:            "BACP-Opening",
	AscendConnectProgress_Value_BACPOpened:             "BACP-Opened",
	AscendConnectProgress_Value_V110Up:                 "V110-Up",
	AscendConnectProgress_Value_V110StateOpened:        "V110-State-Opened",
	AscendConnectProgress_Value_V110StateCarrier:       "V110-State-Carrier",
	AscendConnectProgress_Value_V110StateReset:         "V110-State-Reset",
	AscendConnectProgress_Value_V110StateClosed:        "V110-State-Closed",
}

func (a AscendConnectProgress) String() string {
	if str, ok := AscendConnectProgress_Strings[a]; ok {
		return str
	}
	return "AscendConnectProgress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendConnectProgress_Add(p *radius.Packet, value AscendConnectProgress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 196, a)
}

func AscendConnectProgress_Get(p *radius.Packet) (value AscendConnectProgress) {
	value, _ = AscendConnectProgress_Lookup(p)
	return
}

func AscendConnectProgress_Gets(p *radius.Packet) (values []AscendConnectProgress, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 196) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendConnectProgress(i))
	}
	return
}

func AscendConnectProgress_Lookup(p *radius.Packet) (value AscendConnectProgress, err error) {
	a, ok := _Ascend_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendConnectProgress(i)
	return
}

func AscendConnectProgress_Set(p *radius.Packet, value AscendConnectProgress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 196, a)
}

func AscendConnectProgress_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 196)
}

type AscendDataRate uint32

var AscendDataRate_Strings = map[AscendDataRate]string{}

func (a AscendDataRate) String() string {
	if str, ok := AscendDataRate_Strings[a]; ok {
		return str
	}
	return "AscendDataRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDataRate_Add(p *radius.Packet, value AscendDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 197, a)
}

func AscendDataRate_Get(p *radius.Packet) (value AscendDataRate) {
	value, _ = AscendDataRate_Lookup(p)
	return
}

func AscendDataRate_Gets(p *radius.Packet) (values []AscendDataRate, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 197) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDataRate(i))
	}
	return
}

func AscendDataRate_Lookup(p *radius.Packet) (value AscendDataRate, err error) {
	a, ok := _Ascend_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDataRate(i)
	return
}

func AscendDataRate_Set(p *radius.Packet, value AscendDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 197, a)
}

func AscendDataRate_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 197)
}

type AscendPreSessionTime uint32

var AscendPreSessionTime_Strings = map[AscendPreSessionTime]string{}

func (a AscendPreSessionTime) String() string {
	if str, ok := AscendPreSessionTime_Strings[a]; ok {
		return str
	}
	return "AscendPreSessionTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreSessionTime_Add(p *radius.Packet, value AscendPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 198, a)
}

func AscendPreSessionTime_Get(p *radius.Packet) (value AscendPreSessionTime) {
	value, _ = AscendPreSessionTime_Lookup(p)
	return
}

func AscendPreSessionTime_Gets(p *radius.Packet) (values []AscendPreSessionTime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 198) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreSessionTime(i))
	}
	return
}

func AscendPreSessionTime_Lookup(p *radius.Packet) (value AscendPreSessionTime, err error) {
	a, ok := _Ascend_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreSessionTime(i)
	return
}

func AscendPreSessionTime_Set(p *radius.Packet, value AscendPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 198, a)
}

func AscendPreSessionTime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 198)
}

type AscendTokenIdle uint32

var AscendTokenIdle_Strings = map[AscendTokenIdle]string{}

func (a AscendTokenIdle) String() string {
	if str, ok := AscendTokenIdle_Strings[a]; ok {
		return str
	}
	return "AscendTokenIdle(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTokenIdle_Add(p *radius.Packet, value AscendTokenIdle) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 199, a)
}

func AscendTokenIdle_Get(p *radius.Packet) (value AscendTokenIdle) {
	value, _ = AscendTokenIdle_Lookup(p)
	return
}

func AscendTokenIdle_Gets(p *radius.Packet) (values []AscendTokenIdle, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 199) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTokenIdle(i))
	}
	return
}

func AscendTokenIdle_Lookup(p *radius.Packet) (value AscendTokenIdle, err error) {
	a, ok := _Ascend_LookupVendor(p, 199)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTokenIdle(i)
	return
}

func AscendTokenIdle_Set(p *radius.Packet, value AscendTokenIdle) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 199, a)
}

func AscendTokenIdle_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 199)
}

type AscendTokenImmediate uint32

const (
	AscendTokenImmediate_Value_TokImmNo  AscendTokenImmediate = 0
	AscendTokenImmediate_Value_TokImmYes AscendTokenImmediate = 1
)

var AscendTokenImmediate_Strings = map[AscendTokenImmediate]string{
	AscendTokenImmediate_Value_TokImmNo:  "Tok-Imm-No",
	AscendTokenImmediate_Value_TokImmYes: "Tok-Imm-Yes",
}

func (a AscendTokenImmediate) String() string {
	if str, ok := AscendTokenImmediate_Strings[a]; ok {
		return str
	}
	return "AscendTokenImmediate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTokenImmediate_Add(p *radius.Packet, value AscendTokenImmediate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 200, a)
}

func AscendTokenImmediate_Get(p *radius.Packet) (value AscendTokenImmediate) {
	value, _ = AscendTokenImmediate_Lookup(p)
	return
}

func AscendTokenImmediate_Gets(p *radius.Packet) (values []AscendTokenImmediate, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 200) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTokenImmediate(i))
	}
	return
}

func AscendTokenImmediate_Lookup(p *radius.Packet) (value AscendTokenImmediate, err error) {
	a, ok := _Ascend_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTokenImmediate(i)
	return
}

func AscendTokenImmediate_Set(p *radius.Packet, value AscendTokenImmediate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 200, a)
}

func AscendTokenImmediate_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 200)
}

type AscendRequireAuth uint32

const (
	AscendRequireAuth_Value_NotRequireAuth AscendRequireAuth = 0
	AscendRequireAuth_Value_RequireAuth    AscendRequireAuth = 1
)

var AscendRequireAuth_Strings = map[AscendRequireAuth]string{
	AscendRequireAuth_Value_NotRequireAuth: "Not-Require-Auth",
	AscendRequireAuth_Value_RequireAuth:    "Require-Auth",
}

func (a AscendRequireAuth) String() string {
	if str, ok := AscendRequireAuth_Strings[a]; ok {
		return str
	}
	return "AscendRequireAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendRequireAuth_Add(p *radius.Packet, value AscendRequireAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 201, a)
}

func AscendRequireAuth_Get(p *radius.Packet) (value AscendRequireAuth) {
	value, _ = AscendRequireAuth_Lookup(p)
	return
}

func AscendRequireAuth_Gets(p *radius.Packet) (values []AscendRequireAuth, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendRequireAuth(i))
	}
	return
}

func AscendRequireAuth_Lookup(p *radius.Packet) (value AscendRequireAuth, err error) {
	a, ok := _Ascend_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendRequireAuth(i)
	return
}

func AscendRequireAuth_Set(p *radius.Packet, value AscendRequireAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 201, a)
}

func AscendRequireAuth_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 201)
}

func AscendNumberSessions_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 202, a)
}

func AscendNumberSessions_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 202, a)
}

func AscendNumberSessions_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendNumberSessions_Lookup(p)
	return
}

func AscendNumberSessions_GetString(p *radius.Packet) (value string) {
	value, _ = AscendNumberSessions_LookupString(p)
	return
}

func AscendNumberSessions_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 202) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendNumberSessions_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 202) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendNumberSessions_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendNumberSessions_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendNumberSessions_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 202, a)
}

func AscendNumberSessions_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 202, a)
}

func AscendNumberSessions_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 202)
}

func AscendAuthenAlias_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 203, a)
}

func AscendAuthenAlias_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 203, a)
}

func AscendAuthenAlias_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendAuthenAlias_Lookup(p)
	return
}

func AscendAuthenAlias_GetString(p *radius.Packet) (value string) {
	value, _ = AscendAuthenAlias_LookupString(p)
	return
}

func AscendAuthenAlias_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 203) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAuthenAlias_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 203) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendAuthenAlias_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendAuthenAlias_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendAuthenAlias_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 203, a)
}

func AscendAuthenAlias_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 203, a)
}

func AscendAuthenAlias_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 203)
}

type AscendTokenExpiry uint32

var AscendTokenExpiry_Strings = map[AscendTokenExpiry]string{}

func (a AscendTokenExpiry) String() string {
	if str, ok := AscendTokenExpiry_Strings[a]; ok {
		return str
	}
	return "AscendTokenExpiry(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTokenExpiry_Add(p *radius.Packet, value AscendTokenExpiry) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 204, a)
}

func AscendTokenExpiry_Get(p *radius.Packet) (value AscendTokenExpiry) {
	value, _ = AscendTokenExpiry_Lookup(p)
	return
}

func AscendTokenExpiry_Gets(p *radius.Packet) (values []AscendTokenExpiry, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 204) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTokenExpiry(i))
	}
	return
}

func AscendTokenExpiry_Lookup(p *radius.Packet) (value AscendTokenExpiry, err error) {
	a, ok := _Ascend_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTokenExpiry(i)
	return
}

func AscendTokenExpiry_Set(p *radius.Packet, value AscendTokenExpiry) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 204, a)
}

func AscendTokenExpiry_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 204)
}

func AscendMenuSelector_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 205, a)
}

func AscendMenuSelector_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 205, a)
}

func AscendMenuSelector_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendMenuSelector_Lookup(p)
	return
}

func AscendMenuSelector_GetString(p *radius.Packet) (value string) {
	value, _ = AscendMenuSelector_LookupString(p)
	return
}

func AscendMenuSelector_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendMenuSelector_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendMenuSelector_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendMenuSelector_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendMenuSelector_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 205, a)
}

func AscendMenuSelector_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 205, a)
}

func AscendMenuSelector_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 205)
}

func AscendMenuItem_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 206, a)
}

func AscendMenuItem_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 206, a)
}

func AscendMenuItem_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendMenuItem_Lookup(p)
	return
}

func AscendMenuItem_GetString(p *radius.Packet) (value string) {
	value, _ = AscendMenuItem_LookupString(p)
	return
}

func AscendMenuItem_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 206) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendMenuItem_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 206) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendMenuItem_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendMenuItem_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendMenuItem_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 206, a)
}

func AscendMenuItem_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 206, a)
}

func AscendMenuItem_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 206)
}

type AscendPWWarntime uint32

const (
	AscendPWWarntime_Value_DaysOfWarning AscendPWWarntime = 0
)

var AscendPWWarntime_Strings = map[AscendPWWarntime]string{
	AscendPWWarntime_Value_DaysOfWarning: "Days-Of-Warning",
}

func (a AscendPWWarntime) String() string {
	if str, ok := AscendPWWarntime_Strings[a]; ok {
		return str
	}
	return "AscendPWWarntime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPWWarntime_Add(p *radius.Packet, value AscendPWWarntime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 207, a)
}

func AscendPWWarntime_Get(p *radius.Packet) (value AscendPWWarntime) {
	value, _ = AscendPWWarntime_Lookup(p)
	return
}

func AscendPWWarntime_Gets(p *radius.Packet) (values []AscendPWWarntime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 207) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPWWarntime(i))
	}
	return
}

func AscendPWWarntime_Lookup(p *radius.Packet) (value AscendPWWarntime, err error) {
	a, ok := _Ascend_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPWWarntime(i)
	return
}

func AscendPWWarntime_Set(p *radius.Packet, value AscendPWWarntime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 207, a)
}

func AscendPWWarntime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 207)
}

type AscendPWLifetime uint32

const (
	AscendPWLifetime_Value_LifetimeInDays AscendPWLifetime = 0
)

var AscendPWLifetime_Strings = map[AscendPWLifetime]string{
	AscendPWLifetime_Value_LifetimeInDays: "Lifetime-In-Days",
}

func (a AscendPWLifetime) String() string {
	if str, ok := AscendPWLifetime_Strings[a]; ok {
		return str
	}
	return "AscendPWLifetime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPWLifetime_Add(p *radius.Packet, value AscendPWLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 208, a)
}

func AscendPWLifetime_Get(p *radius.Packet) (value AscendPWLifetime) {
	value, _ = AscendPWLifetime_Lookup(p)
	return
}

func AscendPWLifetime_Gets(p *radius.Packet) (values []AscendPWLifetime, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 208) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPWLifetime(i))
	}
	return
}

func AscendPWLifetime_Lookup(p *radius.Packet) (value AscendPWLifetime, err error) {
	a, ok := _Ascend_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPWLifetime(i)
	return
}

func AscendPWLifetime_Set(p *radius.Packet, value AscendPWLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 208, a)
}

func AscendPWLifetime_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 208)
}

func AscendIPDirect_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 209, a)
}

func AscendIPDirect_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendIPDirect_Lookup(p)
	return
}

func AscendIPDirect_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 209) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPDirect_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 209)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendIPDirect_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 209, a)
}

func AscendIPDirect_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 209)
}

type AscendPPPVJSlotComp uint32

const (
	AscendPPPVJSlotComp_Value_VJSlotCompNo AscendPPPVJSlotComp = 1
)

var AscendPPPVJSlotComp_Strings = map[AscendPPPVJSlotComp]string{
	AscendPPPVJSlotComp_Value_VJSlotCompNo: "VJ-Slot-Comp-No",
}

func (a AscendPPPVJSlotComp) String() string {
	if str, ok := AscendPPPVJSlotComp_Strings[a]; ok {
		return str
	}
	return "AscendPPPVJSlotComp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPPPVJSlotComp_Add(p *radius.Packet, value AscendPPPVJSlotComp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 210, a)
}

func AscendPPPVJSlotComp_Get(p *radius.Packet) (value AscendPPPVJSlotComp) {
	value, _ = AscendPPPVJSlotComp_Lookup(p)
	return
}

func AscendPPPVJSlotComp_Gets(p *radius.Packet) (values []AscendPPPVJSlotComp, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 210) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPPPVJSlotComp(i))
	}
	return
}

func AscendPPPVJSlotComp_Lookup(p *radius.Packet) (value AscendPPPVJSlotComp, err error) {
	a, ok := _Ascend_LookupVendor(p, 210)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPPPVJSlotComp(i)
	return
}

func AscendPPPVJSlotComp_Set(p *radius.Packet, value AscendPPPVJSlotComp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 210, a)
}

func AscendPPPVJSlotComp_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 210)
}

type AscendPPPVJ1172 uint32

const (
	AscendPPPVJ1172_Value_PPPVJ1172 AscendPPPVJ1172 = 1
)

var AscendPPPVJ1172_Strings = map[AscendPPPVJ1172]string{
	AscendPPPVJ1172_Value_PPPVJ1172: "PPP-VJ-1172",
}

func (a AscendPPPVJ1172) String() string {
	if str, ok := AscendPPPVJ1172_Strings[a]; ok {
		return str
	}
	return "AscendPPPVJ1172(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPPPVJ1172_Add(p *radius.Packet, value AscendPPPVJ1172) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 211, a)
}

func AscendPPPVJ1172_Get(p *radius.Packet) (value AscendPPPVJ1172) {
	value, _ = AscendPPPVJ1172_Lookup(p)
	return
}

func AscendPPPVJ1172_Gets(p *radius.Packet) (values []AscendPPPVJ1172, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 211) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPPPVJ1172(i))
	}
	return
}

func AscendPPPVJ1172_Lookup(p *radius.Packet) (value AscendPPPVJ1172, err error) {
	a, ok := _Ascend_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPPPVJ1172(i)
	return
}

func AscendPPPVJ1172_Set(p *radius.Packet, value AscendPPPVJ1172) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 211, a)
}

func AscendPPPVJ1172_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 211)
}

type AscendPPPAsyncMap uint32

var AscendPPPAsyncMap_Strings = map[AscendPPPAsyncMap]string{}

func (a AscendPPPAsyncMap) String() string {
	if str, ok := AscendPPPAsyncMap_Strings[a]; ok {
		return str
	}
	return "AscendPPPAsyncMap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPPPAsyncMap_Add(p *radius.Packet, value AscendPPPAsyncMap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 212, a)
}

func AscendPPPAsyncMap_Get(p *radius.Packet) (value AscendPPPAsyncMap) {
	value, _ = AscendPPPAsyncMap_Lookup(p)
	return
}

func AscendPPPAsyncMap_Gets(p *radius.Packet) (values []AscendPPPAsyncMap, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 212) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPPPAsyncMap(i))
	}
	return
}

func AscendPPPAsyncMap_Lookup(p *radius.Packet) (value AscendPPPAsyncMap, err error) {
	a, ok := _Ascend_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPPPAsyncMap(i)
	return
}

func AscendPPPAsyncMap_Set(p *radius.Packet, value AscendPPPAsyncMap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 212, a)
}

func AscendPPPAsyncMap_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 212)
}

func AscendThirdPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 213, a)
}

func AscendThirdPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 213, a)
}

func AscendThirdPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendThirdPrompt_Lookup(p)
	return
}

func AscendThirdPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = AscendThirdPrompt_LookupString(p)
	return
}

func AscendThirdPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 213) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendThirdPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 213) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendThirdPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendThirdPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendThirdPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 213, a)
}

func AscendThirdPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 213, a)
}

func AscendThirdPrompt_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 213)
}

type AscendIPXPeerMode uint32

const (
	AscendIPXPeerMode_Value_IPXPeerRouter AscendIPXPeerMode = 0
	AscendIPXPeerMode_Value_IPXPeerDialin AscendIPXPeerMode = 1
)

var AscendIPXPeerMode_Strings = map[AscendIPXPeerMode]string{
	AscendIPXPeerMode_Value_IPXPeerRouter: "IPX-Peer-Router",
	AscendIPXPeerMode_Value_IPXPeerDialin: "IPX-Peer-Dialin",
}

func (a AscendIPXPeerMode) String() string {
	if str, ok := AscendIPXPeerMode_Strings[a]; ok {
		return str
	}
	return "AscendIPXPeerMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPXPeerMode_Add(p *radius.Packet, value AscendIPXPeerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 216, a)
}

func AscendIPXPeerMode_Get(p *radius.Packet) (value AscendIPXPeerMode) {
	value, _ = AscendIPXPeerMode_Lookup(p)
	return
}

func AscendIPXPeerMode_Gets(p *radius.Packet) (values []AscendIPXPeerMode, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 216) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPXPeerMode(i))
	}
	return
}

func AscendIPXPeerMode_Lookup(p *radius.Packet) (value AscendIPXPeerMode, err error) {
	a, ok := _Ascend_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPXPeerMode(i)
	return
}

func AscendIPXPeerMode_Set(p *radius.Packet, value AscendIPXPeerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 216, a)
}

func AscendIPXPeerMode_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 216)
}

func AscendIPPoolDefinition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 217, a)
}

func AscendIPPoolDefinition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 217, a)
}

func AscendIPPoolDefinition_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendIPPoolDefinition_Lookup(p)
	return
}

func AscendIPPoolDefinition_GetString(p *radius.Packet) (value string) {
	value, _ = AscendIPPoolDefinition_LookupString(p)
	return
}

func AscendIPPoolDefinition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 217) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPPoolDefinition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 217) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendIPPoolDefinition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendIPPoolDefinition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendIPPoolDefinition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 217, a)
}

func AscendIPPoolDefinition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 217, a)
}

func AscendIPPoolDefinition_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 217)
}

type AscendAssignIPPool uint32

var AscendAssignIPPool_Strings = map[AscendAssignIPPool]string{}

func (a AscendAssignIPPool) String() string {
	if str, ok := AscendAssignIPPool_Strings[a]; ok {
		return str
	}
	return "AscendAssignIPPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendAssignIPPool_Add(p *radius.Packet, value AscendAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 218, a)
}

func AscendAssignIPPool_Get(p *radius.Packet) (value AscendAssignIPPool) {
	value, _ = AscendAssignIPPool_Lookup(p)
	return
}

func AscendAssignIPPool_Gets(p *radius.Packet) (values []AscendAssignIPPool, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 218) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendAssignIPPool(i))
	}
	return
}

func AscendAssignIPPool_Lookup(p *radius.Packet) (value AscendAssignIPPool, err error) {
	a, ok := _Ascend_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendAssignIPPool(i)
	return
}

func AscendAssignIPPool_Set(p *radius.Packet, value AscendAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 218, a)
}

func AscendAssignIPPool_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 218)
}

type AscendFRDirect uint32

const (
	AscendFRDirect_Value_FRDirectNo  AscendFRDirect = 0
	AscendFRDirect_Value_FRDirectYes AscendFRDirect = 1
)

var AscendFRDirect_Strings = map[AscendFRDirect]string{
	AscendFRDirect_Value_FRDirectNo:  "FR-Direct-No",
	AscendFRDirect_Value_FRDirectYes: "FR-Direct-Yes",
}

func (a AscendFRDirect) String() string {
	if str, ok := AscendFRDirect_Strings[a]; ok {
		return str
	}
	return "AscendFRDirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDirect_Add(p *radius.Packet, value AscendFRDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 219, a)
}

func AscendFRDirect_Get(p *radius.Packet) (value AscendFRDirect) {
	value, _ = AscendFRDirect_Lookup(p)
	return
}

func AscendFRDirect_Gets(p *radius.Packet) (values []AscendFRDirect, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 219) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDirect(i))
	}
	return
}

func AscendFRDirect_Lookup(p *radius.Packet) (value AscendFRDirect, err error) {
	a, ok := _Ascend_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDirect(i)
	return
}

func AscendFRDirect_Set(p *radius.Packet, value AscendFRDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 219, a)
}

func AscendFRDirect_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 219)
}

func AscendFRDirectProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 220, a)
}

func AscendFRDirectProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 220, a)
}

func AscendFRDirectProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendFRDirectProfile_Lookup(p)
	return
}

func AscendFRDirectProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AscendFRDirectProfile_LookupString(p)
	return
}

func AscendFRDirectProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 220) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRDirectProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 220) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendFRDirectProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendFRDirectProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendFRDirectProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 220, a)
}

func AscendFRDirectProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 220, a)
}

func AscendFRDirectProfile_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 220)
}

type AscendFRDirectDLCI uint32

var AscendFRDirectDLCI_Strings = map[AscendFRDirectDLCI]string{}

func (a AscendFRDirectDLCI) String() string {
	if str, ok := AscendFRDirectDLCI_Strings[a]; ok {
		return str
	}
	return "AscendFRDirectDLCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendFRDirectDLCI_Add(p *radius.Packet, value AscendFRDirectDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 221, a)
}

func AscendFRDirectDLCI_Get(p *radius.Packet) (value AscendFRDirectDLCI) {
	value, _ = AscendFRDirectDLCI_Lookup(p)
	return
}

func AscendFRDirectDLCI_Gets(p *radius.Packet) (values []AscendFRDirectDLCI, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 221) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendFRDirectDLCI(i))
	}
	return
}

func AscendFRDirectDLCI_Lookup(p *radius.Packet) (value AscendFRDirectDLCI, err error) {
	a, ok := _Ascend_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendFRDirectDLCI(i)
	return
}

func AscendFRDirectDLCI_Set(p *radius.Packet, value AscendFRDirectDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 221, a)
}

func AscendFRDirectDLCI_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 221)
}

type AscendHandleIPX uint32

const (
	AscendHandleIPX_Value_HandleIPXNone   AscendHandleIPX = 0
	AscendHandleIPX_Value_HandleIPXClient AscendHandleIPX = 1
	AscendHandleIPX_Value_HandleIPXServer AscendHandleIPX = 2
)

var AscendHandleIPX_Strings = map[AscendHandleIPX]string{
	AscendHandleIPX_Value_HandleIPXNone:   "Handle-IPX-None",
	AscendHandleIPX_Value_HandleIPXClient: "Handle-IPX-Client",
	AscendHandleIPX_Value_HandleIPXServer: "Handle-IPX-Server",
}

func (a AscendHandleIPX) String() string {
	if str, ok := AscendHandleIPX_Strings[a]; ok {
		return str
	}
	return "AscendHandleIPX(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendHandleIPX_Add(p *radius.Packet, value AscendHandleIPX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 222, a)
}

func AscendHandleIPX_Get(p *radius.Packet) (value AscendHandleIPX) {
	value, _ = AscendHandleIPX_Lookup(p)
	return
}

func AscendHandleIPX_Gets(p *radius.Packet) (values []AscendHandleIPX, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 222) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendHandleIPX(i))
	}
	return
}

func AscendHandleIPX_Lookup(p *radius.Packet) (value AscendHandleIPX, err error) {
	a, ok := _Ascend_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendHandleIPX(i)
	return
}

func AscendHandleIPX_Set(p *radius.Packet, value AscendHandleIPX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 222, a)
}

func AscendHandleIPX_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 222)
}

type AscendNetwareTimeout uint32

var AscendNetwareTimeout_Strings = map[AscendNetwareTimeout]string{}

func (a AscendNetwareTimeout) String() string {
	if str, ok := AscendNetwareTimeout_Strings[a]; ok {
		return str
	}
	return "AscendNetwareTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendNetwareTimeout_Add(p *radius.Packet, value AscendNetwareTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 223, a)
}

func AscendNetwareTimeout_Get(p *radius.Packet) (value AscendNetwareTimeout) {
	value, _ = AscendNetwareTimeout_Lookup(p)
	return
}

func AscendNetwareTimeout_Gets(p *radius.Packet) (values []AscendNetwareTimeout, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 223) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendNetwareTimeout(i))
	}
	return
}

func AscendNetwareTimeout_Lookup(p *radius.Packet) (value AscendNetwareTimeout, err error) {
	a, ok := _Ascend_LookupVendor(p, 223)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendNetwareTimeout(i)
	return
}

func AscendNetwareTimeout_Set(p *radius.Packet, value AscendNetwareTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 223, a)
}

func AscendNetwareTimeout_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 223)
}

type AscendIPXAlias uint32

var AscendIPXAlias_Strings = map[AscendIPXAlias]string{}

func (a AscendIPXAlias) String() string {
	if str, ok := AscendIPXAlias_Strings[a]; ok {
		return str
	}
	return "AscendIPXAlias(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIPXAlias_Add(p *radius.Packet, value AscendIPXAlias) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 224, a)
}

func AscendIPXAlias_Get(p *radius.Packet) (value AscendIPXAlias) {
	value, _ = AscendIPXAlias_Lookup(p)
	return
}

func AscendIPXAlias_Gets(p *radius.Packet) (values []AscendIPXAlias, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 224) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIPXAlias(i))
	}
	return
}

func AscendIPXAlias_Lookup(p *radius.Packet) (value AscendIPXAlias, err error) {
	a, ok := _Ascend_LookupVendor(p, 224)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIPXAlias(i)
	return
}

func AscendIPXAlias_Set(p *radius.Packet, value AscendIPXAlias) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 224, a)
}

func AscendIPXAlias_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 224)
}

type AscendMetric uint32

var AscendMetric_Strings = map[AscendMetric]string{}

func (a AscendMetric) String() string {
	if str, ok := AscendMetric_Strings[a]; ok {
		return str
	}
	return "AscendMetric(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMetric_Add(p *radius.Packet, value AscendMetric) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 225, a)
}

func AscendMetric_Get(p *radius.Packet) (value AscendMetric) {
	value, _ = AscendMetric_Lookup(p)
	return
}

func AscendMetric_Gets(p *radius.Packet) (values []AscendMetric, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 225) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMetric(i))
	}
	return
}

func AscendMetric_Lookup(p *radius.Packet) (value AscendMetric, err error) {
	a, ok := _Ascend_LookupVendor(p, 225)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMetric(i)
	return
}

func AscendMetric_Set(p *radius.Packet, value AscendMetric) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 225, a)
}

func AscendMetric_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 225)
}

type AscendPRINumberType uint32

const (
	AscendPRINumberType_Value_UnknownNumber     AscendPRINumberType = 0
	AscendPRINumberType_Value_IntlNumber        AscendPRINumberType = 1
	AscendPRINumberType_Value_NationalNumber    AscendPRINumberType = 2
	AscendPRINumberType_Value_NetSpecificNumber AscendPRINumberType = 3
	AscendPRINumberType_Value_LocalNumber       AscendPRINumberType = 4
	AscendPRINumberType_Value_AbbrevNumber      AscendPRINumberType = 5
)

var AscendPRINumberType_Strings = map[AscendPRINumberType]string{
	AscendPRINumberType_Value_UnknownNumber:     "Unknown-Number",
	AscendPRINumberType_Value_IntlNumber:        "Intl-Number",
	AscendPRINumberType_Value_NationalNumber:    "National-Number",
	AscendPRINumberType_Value_NetSpecificNumber: "Net-Specific-Number",
	AscendPRINumberType_Value_LocalNumber:       "Local-Number",
	AscendPRINumberType_Value_AbbrevNumber:      "Abbrev-Number",
}

func (a AscendPRINumberType) String() string {
	if str, ok := AscendPRINumberType_Strings[a]; ok {
		return str
	}
	return "AscendPRINumberType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPRINumberType_Add(p *radius.Packet, value AscendPRINumberType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 226, a)
}

func AscendPRINumberType_Get(p *radius.Packet) (value AscendPRINumberType) {
	value, _ = AscendPRINumberType_Lookup(p)
	return
}

func AscendPRINumberType_Gets(p *radius.Packet) (values []AscendPRINumberType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 226) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPRINumberType(i))
	}
	return
}

func AscendPRINumberType_Lookup(p *radius.Packet) (value AscendPRINumberType, err error) {
	a, ok := _Ascend_LookupVendor(p, 226)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPRINumberType(i)
	return
}

func AscendPRINumberType_Set(p *radius.Packet, value AscendPRINumberType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 226, a)
}

func AscendPRINumberType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 226)
}

func AscendDialNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 227, a)
}

func AscendDialNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 227, a)
}

func AscendDialNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendDialNumber_Lookup(p)
	return
}

func AscendDialNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AscendDialNumber_LookupString(p)
	return
}

func AscendDialNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 227) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDialNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 227) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDialNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendDialNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendDialNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 227, a)
}

func AscendDialNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 227, a)
}

func AscendDialNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 227)
}

type AscendRouteIP uint32

const (
	AscendRouteIP_Value_RouteIPNo  AscendRouteIP = 0
	AscendRouteIP_Value_RouteIPYes AscendRouteIP = 1
)

var AscendRouteIP_Strings = map[AscendRouteIP]string{
	AscendRouteIP_Value_RouteIPNo:  "Route-IP-No",
	AscendRouteIP_Value_RouteIPYes: "Route-IP-Yes",
}

func (a AscendRouteIP) String() string {
	if str, ok := AscendRouteIP_Strings[a]; ok {
		return str
	}
	return "AscendRouteIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendRouteIP_Add(p *radius.Packet, value AscendRouteIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 228, a)
}

func AscendRouteIP_Get(p *radius.Packet) (value AscendRouteIP) {
	value, _ = AscendRouteIP_Lookup(p)
	return
}

func AscendRouteIP_Gets(p *radius.Packet) (values []AscendRouteIP, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 228) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendRouteIP(i))
	}
	return
}

func AscendRouteIP_Lookup(p *radius.Packet) (value AscendRouteIP, err error) {
	a, ok := _Ascend_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendRouteIP(i)
	return
}

func AscendRouteIP_Set(p *radius.Packet, value AscendRouteIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 228, a)
}

func AscendRouteIP_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 228)
}

type AscendRouteIPX uint32

const (
	AscendRouteIPX_Value_RouteIPXNo  AscendRouteIPX = 0
	AscendRouteIPX_Value_RouteIPXYes AscendRouteIPX = 1
)

var AscendRouteIPX_Strings = map[AscendRouteIPX]string{
	AscendRouteIPX_Value_RouteIPXNo:  "Route-IPX-No",
	AscendRouteIPX_Value_RouteIPXYes: "Route-IPX-Yes",
}

func (a AscendRouteIPX) String() string {
	if str, ok := AscendRouteIPX_Strings[a]; ok {
		return str
	}
	return "AscendRouteIPX(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendRouteIPX_Add(p *radius.Packet, value AscendRouteIPX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 229, a)
}

func AscendRouteIPX_Get(p *radius.Packet) (value AscendRouteIPX) {
	value, _ = AscendRouteIPX_Lookup(p)
	return
}

func AscendRouteIPX_Gets(p *radius.Packet) (values []AscendRouteIPX, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 229) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendRouteIPX(i))
	}
	return
}

func AscendRouteIPX_Lookup(p *radius.Packet) (value AscendRouteIPX, err error) {
	a, ok := _Ascend_LookupVendor(p, 229)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendRouteIPX(i)
	return
}

func AscendRouteIPX_Set(p *radius.Packet, value AscendRouteIPX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 229, a)
}

func AscendRouteIPX_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 229)
}

type AscendBridge uint32

const (
	AscendBridge_Value_BridgeNo  AscendBridge = 0
	AscendBridge_Value_BridgeYes AscendBridge = 1
)

var AscendBridge_Strings = map[AscendBridge]string{
	AscendBridge_Value_BridgeNo:  "Bridge-No",
	AscendBridge_Value_BridgeYes: "Bridge-Yes",
}

func (a AscendBridge) String() string {
	if str, ok := AscendBridge_Strings[a]; ok {
		return str
	}
	return "AscendBridge(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendBridge_Add(p *radius.Packet, value AscendBridge) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 230, a)
}

func AscendBridge_Get(p *radius.Packet) (value AscendBridge) {
	value, _ = AscendBridge_Lookup(p)
	return
}

func AscendBridge_Gets(p *radius.Packet) (values []AscendBridge, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 230) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendBridge(i))
	}
	return
}

func AscendBridge_Lookup(p *radius.Packet) (value AscendBridge, err error) {
	a, ok := _Ascend_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendBridge(i)
	return
}

func AscendBridge_Set(p *radius.Packet, value AscendBridge) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 230, a)
}

func AscendBridge_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 230)
}

type AscendSendAuth uint32

const (
	AscendSendAuth_Value_SendAuthNone   AscendSendAuth = 0
	AscendSendAuth_Value_SendAuthPAP    AscendSendAuth = 1
	AscendSendAuth_Value_SendAuthCHAP   AscendSendAuth = 2
	AscendSendAuth_Value_SendAuthMSCHAP AscendSendAuth = 3
)

var AscendSendAuth_Strings = map[AscendSendAuth]string{
	AscendSendAuth_Value_SendAuthNone:   "Send-Auth-None",
	AscendSendAuth_Value_SendAuthPAP:    "Send-Auth-PAP",
	AscendSendAuth_Value_SendAuthCHAP:   "Send-Auth-CHAP",
	AscendSendAuth_Value_SendAuthMSCHAP: "Send-Auth-MS-CHAP",
}

func (a AscendSendAuth) String() string {
	if str, ok := AscendSendAuth_Strings[a]; ok {
		return str
	}
	return "AscendSendAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSendAuth_Add(p *radius.Packet, value AscendSendAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 231, a)
}

func AscendSendAuth_Get(p *radius.Packet) (value AscendSendAuth) {
	value, _ = AscendSendAuth_Lookup(p)
	return
}

func AscendSendAuth_Gets(p *radius.Packet) (values []AscendSendAuth, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 231) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSendAuth(i))
	}
	return
}

func AscendSendAuth_Lookup(p *radius.Packet) (value AscendSendAuth, err error) {
	a, ok := _Ascend_LookupVendor(p, 231)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSendAuth(i)
	return
}

func AscendSendAuth_Set(p *radius.Packet, value AscendSendAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 231, a)
}

func AscendSendAuth_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 231)
}

func AscendSendPasswd_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 232, a)
}

func AscendSendPasswd_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 232, a)
}

func AscendSendPasswd_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendSendPasswd_Lookup(p)
	return
}

func AscendSendPasswd_GetString(p *radius.Packet) (value string) {
	value, _ = AscendSendPasswd_LookupString(p)
	return
}

func AscendSendPasswd_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 232) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSendPasswd_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 232) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendSendPasswd_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendSendPasswd_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendSendPasswd_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 232, a)
}

func AscendSendPasswd_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 232, a)
}

func AscendSendPasswd_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 232)
}

type AscendLinkCompression uint32

const (
	AscendLinkCompression_Value_LinkCompNone       AscendLinkCompression = 0
	AscendLinkCompression_Value_LinkCompStac       AscendLinkCompression = 1
	AscendLinkCompression_Value_LinkCompStacDraft9 AscendLinkCompression = 2
	AscendLinkCompression_Value_LinkCompMSStac     AscendLinkCompression = 3
)

var AscendLinkCompression_Strings = map[AscendLinkCompression]string{
	AscendLinkCompression_Value_LinkCompNone:       "Link-Comp-None",
	AscendLinkCompression_Value_LinkCompStac:       "Link-Comp-Stac",
	AscendLinkCompression_Value_LinkCompStacDraft9: "Link-Comp-Stac-Draft-9",
	AscendLinkCompression_Value_LinkCompMSStac:     "Link-Comp-MS-Stac",
}

func (a AscendLinkCompression) String() string {
	if str, ok := AscendLinkCompression_Strings[a]; ok {
		return str
	}
	return "AscendLinkCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendLinkCompression_Add(p *radius.Packet, value AscendLinkCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 233, a)
}

func AscendLinkCompression_Get(p *radius.Packet) (value AscendLinkCompression) {
	value, _ = AscendLinkCompression_Lookup(p)
	return
}

func AscendLinkCompression_Gets(p *radius.Packet) (values []AscendLinkCompression, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 233) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendLinkCompression(i))
	}
	return
}

func AscendLinkCompression_Lookup(p *radius.Packet) (value AscendLinkCompression, err error) {
	a, ok := _Ascend_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendLinkCompression(i)
	return
}

func AscendLinkCompression_Set(p *radius.Packet, value AscendLinkCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 233, a)
}

func AscendLinkCompression_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 233)
}

type AscendTargetUtil uint32

var AscendTargetUtil_Strings = map[AscendTargetUtil]string{}

func (a AscendTargetUtil) String() string {
	if str, ok := AscendTargetUtil_Strings[a]; ok {
		return str
	}
	return "AscendTargetUtil(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendTargetUtil_Add(p *radius.Packet, value AscendTargetUtil) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 234, a)
}

func AscendTargetUtil_Get(p *radius.Packet) (value AscendTargetUtil) {
	value, _ = AscendTargetUtil_Lookup(p)
	return
}

func AscendTargetUtil_Gets(p *radius.Packet) (values []AscendTargetUtil, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 234) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendTargetUtil(i))
	}
	return
}

func AscendTargetUtil_Lookup(p *radius.Packet) (value AscendTargetUtil, err error) {
	a, ok := _Ascend_LookupVendor(p, 234)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendTargetUtil(i)
	return
}

func AscendTargetUtil_Set(p *radius.Packet, value AscendTargetUtil) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 234, a)
}

func AscendTargetUtil_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 234)
}

type AscendMaximumChannels uint32

var AscendMaximumChannels_Strings = map[AscendMaximumChannels]string{}

func (a AscendMaximumChannels) String() string {
	if str, ok := AscendMaximumChannels_Strings[a]; ok {
		return str
	}
	return "AscendMaximumChannels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMaximumChannels_Add(p *radius.Packet, value AscendMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 235, a)
}

func AscendMaximumChannels_Get(p *radius.Packet) (value AscendMaximumChannels) {
	value, _ = AscendMaximumChannels_Lookup(p)
	return
}

func AscendMaximumChannels_Gets(p *radius.Packet) (values []AscendMaximumChannels, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 235) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMaximumChannels(i))
	}
	return
}

func AscendMaximumChannels_Lookup(p *radius.Packet) (value AscendMaximumChannels, err error) {
	a, ok := _Ascend_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMaximumChannels(i)
	return
}

func AscendMaximumChannels_Set(p *radius.Packet, value AscendMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 235, a)
}

func AscendMaximumChannels_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 235)
}

type AscendIncChannelCount uint32

var AscendIncChannelCount_Strings = map[AscendIncChannelCount]string{}

func (a AscendIncChannelCount) String() string {
	if str, ok := AscendIncChannelCount_Strings[a]; ok {
		return str
	}
	return "AscendIncChannelCount(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIncChannelCount_Add(p *radius.Packet, value AscendIncChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 236, a)
}

func AscendIncChannelCount_Get(p *radius.Packet) (value AscendIncChannelCount) {
	value, _ = AscendIncChannelCount_Lookup(p)
	return
}

func AscendIncChannelCount_Gets(p *radius.Packet) (values []AscendIncChannelCount, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 236) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIncChannelCount(i))
	}
	return
}

func AscendIncChannelCount_Lookup(p *radius.Packet) (value AscendIncChannelCount, err error) {
	a, ok := _Ascend_LookupVendor(p, 236)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIncChannelCount(i)
	return
}

func AscendIncChannelCount_Set(p *radius.Packet, value AscendIncChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 236, a)
}

func AscendIncChannelCount_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 236)
}

type AscendDecChannelCount uint32

var AscendDecChannelCount_Strings = map[AscendDecChannelCount]string{}

func (a AscendDecChannelCount) String() string {
	if str, ok := AscendDecChannelCount_Strings[a]; ok {
		return str
	}
	return "AscendDecChannelCount(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDecChannelCount_Add(p *radius.Packet, value AscendDecChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 237, a)
}

func AscendDecChannelCount_Get(p *radius.Packet) (value AscendDecChannelCount) {
	value, _ = AscendDecChannelCount_Lookup(p)
	return
}

func AscendDecChannelCount_Gets(p *radius.Packet) (values []AscendDecChannelCount, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 237) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDecChannelCount(i))
	}
	return
}

func AscendDecChannelCount_Lookup(p *radius.Packet) (value AscendDecChannelCount, err error) {
	a, ok := _Ascend_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDecChannelCount(i)
	return
}

func AscendDecChannelCount_Set(p *radius.Packet, value AscendDecChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 237, a)
}

func AscendDecChannelCount_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 237)
}

type AscendSecondsOfHistory uint32

var AscendSecondsOfHistory_Strings = map[AscendSecondsOfHistory]string{}

func (a AscendSecondsOfHistory) String() string {
	if str, ok := AscendSecondsOfHistory_Strings[a]; ok {
		return str
	}
	return "AscendSecondsOfHistory(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendSecondsOfHistory_Add(p *radius.Packet, value AscendSecondsOfHistory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 238, a)
}

func AscendSecondsOfHistory_Get(p *radius.Packet) (value AscendSecondsOfHistory) {
	value, _ = AscendSecondsOfHistory_Lookup(p)
	return
}

func AscendSecondsOfHistory_Gets(p *radius.Packet) (values []AscendSecondsOfHistory, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 238) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendSecondsOfHistory(i))
	}
	return
}

func AscendSecondsOfHistory_Lookup(p *radius.Packet) (value AscendSecondsOfHistory, err error) {
	a, ok := _Ascend_LookupVendor(p, 238)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendSecondsOfHistory(i)
	return
}

func AscendSecondsOfHistory_Set(p *radius.Packet, value AscendSecondsOfHistory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 238, a)
}

func AscendSecondsOfHistory_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 238)
}

type AscendHistoryWeighType uint32

const (
	AscendHistoryWeighType_Value_HistoryConstant  AscendHistoryWeighType = 0
	AscendHistoryWeighType_Value_HistoryLinear    AscendHistoryWeighType = 1
	AscendHistoryWeighType_Value_HistoryQuadratic AscendHistoryWeighType = 2
)

var AscendHistoryWeighType_Strings = map[AscendHistoryWeighType]string{
	AscendHistoryWeighType_Value_HistoryConstant:  "History-Constant",
	AscendHistoryWeighType_Value_HistoryLinear:    "History-Linear",
	AscendHistoryWeighType_Value_HistoryQuadratic: "History-Quadratic",
}

func (a AscendHistoryWeighType) String() string {
	if str, ok := AscendHistoryWeighType_Strings[a]; ok {
		return str
	}
	return "AscendHistoryWeighType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendHistoryWeighType_Add(p *radius.Packet, value AscendHistoryWeighType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 239, a)
}

func AscendHistoryWeighType_Get(p *radius.Packet) (value AscendHistoryWeighType) {
	value, _ = AscendHistoryWeighType_Lookup(p)
	return
}

func AscendHistoryWeighType_Gets(p *radius.Packet) (values []AscendHistoryWeighType, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 239) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendHistoryWeighType(i))
	}
	return
}

func AscendHistoryWeighType_Lookup(p *radius.Packet) (value AscendHistoryWeighType, err error) {
	a, ok := _Ascend_LookupVendor(p, 239)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendHistoryWeighType(i)
	return
}

func AscendHistoryWeighType_Set(p *radius.Packet, value AscendHistoryWeighType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 239, a)
}

func AscendHistoryWeighType_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 239)
}

type AscendAddSeconds uint32

var AscendAddSeconds_Strings = map[AscendAddSeconds]string{}

func (a AscendAddSeconds) String() string {
	if str, ok := AscendAddSeconds_Strings[a]; ok {
		return str
	}
	return "AscendAddSeconds(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendAddSeconds_Add(p *radius.Packet, value AscendAddSeconds) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 240, a)
}

func AscendAddSeconds_Get(p *radius.Packet) (value AscendAddSeconds) {
	value, _ = AscendAddSeconds_Lookup(p)
	return
}

func AscendAddSeconds_Gets(p *radius.Packet) (values []AscendAddSeconds, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 240) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendAddSeconds(i))
	}
	return
}

func AscendAddSeconds_Lookup(p *radius.Packet) (value AscendAddSeconds, err error) {
	a, ok := _Ascend_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendAddSeconds(i)
	return
}

func AscendAddSeconds_Set(p *radius.Packet, value AscendAddSeconds) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 240, a)
}

func AscendAddSeconds_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 240)
}

type AscendRemoveSeconds uint32

var AscendRemoveSeconds_Strings = map[AscendRemoveSeconds]string{}

func (a AscendRemoveSeconds) String() string {
	if str, ok := AscendRemoveSeconds_Strings[a]; ok {
		return str
	}
	return "AscendRemoveSeconds(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendRemoveSeconds_Add(p *radius.Packet, value AscendRemoveSeconds) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 241, a)
}

func AscendRemoveSeconds_Get(p *radius.Packet) (value AscendRemoveSeconds) {
	value, _ = AscendRemoveSeconds_Lookup(p)
	return
}

func AscendRemoveSeconds_Gets(p *radius.Packet) (values []AscendRemoveSeconds, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 241) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendRemoveSeconds(i))
	}
	return
}

func AscendRemoveSeconds_Lookup(p *radius.Packet) (value AscendRemoveSeconds, err error) {
	a, ok := _Ascend_LookupVendor(p, 241)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendRemoveSeconds(i)
	return
}

func AscendRemoveSeconds_Set(p *radius.Packet, value AscendRemoveSeconds) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 241, a)
}

func AscendRemoveSeconds_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 241)
}

func AscendDataFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 242, a)
}

func AscendDataFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 242, a)
}

func AscendDataFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendDataFilter_Lookup(p)
	return
}

func AscendDataFilter_GetString(p *radius.Packet) (value string) {
	value, _ = AscendDataFilter_LookupString(p)
	return
}

func AscendDataFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 242) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDataFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 242) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendDataFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendDataFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendDataFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 242, a)
}

func AscendDataFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 242, a)
}

func AscendDataFilter_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 242)
}

func AscendCallFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 243, a)
}

func AscendCallFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 243, a)
}

func AscendCallFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendCallFilter_Lookup(p)
	return
}

func AscendCallFilter_GetString(p *radius.Packet) (value string) {
	value, _ = AscendCallFilter_LookupString(p)
	return
}

func AscendCallFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 243) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendCallFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 243) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendCallFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 243)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendCallFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 243)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendCallFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 243, a)
}

func AscendCallFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 243, a)
}

func AscendCallFilter_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 243)
}

type AscendIdleLimit uint32

var AscendIdleLimit_Strings = map[AscendIdleLimit]string{}

func (a AscendIdleLimit) String() string {
	if str, ok := AscendIdleLimit_Strings[a]; ok {
		return str
	}
	return "AscendIdleLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendIdleLimit_Add(p *radius.Packet, value AscendIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 244, a)
}

func AscendIdleLimit_Get(p *radius.Packet) (value AscendIdleLimit) {
	value, _ = AscendIdleLimit_Lookup(p)
	return
}

func AscendIdleLimit_Gets(p *radius.Packet) (values []AscendIdleLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 244) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendIdleLimit(i))
	}
	return
}

func AscendIdleLimit_Lookup(p *radius.Packet) (value AscendIdleLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 244)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendIdleLimit(i)
	return
}

func AscendIdleLimit_Set(p *radius.Packet, value AscendIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 244, a)
}

func AscendIdleLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 244)
}

type AscendPreemptLimit uint32

var AscendPreemptLimit_Strings = map[AscendPreemptLimit]string{}

func (a AscendPreemptLimit) String() string {
	if str, ok := AscendPreemptLimit_Strings[a]; ok {
		return str
	}
	return "AscendPreemptLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendPreemptLimit_Add(p *radius.Packet, value AscendPreemptLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 245, a)
}

func AscendPreemptLimit_Get(p *radius.Packet) (value AscendPreemptLimit) {
	value, _ = AscendPreemptLimit_Lookup(p)
	return
}

func AscendPreemptLimit_Gets(p *radius.Packet) (values []AscendPreemptLimit, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 245) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendPreemptLimit(i))
	}
	return
}

func AscendPreemptLimit_Lookup(p *radius.Packet) (value AscendPreemptLimit, err error) {
	a, ok := _Ascend_LookupVendor(p, 245)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendPreemptLimit(i)
	return
}

func AscendPreemptLimit_Set(p *radius.Packet, value AscendPreemptLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 245, a)
}

func AscendPreemptLimit_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 245)
}

type AscendCallback uint32

const (
	AscendCallback_Value_CallbackNo  AscendCallback = 0
	AscendCallback_Value_CallbackYes AscendCallback = 1
)

var AscendCallback_Strings = map[AscendCallback]string{
	AscendCallback_Value_CallbackNo:  "Callback-No",
	AscendCallback_Value_CallbackYes: "Callback-Yes",
}

func (a AscendCallback) String() string {
	if str, ok := AscendCallback_Strings[a]; ok {
		return str
	}
	return "AscendCallback(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallback_Add(p *radius.Packet, value AscendCallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 246, a)
}

func AscendCallback_Get(p *radius.Packet) (value AscendCallback) {
	value, _ = AscendCallback_Lookup(p)
	return
}

func AscendCallback_Gets(p *radius.Packet) (values []AscendCallback, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 246) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallback(i))
	}
	return
}

func AscendCallback_Lookup(p *radius.Packet) (value AscendCallback, err error) {
	a, ok := _Ascend_LookupVendor(p, 246)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallback(i)
	return
}

func AscendCallback_Set(p *radius.Packet, value AscendCallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 246, a)
}

func AscendCallback_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 246)
}

type AscendDataSvc uint32

const (
	AscendDataSvc_Value_SwitchedVoiceBearer         AscendDataSvc = 0
	AscendDataSvc_Value_Nailed56KR                  AscendDataSvc = 1
	AscendDataSvc_Value_Nailed64K                   AscendDataSvc = 2
	AscendDataSvc_Value_Switched64KR                AscendDataSvc = 3
	AscendDataSvc_Value_Switched56K                 AscendDataSvc = 4
	AscendDataSvc_Value_Switched384KR               AscendDataSvc = 5
	AscendDataSvc_Value_Switched384K                AscendDataSvc = 6
	AscendDataSvc_Value_Switched1536K               AscendDataSvc = 7
	AscendDataSvc_Value_Switched1536KR              AscendDataSvc = 8
	AscendDataSvc_Value_Switched128K                AscendDataSvc = 9
	AscendDataSvc_Value_Switched192K                AscendDataSvc = 10
	AscendDataSvc_Value_Switched256K                AscendDataSvc = 11
	AscendDataSvc_Value_Switched320K                AscendDataSvc = 12
	AscendDataSvc_Value_Switched384KMR              AscendDataSvc = 13
	AscendDataSvc_Value_Switched448K                AscendDataSvc = 14
	AscendDataSvc_Value_Switched512K                AscendDataSvc = 15
	AscendDataSvc_Value_Switched576K                AscendDataSvc = 16
	AscendDataSvc_Value_Switched640K                AscendDataSvc = 17
	AscendDataSvc_Value_Switched704K                AscendDataSvc = 18
	AscendDataSvc_Value_Switched768K                AscendDataSvc = 19
	AscendDataSvc_Value_Switched832K                AscendDataSvc = 20
	AscendDataSvc_Value_Switched896K                AscendDataSvc = 21
	AscendDataSvc_Value_Switched960K                AscendDataSvc = 22
	AscendDataSvc_Value_Switched1024K               AscendDataSvc = 23
	AscendDataSvc_Value_Switched1088K               AscendDataSvc = 24
	AscendDataSvc_Value_Switched1152K               AscendDataSvc = 25
	AscendDataSvc_Value_Switched1216K               AscendDataSvc = 26
	AscendDataSvc_Value_Switched1280K               AscendDataSvc = 27
	AscendDataSvc_Value_Switched1344K               AscendDataSvc = 28
	AscendDataSvc_Value_Switched1408K               AscendDataSvc = 29
	AscendDataSvc_Value_Switched1472K               AscendDataSvc = 30
	AscendDataSvc_Value_Switched1600K               AscendDataSvc = 31
	AscendDataSvc_Value_Switched1664K               AscendDataSvc = 32
	AscendDataSvc_Value_Switched1728K               AscendDataSvc = 33
	AscendDataSvc_Value_Switched1792K               AscendDataSvc = 34
	AscendDataSvc_Value_Switched1856K               AscendDataSvc = 35
	AscendDataSvc_Value_Switched1920K               AscendDataSvc = 36
	AscendDataSvc_Value_SwitchedInherited           AscendDataSvc = 37
	AscendDataSvc_Value_SwitchedRestrictedBearerX30 AscendDataSvc = 38
	AscendDataSvc_Value_SwitchedClearBearerV110     AscendDataSvc = 39
	AscendDataSvc_Value_SwitchedRestricted64X30     AscendDataSvc = 40
	AscendDataSvc_Value_SwitchedClear56V110         AscendDataSvc = 41
	AscendDataSvc_Value_SwitchedModem               AscendDataSvc = 42
	AscendDataSvc_Value_SwitchedAtmodem             AscendDataSvc = 43
	AscendDataSvc_Value_SwitchedV1102456            AscendDataSvc = 45
	AscendDataSvc_Value_SwitchedV1104856            AscendDataSvc = 46
	AscendDataSvc_Value_SwitchedV1109656            AscendDataSvc = 47
	AscendDataSvc_Value_SwitchedV11019256           AscendDataSvc = 48
	AscendDataSvc_Value_SwitchedV11038456           AscendDataSvc = 49
	AscendDataSvc_Value_SwitchedV1102456R           AscendDataSvc = 50
	AscendDataSvc_Value_SwitchedV1104856R           AscendDataSvc = 51
	AscendDataSvc_Value_SwitchedV1109656R           AscendDataSvc = 52
	AscendDataSvc_Value_SwitchedV11019256R          AscendDataSvc = 53
	AscendDataSvc_Value_SwitchedV11038456R          AscendDataSvc = 54
	AscendDataSvc_Value_SwitchedV1102464            AscendDataSvc = 55
	AscendDataSvc_Value_SwitchedV1104864            AscendDataSvc = 56
	AscendDataSvc_Value_SwitchedV1109664            AscendDataSvc = 57
	AscendDataSvc_Value_SwitchedV11019264           AscendDataSvc = 58
	AscendDataSvc_Value_SwitchedV11038464           AscendDataSvc = 59
	AscendDataSvc_Value_SwitchedV1102464R           AscendDataSvc = 60
	AscendDataSvc_Value_SwitchedV1104864R           AscendDataSvc = 61
	AscendDataSvc_Value_SwitchedV1109664R           AscendDataSvc = 62
	AscendDataSvc_Value_SwitchedV11019264R          AscendDataSvc = 63
	AscendDataSvc_Value_SwitchedV11038464R          AscendDataSvc = 64
	AscendDataSvc_Value_SwitchedPots                AscendDataSvc = 68
	AscendDataSvc_Value_SwitchedATM                 AscendDataSvc = 69
	AscendDataSvc_Value_SwitchedFR                  AscendDataSvc = 70
)

var AscendDataSvc_Strings = map[AscendDataSvc]string{
	AscendDataSvc_Value_SwitchedVoiceBearer:         "Switched-Voice-Bearer",
	AscendDataSvc_Value_Nailed56KR:                  "Nailed-56KR",
	AscendDataSvc_Value_Nailed64K:                   "Nailed-64K",
	AscendDataSvc_Value_Switched64KR:                "Switched-64KR",
	AscendDataSvc_Value_Switched56K:                 "Switched-56K",
	AscendDataSvc_Value_Switched384KR:               "Switched-384KR",
	AscendDataSvc_Value_Switched384K:                "Switched-384K",
	AscendDataSvc_Value_Switched1536K:               "Switched-1536K",
	AscendDataSvc_Value_Switched1536KR:              "Switched-1536KR",
	AscendDataSvc_Value_Switched128K:                "Switched-128K",
	AscendDataSvc_Value_Switched192K:                "Switched-192K",
	AscendDataSvc_Value_Switched256K:                "Switched-256K",
	AscendDataSvc_Value_Switched320K:                "Switched-320K",
	AscendDataSvc_Value_Switched384KMR:              "Switched-384K-MR",
	AscendDataSvc_Value_Switched448K:                "Switched-448K",
	AscendDataSvc_Value_Switched512K:                "Switched-512K",
	AscendDataSvc_Value_Switched576K:                "Switched-576K",
	AscendDataSvc_Value_Switched640K:                "Switched-640K",
	AscendDataSvc_Value_Switched704K:                "Switched-704K",
	AscendDataSvc_Value_Switched768K:                "Switched-768K",
	AscendDataSvc_Value_Switched832K:                "Switched-832K",
	AscendDataSvc_Value_Switched896K:                "Switched-896K",
	AscendDataSvc_Value_Switched960K:                "Switched-960K",
	AscendDataSvc_Value_Switched1024K:               "Switched-1024K",
	AscendDataSvc_Value_Switched1088K:               "Switched-1088K",
	AscendDataSvc_Value_Switched1152K:               "Switched-1152K",
	AscendDataSvc_Value_Switched1216K:               "Switched-1216K",
	AscendDataSvc_Value_Switched1280K:               "Switched-1280K",
	AscendDataSvc_Value_Switched1344K:               "Switched-1344K",
	AscendDataSvc_Value_Switched1408K:               "Switched-1408K",
	AscendDataSvc_Value_Switched1472K:               "Switched-1472K",
	AscendDataSvc_Value_Switched1600K:               "Switched-1600K",
	AscendDataSvc_Value_Switched1664K:               "Switched-1664K",
	AscendDataSvc_Value_Switched1728K:               "Switched-1728K",
	AscendDataSvc_Value_Switched1792K:               "Switched-1792K",
	AscendDataSvc_Value_Switched1856K:               "Switched-1856K",
	AscendDataSvc_Value_Switched1920K:               "Switched-1920K",
	AscendDataSvc_Value_SwitchedInherited:           "Switched-inherited",
	AscendDataSvc_Value_SwitchedRestrictedBearerX30: "Switched-restricted-bearer-x30",
	AscendDataSvc_Value_SwitchedClearBearerV110:     "Switched-clear-bearer-v110",
	AscendDataSvc_Value_SwitchedRestricted64X30:     "Switched-restricted-64-x30",
	AscendDataSvc_Value_SwitchedClear56V110:         "Switched-clear-56-v110",
	AscendDataSvc_Value_SwitchedModem:               "Switched-modem",
	AscendDataSvc_Value_SwitchedAtmodem:             "Switched-atmodem",
	AscendDataSvc_Value_SwitchedV1102456:            "Switched-V110-24-56",
	AscendDataSvc_Value_SwitchedV1104856:            "Switched-V110-48-56",
	AscendDataSvc_Value_SwitchedV1109656:            "Switched-V110-96-56",
	AscendDataSvc_Value_SwitchedV11019256:           "Switched-V110-192-56",
	AscendDataSvc_Value_SwitchedV11038456:           "Switched-V110-384-56",
	AscendDataSvc_Value_SwitchedV1102456R:           "Switched-V110-24-56R",
	AscendDataSvc_Value_SwitchedV1104856R:           "Switched-V110-48-56R",
	AscendDataSvc_Value_SwitchedV1109656R:           "Switched-V110-96-56R",
	AscendDataSvc_Value_SwitchedV11019256R:          "Switched-V110-192-56R",
	AscendDataSvc_Value_SwitchedV11038456R:          "Switched-V110-384-56R",
	AscendDataSvc_Value_SwitchedV1102464:            "Switched-V110-24-64",
	AscendDataSvc_Value_SwitchedV1104864:            "Switched-V110-48-64",
	AscendDataSvc_Value_SwitchedV1109664:            "Switched-V110-96-64",
	AscendDataSvc_Value_SwitchedV11019264:           "Switched-V110-192-64",
	AscendDataSvc_Value_SwitchedV11038464:           "Switched-V110-384-64",
	AscendDataSvc_Value_SwitchedV1102464R:           "Switched-V110-24-64R",
	AscendDataSvc_Value_SwitchedV1104864R:           "Switched-V110-48-64R",
	AscendDataSvc_Value_SwitchedV1109664R:           "Switched-V110-96-64R",
	AscendDataSvc_Value_SwitchedV11019264R:          "Switched-V110-192-64R",
	AscendDataSvc_Value_SwitchedV11038464R:          "Switched-V110-384-64R",
	AscendDataSvc_Value_SwitchedPots:                "Switched-Pots",
	AscendDataSvc_Value_SwitchedATM:                 "Switched-ATM",
	AscendDataSvc_Value_SwitchedFR:                  "Switched-FR",
}

func (a AscendDataSvc) String() string {
	if str, ok := AscendDataSvc_Strings[a]; ok {
		return str
	}
	return "AscendDataSvc(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendDataSvc_Add(p *radius.Packet, value AscendDataSvc) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 247, a)
}

func AscendDataSvc_Get(p *radius.Packet) (value AscendDataSvc) {
	value, _ = AscendDataSvc_Lookup(p)
	return
}

func AscendDataSvc_Gets(p *radius.Packet) (values []AscendDataSvc, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 247) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendDataSvc(i))
	}
	return
}

func AscendDataSvc_Lookup(p *radius.Packet) (value AscendDataSvc, err error) {
	a, ok := _Ascend_LookupVendor(p, 247)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendDataSvc(i)
	return
}

func AscendDataSvc_Set(p *radius.Packet, value AscendDataSvc) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 247, a)
}

func AscendDataSvc_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 247)
}

type AscendForce56 uint32

const (
	AscendForce56_Value_Force56No  AscendForce56 = 0
	AscendForce56_Value_Force56Yes AscendForce56 = 1
)

var AscendForce56_Strings = map[AscendForce56]string{
	AscendForce56_Value_Force56No:  "Force-56-No",
	AscendForce56_Value_Force56Yes: "Force-56-Yes",
}

func (a AscendForce56) String() string {
	if str, ok := AscendForce56_Strings[a]; ok {
		return str
	}
	return "AscendForce56(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendForce56_Add(p *radius.Packet, value AscendForce56) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 248, a)
}

func AscendForce56_Get(p *radius.Packet) (value AscendForce56) {
	value, _ = AscendForce56_Lookup(p)
	return
}

func AscendForce56_Gets(p *radius.Packet) (values []AscendForce56, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 248) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendForce56(i))
	}
	return
}

func AscendForce56_Lookup(p *radius.Packet) (value AscendForce56, err error) {
	a, ok := _Ascend_LookupVendor(p, 248)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendForce56(i)
	return
}

func AscendForce56_Set(p *radius.Packet, value AscendForce56) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 248, a)
}

func AscendForce56_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 248)
}

func AscendBillingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 249, a)
}

func AscendBillingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 249, a)
}

func AscendBillingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendBillingNumber_Lookup(p)
	return
}

func AscendBillingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AscendBillingNumber_LookupString(p)
	return
}

func AscendBillingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 249) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBillingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 249) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendBillingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendBillingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendBillingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 249, a)
}

func AscendBillingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 249, a)
}

func AscendBillingNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 249)
}

type AscendCallByCall uint32

var AscendCallByCall_Strings = map[AscendCallByCall]string{}

func (a AscendCallByCall) String() string {
	if str, ok := AscendCallByCall_Strings[a]; ok {
		return str
	}
	return "AscendCallByCall(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendCallByCall_Add(p *radius.Packet, value AscendCallByCall) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 250, a)
}

func AscendCallByCall_Get(p *radius.Packet) (value AscendCallByCall) {
	value, _ = AscendCallByCall_Lookup(p)
	return
}

func AscendCallByCall_Gets(p *radius.Packet) (values []AscendCallByCall, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 250) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendCallByCall(i))
	}
	return
}

func AscendCallByCall_Lookup(p *radius.Packet) (value AscendCallByCall, err error) {
	a, ok := _Ascend_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendCallByCall(i)
	return
}

func AscendCallByCall_Set(p *radius.Packet, value AscendCallByCall) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 250, a)
}

func AscendCallByCall_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 250)
}

func AscendTransitNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 251, a)
}

func AscendTransitNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 251, a)
}

func AscendTransitNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendTransitNumber_Lookup(p)
	return
}

func AscendTransitNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AscendTransitNumber_LookupString(p)
	return
}

func AscendTransitNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 251) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTransitNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 251) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendTransitNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 251)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendTransitNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 251)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendTransitNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 251, a)
}

func AscendTransitNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 251, a)
}

func AscendTransitNumber_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 251)
}

func AscendHostInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 252, a)
}

func AscendHostInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 252, a)
}

func AscendHostInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = AscendHostInfo_Lookup(p)
	return
}

func AscendHostInfo_GetString(p *radius.Packet) (value string) {
	value, _ = AscendHostInfo_LookupString(p)
	return
}

func AscendHostInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ascend_GetsVendor(p, 252) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHostInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ascend_GetsVendor(p, 252) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendHostInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ascend_LookupVendor(p, 252)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AscendHostInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ascend_LookupVendor(p, 252)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AscendHostInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 252, a)
}

func AscendHostInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 252, a)
}

func AscendHostInfo_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 252)
}

func AscendPPPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_AddVendor(p, 253, a)
}

func AscendPPPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AscendPPPAddress_Lookup(p)
	return
}

func AscendPPPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ascend_GetsVendor(p, 253) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AscendPPPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ascend_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AscendPPPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ascend_SetVendor(p, 253, a)
}

func AscendPPPAddress_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 253)
}

type AscendMPPIdlePercent uint32

var AscendMPPIdlePercent_Strings = map[AscendMPPIdlePercent]string{}

func (a AscendMPPIdlePercent) String() string {
	if str, ok := AscendMPPIdlePercent_Strings[a]; ok {
		return str
	}
	return "AscendMPPIdlePercent(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendMPPIdlePercent_Add(p *radius.Packet, value AscendMPPIdlePercent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 254, a)
}

func AscendMPPIdlePercent_Get(p *radius.Packet) (value AscendMPPIdlePercent) {
	value, _ = AscendMPPIdlePercent_Lookup(p)
	return
}

func AscendMPPIdlePercent_Gets(p *radius.Packet) (values []AscendMPPIdlePercent, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 254) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendMPPIdlePercent(i))
	}
	return
}

func AscendMPPIdlePercent_Lookup(p *radius.Packet) (value AscendMPPIdlePercent, err error) {
	a, ok := _Ascend_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendMPPIdlePercent(i)
	return
}

func AscendMPPIdlePercent_Set(p *radius.Packet, value AscendMPPIdlePercent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 254, a)
}

func AscendMPPIdlePercent_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 254)
}

type AscendXmitRate uint32

var AscendXmitRate_Strings = map[AscendXmitRate]string{}

func (a AscendXmitRate) String() string {
	if str, ok := AscendXmitRate_Strings[a]; ok {
		return str
	}
	return "AscendXmitRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AscendXmitRate_Add(p *radius.Packet, value AscendXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_AddVendor(p, 255, a)
}

func AscendXmitRate_Get(p *radius.Packet) (value AscendXmitRate) {
	value, _ = AscendXmitRate_Lookup(p)
	return
}

func AscendXmitRate_Gets(p *radius.Packet) (values []AscendXmitRate, err error) {
	var i uint32
	for _, attr := range _Ascend_GetsVendor(p, 255) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AscendXmitRate(i))
	}
	return
}

func AscendXmitRate_Lookup(p *radius.Packet) (value AscendXmitRate, err error) {
	a, ok := _Ascend_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AscendXmitRate(i)
	return
}

func AscendXmitRate_Set(p *radius.Packet, value AscendXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ascend_SetVendor(p, 255, a)
}

func AscendXmitRate_Del(p *radius.Packet) {
	_Ascend_DelVendor(p, 255)
}
