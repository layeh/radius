// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc4372

import (
	"layeh.com/radius"
)

const (
	ChargeableUserIdentity_Type radius.Type = 89
)

func init() {
}

const ()

func ChargeableUserIdentity_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(ChargeableUserIdentity_Type, a)
	return
}

func ChargeableUserIdentity_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(ChargeableUserIdentity_Type, a)
	return
}

func ChargeableUserIdentity_Get(p *radius.Packet) (value []byte) {
	value, _ = ChargeableUserIdentity_Lookup(p)
	return
}

func ChargeableUserIdentity_GetString(p *radius.Packet) (value string) {
	value, _ = ChargeableUserIdentity_LookupString(p)
	return
}

func ChargeableUserIdentity_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[ChargeableUserIdentity_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChargeableUserIdentity_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[ChargeableUserIdentity_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChargeableUserIdentity_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(ChargeableUserIdentity_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChargeableUserIdentity_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(ChargeableUserIdentity_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChargeableUserIdentity_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(ChargeableUserIdentity_Type, a)
	return
}

func ChargeableUserIdentity_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(ChargeableUserIdentity_Type, a)
	return
}

func ChargeableUserIdentity_Del(p *radius.Packet) {
	p.Attributes.Del(ChargeableUserIdentity_Type)
}
