// Code generated by radius-dict-gen. DO NOT EDIT.

package alcatel

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Alcatel_VendorID = 800
)

func _Alcatel_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Alcatel_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Alcatel_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alcatel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alcatel_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alcatel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alcatel_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Alcatel_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Alcatel_AddVendor(p, typ, attr)
}

func _Alcatel_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Alcatel_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type AlcatelAuthGroup uint32

var AlcatelAuthGroup_Strings = map[AlcatelAuthGroup]string{}

func (a AlcatelAuthGroup) String() string {
	if str, ok := AlcatelAuthGroup_Strings[a]; ok {
		return str
	}
	return "AlcatelAuthGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AlcatelAuthGroup_Add(p *radius.Packet, value AlcatelAuthGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 1, a)
}

func AlcatelAuthGroup_Get(p *radius.Packet) (value AlcatelAuthGroup) {
	value, _ = AlcatelAuthGroup_Lookup(p)
	return
}

func AlcatelAuthGroup_Gets(p *radius.Packet) (values []AlcatelAuthGroup, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AlcatelAuthGroup(i))
	}
	return
}

func AlcatelAuthGroup_Lookup(p *radius.Packet) (value AlcatelAuthGroup, err error) {
	a, ok := _Alcatel_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AlcatelAuthGroup(i)
	return
}

func AlcatelAuthGroup_Set(p *radius.Packet, value AlcatelAuthGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 1, a)
}

func AlcatelAuthGroup_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 1)
}

func AlcatelSlotPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 2, a)
}

func AlcatelSlotPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 2, a)
}

func AlcatelSlotPort_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelSlotPort_Lookup(p)
	return
}

func AlcatelSlotPort_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelSlotPort_LookupString(p)
	return
}

func AlcatelSlotPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelSlotPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelSlotPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelSlotPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelSlotPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 2, a)
}

func AlcatelSlotPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 2, a)
}

func AlcatelSlotPort_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 2)
}

func AlcatelTimeOfDay_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 3, a)
}

func AlcatelTimeOfDay_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 3, a)
}

func AlcatelTimeOfDay_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelTimeOfDay_Lookup(p)
	return
}

func AlcatelTimeOfDay_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelTimeOfDay_LookupString(p)
	return
}

func AlcatelTimeOfDay_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelTimeOfDay_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelTimeOfDay_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelTimeOfDay_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelTimeOfDay_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 3, a)
}

func AlcatelTimeOfDay_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 3, a)
}

func AlcatelTimeOfDay_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 3)
}

func AlcatelClientIPAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 4, a)
}

func AlcatelClientIPAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlcatelClientIPAddr_Lookup(p)
	return
}

func AlcatelClientIPAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 4) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelClientIPAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlcatelClientIPAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 4, a)
}

func AlcatelClientIPAddr_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 4)
}

func AlcatelGroupDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 5, a)
}

func AlcatelGroupDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 5, a)
}

func AlcatelGroupDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelGroupDesc_Lookup(p)
	return
}

func AlcatelGroupDesc_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelGroupDesc_LookupString(p)
	return
}

func AlcatelGroupDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelGroupDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelGroupDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelGroupDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelGroupDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 5, a)
}

func AlcatelGroupDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 5, a)
}

func AlcatelGroupDesc_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 5)
}

func AlcatelPortDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 6, a)
}

func AlcatelPortDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 6, a)
}

func AlcatelPortDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelPortDesc_Lookup(p)
	return
}

func AlcatelPortDesc_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelPortDesc_LookupString(p)
	return
}

func AlcatelPortDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelPortDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelPortDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelPortDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelPortDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 6, a)
}

func AlcatelPortDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 6, a)
}

func AlcatelPortDesc_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 6)
}

func AlcatelAuthGroupProtocol_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 8, a)
}

func AlcatelAuthGroupProtocol_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 8, a)
}

func AlcatelAuthGroupProtocol_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAuthGroupProtocol_Lookup(p)
	return
}

func AlcatelAuthGroupProtocol_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAuthGroupProtocol_LookupString(p)
	return
}

func AlcatelAuthGroupProtocol_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAuthGroupProtocol_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAuthGroupProtocol_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAuthGroupProtocol_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAuthGroupProtocol_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 8, a)
}

func AlcatelAuthGroupProtocol_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 8, a)
}

func AlcatelAuthGroupProtocol_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 8)
}

func AlcatelAsaAccess_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 9, a)
}

func AlcatelAsaAccess_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 9, a)
}

func AlcatelAsaAccess_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAsaAccess_Lookup(p)
	return
}

func AlcatelAsaAccess_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAsaAccess_LookupString(p)
	return
}

func AlcatelAsaAccess_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAsaAccess_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAsaAccess_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAsaAccess_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAsaAccess_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 9, a)
}

func AlcatelAsaAccess_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 9, a)
}

func AlcatelAsaAccess_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 9)
}

func AlcatelEndUserProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 10, a)
}

func AlcatelEndUserProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 10, a)
}

func AlcatelEndUserProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelEndUserProfile_Lookup(p)
	return
}

func AlcatelEndUserProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelEndUserProfile_LookupString(p)
	return
}

func AlcatelEndUserProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelEndUserProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelEndUserProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelEndUserProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelEndUserProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 10, a)
}

func AlcatelEndUserProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 10, a)
}

func AlcatelEndUserProfile_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 10)
}

func AATPrimaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 12, a)
}

func AATPrimaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 12, a)
}

func AATPrimaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AATPrimaryHomeAgent_Lookup(p)
	return
}

func AATPrimaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AATPrimaryHomeAgent_LookupString(p)
	return
}

func AATPrimaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPrimaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPrimaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATPrimaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATPrimaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 12, a)
}

func AATPrimaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 12, a)
}

func AATPrimaryHomeAgent_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 12)
}

func AATSecondaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 13, a)
}

func AATSecondaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 13, a)
}

func AATSecondaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AATSecondaryHomeAgent_Lookup(p)
	return
}

func AATSecondaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AATSecondaryHomeAgent_LookupString(p)
	return
}

func AATSecondaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATSecondaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATSecondaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATSecondaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATSecondaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 13, a)
}

func AATSecondaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 13, a)
}

func AATSecondaryHomeAgent_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 13)
}

func AATHomeAgentPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 14, a)
}

func AATHomeAgentPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 14, a)
}

func AATHomeAgentPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = AATHomeAgentPassword_Lookup(p)
	return
}

func AATHomeAgentPassword_GetString(p *radius.Packet) (value string) {
	value, _ = AATHomeAgentPassword_LookupString(p)
	return
}

func AATHomeAgentPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeAgentPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeAgentPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATHomeAgentPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATHomeAgentPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 14, a)
}

func AATHomeAgentPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 14, a)
}

func AATHomeAgentPassword_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 14)
}

func AATHomeNetworkName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 15, a)
}

func AATHomeNetworkName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 15, a)
}

func AATHomeNetworkName_Get(p *radius.Packet) (value []byte) {
	value, _ = AATHomeNetworkName_Lookup(p)
	return
}

func AATHomeNetworkName_GetString(p *radius.Packet) (value string) {
	value, _ = AATHomeNetworkName_LookupString(p)
	return
}

func AATHomeNetworkName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeNetworkName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeNetworkName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATHomeNetworkName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATHomeNetworkName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 15, a)
}

func AATHomeNetworkName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 15, a)
}

func AATHomeNetworkName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 15)
}

type AlcatelAccessPriv uint32

const (
	AlcatelAccessPriv_Value_AlcatelReadPriv  AlcatelAccessPriv = 1
	AlcatelAccessPriv_Value_AlcatelWritePriv AlcatelAccessPriv = 2
	AlcatelAccessPriv_Value_AlcatelAdminPriv AlcatelAccessPriv = 3
)

var AlcatelAccessPriv_Strings = map[AlcatelAccessPriv]string{
	AlcatelAccessPriv_Value_AlcatelReadPriv:  "Alcatel-Read-Priv",
	AlcatelAccessPriv_Value_AlcatelWritePriv: "Alcatel-Write-Priv",
	AlcatelAccessPriv_Value_AlcatelAdminPriv: "Alcatel-Admin-Priv",
}

func (a AlcatelAccessPriv) String() string {
	if str, ok := AlcatelAccessPriv_Strings[a]; ok {
		return str
	}
	return "AlcatelAccessPriv(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AlcatelAccessPriv_Add(p *radius.Packet, value AlcatelAccessPriv) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 16, a)
}

func AlcatelAccessPriv_Get(p *radius.Packet) (value AlcatelAccessPriv) {
	value, _ = AlcatelAccessPriv_Lookup(p)
	return
}

func AlcatelAccessPriv_Gets(p *radius.Packet) (values []AlcatelAccessPriv, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AlcatelAccessPriv(i))
	}
	return
}

func AlcatelAccessPriv_Lookup(p *radius.Packet) (value AlcatelAccessPriv, err error) {
	a, ok := _Alcatel_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AlcatelAccessPriv(i)
	return
}

func AlcatelAccessPriv_Set(p *radius.Packet, value AlcatelAccessPriv) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 16, a)
}

func AlcatelAccessPriv_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 16)
}

func AlcatelNmsGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 20, a)
}

func AlcatelNmsGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 20, a)
}

func AlcatelNmsGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelNmsGroup_Lookup(p)
	return
}

func AlcatelNmsGroup_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelNmsGroup_LookupString(p)
	return
}

func AlcatelNmsGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelNmsGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelNmsGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 20, a)
}

func AlcatelNmsGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 20, a)
}

func AlcatelNmsGroup_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 20)
}

func AlcatelNmsFirstName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 21, a)
}

func AlcatelNmsFirstName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 21, a)
}

func AlcatelNmsFirstName_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelNmsFirstName_Lookup(p)
	return
}

func AlcatelNmsFirstName_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelNmsFirstName_LookupString(p)
	return
}

func AlcatelNmsFirstName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsFirstName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsFirstName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelNmsFirstName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelNmsFirstName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 21, a)
}

func AlcatelNmsFirstName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 21, a)
}

func AlcatelNmsFirstName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 21)
}

func AlcatelNmsLastName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 22, a)
}

func AlcatelNmsLastName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 22, a)
}

func AlcatelNmsLastName_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelNmsLastName_Lookup(p)
	return
}

func AlcatelNmsLastName_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelNmsLastName_LookupString(p)
	return
}

func AlcatelNmsLastName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsLastName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsLastName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelNmsLastName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelNmsLastName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 22, a)
}

func AlcatelNmsLastName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 22, a)
}

func AlcatelNmsLastName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 22)
}

func AlcatelNmsDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 23, a)
}

func AlcatelNmsDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 23, a)
}

func AlcatelNmsDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelNmsDescription_Lookup(p)
	return
}

func AlcatelNmsDescription_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelNmsDescription_LookupString(p)
	return
}

func AlcatelNmsDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelNmsDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelNmsDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelNmsDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 23, a)
}

func AlcatelNmsDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 23, a)
}

func AlcatelNmsDescription_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 23)
}

func AlcatelAccePrivR1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 33, a)
}

func AlcatelAccePrivR1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 33, a)
}

func AlcatelAccePrivR1_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivR1_Lookup(p)
	return
}

func AlcatelAccePrivR1_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivR1_LookupString(p)
	return
}

func AlcatelAccePrivR1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivR1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivR1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivR1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivR1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 33, a)
}

func AlcatelAccePrivR1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 33, a)
}

func AlcatelAccePrivR1_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 33)
}

func AlcatelAccePrivR2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 34, a)
}

func AlcatelAccePrivR2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 34, a)
}

func AlcatelAccePrivR2_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivR2_Lookup(p)
	return
}

func AlcatelAccePrivR2_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivR2_LookupString(p)
	return
}

func AlcatelAccePrivR2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivR2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivR2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivR2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivR2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 34, a)
}

func AlcatelAccePrivR2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 34, a)
}

func AlcatelAccePrivR2_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 34)
}

func AlcatelAccePrivW1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 35, a)
}

func AlcatelAccePrivW1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 35, a)
}

func AlcatelAccePrivW1_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivW1_Lookup(p)
	return
}

func AlcatelAccePrivW1_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivW1_LookupString(p)
	return
}

func AlcatelAccePrivW1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivW1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivW1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivW1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivW1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 35, a)
}

func AlcatelAccePrivW1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 35, a)
}

func AlcatelAccePrivW1_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 35)
}

func AlcatelAccePrivW2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 36, a)
}

func AlcatelAccePrivW2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 36, a)
}

func AlcatelAccePrivW2_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivW2_Lookup(p)
	return
}

func AlcatelAccePrivW2_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivW2_LookupString(p)
	return
}

func AlcatelAccePrivW2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivW2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivW2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivW2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivW2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 36, a)
}

func AlcatelAccePrivW2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 36, a)
}

func AlcatelAccePrivW2_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 36)
}

func AlcatelAccePrivG1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 37, a)
}

func AlcatelAccePrivG1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 37, a)
}

func AlcatelAccePrivG1_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivG1_Lookup(p)
	return
}

func AlcatelAccePrivG1_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivG1_LookupString(p)
	return
}

func AlcatelAccePrivG1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivG1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivG1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivG1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivG1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 37, a)
}

func AlcatelAccePrivG1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 37, a)
}

func AlcatelAccePrivG1_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 37)
}

func AlcatelAccePrivG2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 38, a)
}

func AlcatelAccePrivG2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 38, a)
}

func AlcatelAccePrivG2_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivG2_Lookup(p)
	return
}

func AlcatelAccePrivG2_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivG2_LookupString(p)
	return
}

func AlcatelAccePrivG2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivG2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivG2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivG2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivG2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 38, a)
}

func AlcatelAccePrivG2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 38, a)
}

func AlcatelAccePrivG2_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 38)
}

func AlcatelAccePrivFR1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 39, a)
}

func AlcatelAccePrivFR1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 39, a)
}

func AlcatelAccePrivFR1_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFR1_Lookup(p)
	return
}

func AlcatelAccePrivFR1_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFR1_LookupString(p)
	return
}

func AlcatelAccePrivFR1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFR1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFR1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 39, a)
}

func AlcatelAccePrivFR1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 39, a)
}

func AlcatelAccePrivFR1_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 39)
}

func AlcatelAccePrivFR2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 40, a)
}

func AlcatelAccePrivFR2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 40, a)
}

func AlcatelAccePrivFR2_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFR2_Lookup(p)
	return
}

func AlcatelAccePrivFR2_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFR2_LookupString(p)
	return
}

func AlcatelAccePrivFR2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFR2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFR2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 40, a)
}

func AlcatelAccePrivFR2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 40, a)
}

func AlcatelAccePrivFR2_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 40)
}

func AlcatelAccePrivFW1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 41, a)
}

func AlcatelAccePrivFW1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 41, a)
}

func AlcatelAccePrivFW1_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFW1_Lookup(p)
	return
}

func AlcatelAccePrivFW1_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFW1_LookupString(p)
	return
}

func AlcatelAccePrivFW1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFW1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFW1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 41, a)
}

func AlcatelAccePrivFW1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 41, a)
}

func AlcatelAccePrivFW1_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 41)
}

func AlcatelAccePrivFW2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 42, a)
}

func AlcatelAccePrivFW2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 42, a)
}

func AlcatelAccePrivFW2_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFW2_Lookup(p)
	return
}

func AlcatelAccePrivFW2_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFW2_LookupString(p)
	return
}

func AlcatelAccePrivFW2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 42) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 42) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFW2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFW2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 42, a)
}

func AlcatelAccePrivFW2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 42, a)
}

func AlcatelAccePrivFW2_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 42)
}

func AlcatelAccePrivFR3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 43, a)
}

func AlcatelAccePrivFR3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 43, a)
}

func AlcatelAccePrivFR3_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFR3_Lookup(p)
	return
}

func AlcatelAccePrivFR3_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFR3_LookupString(p)
	return
}

func AlcatelAccePrivFR3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFR3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFR3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 43, a)
}

func AlcatelAccePrivFR3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 43, a)
}

func AlcatelAccePrivFR3_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 43)
}

func AlcatelAccePrivFR4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 44, a)
}

func AlcatelAccePrivFR4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 44, a)
}

func AlcatelAccePrivFR4_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFR4_Lookup(p)
	return
}

func AlcatelAccePrivFR4_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFR4_LookupString(p)
	return
}

func AlcatelAccePrivFR4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFR4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFR4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFR4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 44, a)
}

func AlcatelAccePrivFR4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 44, a)
}

func AlcatelAccePrivFR4_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 44)
}

func AlcatelAccePrivFW3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 45, a)
}

func AlcatelAccePrivFW3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 45, a)
}

func AlcatelAccePrivFW3_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFW3_Lookup(p)
	return
}

func AlcatelAccePrivFW3_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFW3_LookupString(p)
	return
}

func AlcatelAccePrivFW3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFW3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFW3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 45, a)
}

func AlcatelAccePrivFW3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 45, a)
}

func AlcatelAccePrivFW3_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 45)
}

func AlcatelAccePrivFW4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 46, a)
}

func AlcatelAccePrivFW4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 46, a)
}

func AlcatelAccePrivFW4_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAccePrivFW4_Lookup(p)
	return
}

func AlcatelAccePrivFW4_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAccePrivFW4_LookupString(p)
	return
}

func AlcatelAccePrivFW4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAccePrivFW4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAccePrivFW4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAccePrivFW4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 46, a)
}

func AlcatelAccePrivFW4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 46, a)
}

func AlcatelAccePrivFW4_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 46)
}

func AlcatelPolicyList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 100, a)
}

func AlcatelPolicyList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 100, a)
}

func AlcatelPolicyList_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelPolicyList_Lookup(p)
	return
}

func AlcatelPolicyList_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelPolicyList_LookupString(p)
	return
}

func AlcatelPolicyList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelPolicyList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelPolicyList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelPolicyList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelPolicyList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 100, a)
}

func AlcatelPolicyList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 100, a)
}

func AlcatelPolicyList_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 100)
}

func AlcatelRedirectURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 101, a)
}

func AlcatelRedirectURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 101, a)
}

func AlcatelRedirectURL_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelRedirectURL_Lookup(p)
	return
}

func AlcatelRedirectURL_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelRedirectURL_LookupString(p)
	return
}

func AlcatelRedirectURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelRedirectURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelRedirectURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelRedirectURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelRedirectURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 101, a)
}

func AlcatelRedirectURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 101, a)
}

func AlcatelRedirectURL_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 101)
}

func AlcatelDeviceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 152, a)
}

func AlcatelDeviceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 152, a)
}

func AlcatelDeviceName_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelDeviceName_Lookup(p)
	return
}

func AlcatelDeviceName_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelDeviceName_LookupString(p)
	return
}

func AlcatelDeviceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 152) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDeviceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 152) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDeviceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelDeviceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelDeviceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 152, a)
}

func AlcatelDeviceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 152, a)
}

func AlcatelDeviceName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 152)
}

func AlcatelDeviceLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 153, a)
}

func AlcatelDeviceLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 153, a)
}

func AlcatelDeviceLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelDeviceLocation_Lookup(p)
	return
}

func AlcatelDeviceLocation_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelDeviceLocation_LookupString(p)
	return
}

func AlcatelDeviceLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 153) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDeviceLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 153) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDeviceLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelDeviceLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelDeviceLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 153, a)
}

func AlcatelDeviceLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 153, a)
}

func AlcatelDeviceLocation_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 153)
}

func AlcatelAPGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 154, a)
}

func AlcatelAPGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 154, a)
}

func AlcatelAPGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelAPGroup_Lookup(p)
	return
}

func AlcatelAPGroup_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelAPGroup_LookupString(p)
	return
}

func AlcatelAPGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 154) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAPGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 154) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelAPGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelAPGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelAPGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 154, a)
}

func AlcatelAPGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 154, a)
}

func AlcatelAPGroup_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 154)
}

func AlcatelDevicePsk_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 155, a)
}

func AlcatelDevicePsk_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 155, a)
}

func AlcatelDevicePsk_Get(p *radius.Packet) (value []byte) {
	value, _ = AlcatelDevicePsk_Lookup(p)
	return
}

func AlcatelDevicePsk_GetString(p *radius.Packet) (value string) {
	value, _ = AlcatelDevicePsk_LookupString(p)
	return
}

func AlcatelDevicePsk_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 155) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDevicePsk_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 155) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlcatelDevicePsk_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlcatelDevicePsk_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlcatelDevicePsk_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 155, a)
}

func AlcatelDevicePsk_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 155, a)
}

func AlcatelDevicePsk_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 155)
}
