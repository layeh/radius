// Code generated by radius-dict-gen. DO NOT EDIT.

package infinera

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	UserName_Type     radius.Type = 1
	UserPassword_Type radius.Type = 2
	ReplyMessage_Type radius.Type = 18
)

const (
	_Infinera_VendorID = 21296
)

func UserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(UserName_Type, a)
	return
}

func UserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(UserName_Type, a)
	return
}

func UserName_Get(p *radius.Packet) (value []byte) {
	value, _ = UserName_Lookup(p)
	return
}

func UserName_GetString(p *radius.Packet) (value string) {
	value, _ = UserName_LookupString(p)
	return
}

func UserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != UserName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != UserName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(UserName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(UserName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(UserName_Type, a)
	return
}

func UserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(UserName_Type, a)
	return
}

func UserName_Del(p *radius.Packet) {
	p.Attributes.Del(UserName_Type)
}

func UserPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewUserPassword(value, p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	p.Add(UserPassword_Type, a)
	return
}

func UserPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewUserPassword([]byte(value), p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	p.Add(UserPassword_Type, a)
	return
}

func UserPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = UserPassword_Lookup(p)
	return
}

func UserPassword_GetString(p *radius.Packet) (value string) {
	value, _ = UserPassword_LookupString(p)
	return
}

func UserPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != UserPassword_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.UserPassword(attr, p.Secret, p.Authenticator[:])
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != UserPassword_Type {
			continue
		}
		attr := avp.Attribute
		var up []byte
		up, err = radius.UserPassword(attr, p.Secret, p.Authenticator[:])
		if err == nil {
			i = string(up)
		}
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(UserPassword_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.UserPassword(a, p.Secret, p.Authenticator[:])
	return
}

func UserPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(UserPassword_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var b []byte
	b, err = radius.UserPassword(a, p.Secret, p.Authenticator[:])
	if err == nil {
		value = string(b)
	}
	return
}

func UserPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewUserPassword(value, p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	p.Set(UserPassword_Type, a)
	return
}

func UserPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewUserPassword([]byte(value), p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	p.Set(UserPassword_Type, a)
	return
}

func UserPassword_Del(p *radius.Packet) {
	p.Attributes.Del(UserPassword_Type)
}

func ReplyMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(ReplyMessage_Type, a)
	return
}

func ReplyMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(ReplyMessage_Type, a)
	return
}

func ReplyMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = ReplyMessage_Lookup(p)
	return
}

func ReplyMessage_GetString(p *radius.Packet) (value string) {
	value, _ = ReplyMessage_LookupString(p)
	return
}

func ReplyMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != ReplyMessage_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReplyMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != ReplyMessage_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReplyMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(ReplyMessage_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ReplyMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(ReplyMessage_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ReplyMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(ReplyMessage_Type, a)
	return
}

func ReplyMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(ReplyMessage_Type, a)
	return
}

func ReplyMessage_Del(p *radius.Packet) {
	p.Attributes.Del(ReplyMessage_Type)
}

func _Infinera_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Infinera_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Infinera_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Infinera_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Infinera_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Infinera_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Infinera_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Infinera_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Infinera_AddVendor(p, typ, attr)
}

func _Infinera_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Infinera_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type InfineraUserPrivSA uint32

const (
	InfineraUserPrivSA_Value_SANONPRIVILEGED InfineraUserPrivSA = 0
	InfineraUserPrivSA_Value_SAPRIVILEGED    InfineraUserPrivSA = 1
)

var InfineraUserPrivSA_Strings = map[InfineraUserPrivSA]string{
	InfineraUserPrivSA_Value_SANONPRIVILEGED: "SA-NONPRIVILEGED",
	InfineraUserPrivSA_Value_SAPRIVILEGED:    "SA-PRIVILEGED",
}

func (a InfineraUserPrivSA) String() string {
	if str, ok := InfineraUserPrivSA_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivSA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivSA_Add(p *radius.Packet, value InfineraUserPrivSA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 1, a)
}

func InfineraUserPrivSA_Get(p *radius.Packet) (value InfineraUserPrivSA) {
	value, _ = InfineraUserPrivSA_Lookup(p)
	return
}

func InfineraUserPrivSA_Gets(p *radius.Packet) (values []InfineraUserPrivSA, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivSA(i))
	}
	return
}

func InfineraUserPrivSA_Lookup(p *radius.Packet) (value InfineraUserPrivSA, err error) {
	a, ok := _Infinera_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivSA(i)
	return
}

func InfineraUserPrivSA_Set(p *radius.Packet, value InfineraUserPrivSA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 1, a)
}

func InfineraUserPrivSA_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 1)
}

type InfineraUserPrivNA uint32

const (
	InfineraUserPrivNA_Value_NANONPRIVILEGED InfineraUserPrivNA = 0
	InfineraUserPrivNA_Value_NAPRIVILEGED    InfineraUserPrivNA = 1
)

var InfineraUserPrivNA_Strings = map[InfineraUserPrivNA]string{
	InfineraUserPrivNA_Value_NANONPRIVILEGED: "NA-NONPRIVILEGED",
	InfineraUserPrivNA_Value_NAPRIVILEGED:    "NA-PRIVILEGED",
}

func (a InfineraUserPrivNA) String() string {
	if str, ok := InfineraUserPrivNA_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivNA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivNA_Add(p *radius.Packet, value InfineraUserPrivNA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 2, a)
}

func InfineraUserPrivNA_Get(p *radius.Packet) (value InfineraUserPrivNA) {
	value, _ = InfineraUserPrivNA_Lookup(p)
	return
}

func InfineraUserPrivNA_Gets(p *radius.Packet) (values []InfineraUserPrivNA, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivNA(i))
	}
	return
}

func InfineraUserPrivNA_Lookup(p *radius.Packet) (value InfineraUserPrivNA, err error) {
	a, ok := _Infinera_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivNA(i)
	return
}

func InfineraUserPrivNA_Set(p *radius.Packet, value InfineraUserPrivNA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 2, a)
}

func InfineraUserPrivNA_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 2)
}

type InfineraUserPrivNE uint32

const (
	InfineraUserPrivNE_Value_NENONPRIVILEGED InfineraUserPrivNE = 0
	InfineraUserPrivNE_Value_NEPRIVILEGED    InfineraUserPrivNE = 1
)

var InfineraUserPrivNE_Strings = map[InfineraUserPrivNE]string{
	InfineraUserPrivNE_Value_NENONPRIVILEGED: "NE-NONPRIVILEGED",
	InfineraUserPrivNE_Value_NEPRIVILEGED:    "NE-PRIVILEGED",
}

func (a InfineraUserPrivNE) String() string {
	if str, ok := InfineraUserPrivNE_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivNE(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivNE_Add(p *radius.Packet, value InfineraUserPrivNE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 3, a)
}

func InfineraUserPrivNE_Get(p *radius.Packet) (value InfineraUserPrivNE) {
	value, _ = InfineraUserPrivNE_Lookup(p)
	return
}

func InfineraUserPrivNE_Gets(p *radius.Packet) (values []InfineraUserPrivNE, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivNE(i))
	}
	return
}

func InfineraUserPrivNE_Lookup(p *radius.Packet) (value InfineraUserPrivNE, err error) {
	a, ok := _Infinera_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivNE(i)
	return
}

func InfineraUserPrivNE_Set(p *radius.Packet, value InfineraUserPrivNE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 3, a)
}

func InfineraUserPrivNE_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 3)
}

type InfineraUserPrivPR uint32

const (
	InfineraUserPrivPR_Value_PRNONPRIVILEGED InfineraUserPrivPR = 0
	InfineraUserPrivPR_Value_PRPRIVILEGED    InfineraUserPrivPR = 1
)

var InfineraUserPrivPR_Strings = map[InfineraUserPrivPR]string{
	InfineraUserPrivPR_Value_PRNONPRIVILEGED: "PR-NONPRIVILEGED",
	InfineraUserPrivPR_Value_PRPRIVILEGED:    "PR-PRIVILEGED",
}

func (a InfineraUserPrivPR) String() string {
	if str, ok := InfineraUserPrivPR_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivPR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivPR_Add(p *radius.Packet, value InfineraUserPrivPR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 4, a)
}

func InfineraUserPrivPR_Get(p *radius.Packet) (value InfineraUserPrivPR) {
	value, _ = InfineraUserPrivPR_Lookup(p)
	return
}

func InfineraUserPrivPR_Gets(p *radius.Packet) (values []InfineraUserPrivPR, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivPR(i))
	}
	return
}

func InfineraUserPrivPR_Lookup(p *radius.Packet) (value InfineraUserPrivPR, err error) {
	a, ok := _Infinera_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivPR(i)
	return
}

func InfineraUserPrivPR_Set(p *radius.Packet, value InfineraUserPrivPR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 4, a)
}

func InfineraUserPrivPR_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 4)
}

type InfineraUserPrivTT uint32

const (
	InfineraUserPrivTT_Value_TTNONPRIVILEGED InfineraUserPrivTT = 0
	InfineraUserPrivTT_Value_TTPRIVILEGED    InfineraUserPrivTT = 1
)

var InfineraUserPrivTT_Strings = map[InfineraUserPrivTT]string{
	InfineraUserPrivTT_Value_TTNONPRIVILEGED: "TT-NONPRIVILEGED",
	InfineraUserPrivTT_Value_TTPRIVILEGED:    "TT-PRIVILEGED",
}

func (a InfineraUserPrivTT) String() string {
	if str, ok := InfineraUserPrivTT_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivTT(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivTT_Add(p *radius.Packet, value InfineraUserPrivTT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 5, a)
}

func InfineraUserPrivTT_Get(p *radius.Packet) (value InfineraUserPrivTT) {
	value, _ = InfineraUserPrivTT_Lookup(p)
	return
}

func InfineraUserPrivTT_Gets(p *radius.Packet) (values []InfineraUserPrivTT, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivTT(i))
	}
	return
}

func InfineraUserPrivTT_Lookup(p *radius.Packet) (value InfineraUserPrivTT, err error) {
	a, ok := _Infinera_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivTT(i)
	return
}

func InfineraUserPrivTT_Set(p *radius.Packet, value InfineraUserPrivTT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 5, a)
}

func InfineraUserPrivTT_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 5)
}

type InfineraUserPrivMA uint32

const (
	InfineraUserPrivMA_Value_MANONPRIVILEGED InfineraUserPrivMA = 0
	InfineraUserPrivMA_Value_MAPRIVILEGED    InfineraUserPrivMA = 1
)

var InfineraUserPrivMA_Strings = map[InfineraUserPrivMA]string{
	InfineraUserPrivMA_Value_MANONPRIVILEGED: "MA-NONPRIVILEGED",
	InfineraUserPrivMA_Value_MAPRIVILEGED:    "MA-PRIVILEGED",
}

func (a InfineraUserPrivMA) String() string {
	if str, ok := InfineraUserPrivMA_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivMA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivMA_Add(p *radius.Packet, value InfineraUserPrivMA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 6, a)
}

func InfineraUserPrivMA_Get(p *radius.Packet) (value InfineraUserPrivMA) {
	value, _ = InfineraUserPrivMA_Lookup(p)
	return
}

func InfineraUserPrivMA_Gets(p *radius.Packet) (values []InfineraUserPrivMA, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivMA(i))
	}
	return
}

func InfineraUserPrivMA_Lookup(p *radius.Packet) (value InfineraUserPrivMA, err error) {
	a, ok := _Infinera_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivMA(i)
	return
}

func InfineraUserPrivMA_Set(p *radius.Packet, value InfineraUserPrivMA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 6, a)
}

func InfineraUserPrivMA_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 6)
}

type InfineraUserPrivRA uint32

const (
	InfineraUserPrivRA_Value_RANONPRIVILEGED InfineraUserPrivRA = 0
	InfineraUserPrivRA_Value_RAPRIVILEGED    InfineraUserPrivRA = 1
)

var InfineraUserPrivRA_Strings = map[InfineraUserPrivRA]string{
	InfineraUserPrivRA_Value_RANONPRIVILEGED: "RA-NONPRIVILEGED",
	InfineraUserPrivRA_Value_RAPRIVILEGED:    "RA-PRIVILEGED",
}

func (a InfineraUserPrivRA) String() string {
	if str, ok := InfineraUserPrivRA_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivRA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivRA_Add(p *radius.Packet, value InfineraUserPrivRA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 7, a)
}

func InfineraUserPrivRA_Get(p *radius.Packet) (value InfineraUserPrivRA) {
	value, _ = InfineraUserPrivRA_Lookup(p)
	return
}

func InfineraUserPrivRA_Gets(p *radius.Packet) (values []InfineraUserPrivRA, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivRA(i))
	}
	return
}

func InfineraUserPrivRA_Lookup(p *radius.Packet) (value InfineraUserPrivRA, err error) {
	a, ok := _Infinera_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivRA(i)
	return
}

func InfineraUserPrivRA_Set(p *radius.Packet, value InfineraUserPrivRA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 7, a)
}

func InfineraUserPrivRA_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 7)
}

type InfineraUserPrivEA uint32

const (
	InfineraUserPrivEA_Value_EANONPRIVILEGED InfineraUserPrivEA = 0
	InfineraUserPrivEA_Value_EAPRIVILEGED    InfineraUserPrivEA = 1
)

var InfineraUserPrivEA_Strings = map[InfineraUserPrivEA]string{
	InfineraUserPrivEA_Value_EANONPRIVILEGED: "EA-NONPRIVILEGED",
	InfineraUserPrivEA_Value_EAPRIVILEGED:    "EA-PRIVILEGED",
}

func (a InfineraUserPrivEA) String() string {
	if str, ok := InfineraUserPrivEA_Strings[a]; ok {
		return str
	}
	return "InfineraUserPrivEA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserPrivEA_Add(p *radius.Packet, value InfineraUserPrivEA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 8, a)
}

func InfineraUserPrivEA_Get(p *radius.Packet) (value InfineraUserPrivEA) {
	value, _ = InfineraUserPrivEA_Lookup(p)
	return
}

func InfineraUserPrivEA_Gets(p *radius.Packet) (values []InfineraUserPrivEA, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserPrivEA(i))
	}
	return
}

func InfineraUserPrivEA_Lookup(p *radius.Packet) (value InfineraUserPrivEA, err error) {
	a, ok := _Infinera_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserPrivEA(i)
	return
}

func InfineraUserPrivEA_Set(p *radius.Packet, value InfineraUserPrivEA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 8, a)
}

func InfineraUserPrivEA_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 8)
}

func InfineraUserAdminDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 100, a)
}

func InfineraUserAdminDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 100, a)
}

func InfineraUserAdminDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraUserAdminDomain_Lookup(p)
	return
}

func InfineraUserAdminDomain_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraUserAdminDomain_LookupString(p)
	return
}

func InfineraUserAdminDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserAdminDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserAdminDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraUserAdminDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraUserAdminDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 100, a)
}

func InfineraUserAdminDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 100, a)
}

func InfineraUserAdminDomain_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 100)
}

type InfineraUserMaxConcurrentSession uint32

var InfineraUserMaxConcurrentSession_Strings = map[InfineraUserMaxConcurrentSession]string{}

func (a InfineraUserMaxConcurrentSession) String() string {
	if str, ok := InfineraUserMaxConcurrentSession_Strings[a]; ok {
		return str
	}
	return "InfineraUserMaxConcurrentSession(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMaxConcurrentSession_Add(p *radius.Packet, value InfineraUserMaxConcurrentSession) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 101, a)
}

func InfineraUserMaxConcurrentSession_Get(p *radius.Packet) (value InfineraUserMaxConcurrentSession) {
	value, _ = InfineraUserMaxConcurrentSession_Lookup(p)
	return
}

func InfineraUserMaxConcurrentSession_Gets(p *radius.Packet) (values []InfineraUserMaxConcurrentSession, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMaxConcurrentSession(i))
	}
	return
}

func InfineraUserMaxConcurrentSession_Lookup(p *radius.Packet) (value InfineraUserMaxConcurrentSession, err error) {
	a, ok := _Infinera_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMaxConcurrentSession(i)
	return
}

func InfineraUserMaxConcurrentSession_Set(p *radius.Packet, value InfineraUserMaxConcurrentSession) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 101, a)
}

func InfineraUserMaxConcurrentSession_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 101)
}

type InfineraUserAllowedTimezoneConfig uint32

const (
	InfineraUserAllowedTimezoneConfig_Value_TIMEZONECONFIGNOTALLOW InfineraUserAllowedTimezoneConfig = 0
	InfineraUserAllowedTimezoneConfig_Value_TIMEZONECONFIGALLOW    InfineraUserAllowedTimezoneConfig = 1
)

var InfineraUserAllowedTimezoneConfig_Strings = map[InfineraUserAllowedTimezoneConfig]string{
	InfineraUserAllowedTimezoneConfig_Value_TIMEZONECONFIGNOTALLOW: "TIMEZONE-CONFIG-NOT-ALLOW",
	InfineraUserAllowedTimezoneConfig_Value_TIMEZONECONFIGALLOW:    "TIMEZONE-CONFIG-ALLOW",
}

func (a InfineraUserAllowedTimezoneConfig) String() string {
	if str, ok := InfineraUserAllowedTimezoneConfig_Strings[a]; ok {
		return str
	}
	return "InfineraUserAllowedTimezoneConfig(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserAllowedTimezoneConfig_Add(p *radius.Packet, value InfineraUserAllowedTimezoneConfig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 102, a)
}

func InfineraUserAllowedTimezoneConfig_Get(p *radius.Packet) (value InfineraUserAllowedTimezoneConfig) {
	value, _ = InfineraUserAllowedTimezoneConfig_Lookup(p)
	return
}

func InfineraUserAllowedTimezoneConfig_Gets(p *radius.Packet) (values []InfineraUserAllowedTimezoneConfig, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserAllowedTimezoneConfig(i))
	}
	return
}

func InfineraUserAllowedTimezoneConfig_Lookup(p *radius.Packet) (value InfineraUserAllowedTimezoneConfig, err error) {
	a, ok := _Infinera_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserAllowedTimezoneConfig(i)
	return
}

func InfineraUserAllowedTimezoneConfig_Set(p *radius.Packet, value InfineraUserAllowedTimezoneConfig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 102, a)
}

func InfineraUserAllowedTimezoneConfig_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 102)
}

func InfineraUserTimeZone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 103, a)
}

func InfineraUserTimeZone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 103, a)
}

func InfineraUserTimeZone_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraUserTimeZone_Lookup(p)
	return
}

func InfineraUserTimeZone_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraUserTimeZone_LookupString(p)
	return
}

func InfineraUserTimeZone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserTimeZone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserTimeZone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraUserTimeZone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraUserTimeZone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 103, a)
}

func InfineraUserTimeZone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 103, a)
}

func InfineraUserTimeZone_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 103)
}

func InfineraUserEmailID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 110, a)
}

func InfineraUserEmailID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 110, a)
}

func InfineraUserEmailID_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraUserEmailID_Lookup(p)
	return
}

func InfineraUserEmailID_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraUserEmailID_LookupString(p)
	return
}

func InfineraUserEmailID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraUserEmailID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraUserEmailID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 110, a)
}

func InfineraUserEmailID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 110, a)
}

func InfineraUserEmailID_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 110)
}

type InfineraUserEmailNotification uint32

const (
	InfineraUserEmailNotification_Value_EMAILNOTIFICATIONDISABLE InfineraUserEmailNotification = 0
	InfineraUserEmailNotification_Value_EMAILNOTIFICATIONENABLE  InfineraUserEmailNotification = 1
)

var InfineraUserEmailNotification_Strings = map[InfineraUserEmailNotification]string{
	InfineraUserEmailNotification_Value_EMAILNOTIFICATIONDISABLE: "EMAIL-NOTIFICATION-DISABLE",
	InfineraUserEmailNotification_Value_EMAILNOTIFICATIONENABLE:  "EMAIL-NOTIFICATION-ENABLE",
}

func (a InfineraUserEmailNotification) String() string {
	if str, ok := InfineraUserEmailNotification_Strings[a]; ok {
		return str
	}
	return "InfineraUserEmailNotification(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserEmailNotification_Add(p *radius.Packet, value InfineraUserEmailNotification) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 111, a)
}

func InfineraUserEmailNotification_Get(p *radius.Packet) (value InfineraUserEmailNotification) {
	value, _ = InfineraUserEmailNotification_Lookup(p)
	return
}

func InfineraUserEmailNotification_Gets(p *radius.Packet) (values []InfineraUserEmailNotification, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserEmailNotification(i))
	}
	return
}

func InfineraUserEmailNotification_Lookup(p *radius.Packet) (value InfineraUserEmailNotification, err error) {
	a, ok := _Infinera_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserEmailNotification(i)
	return
}

func InfineraUserEmailNotification_Set(p *radius.Packet, value InfineraUserEmailNotification) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 111, a)
}

func InfineraUserEmailNotification_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 111)
}

type InfineraUserEmailAlarmType uint32

const (
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPEALL   InfineraUserEmailAlarmType = 0
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPENEW   InfineraUserEmailAlarmType = 1
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPECLEAR InfineraUserEmailAlarmType = 2
)

var InfineraUserEmailAlarmType_Strings = map[InfineraUserEmailAlarmType]string{
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPEALL:   "EMAIL-ALARM-TYPE-ALL",
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPENEW:   "EMAIL-ALARM-TYPE-NEW",
	InfineraUserEmailAlarmType_Value_EMAILALARMTYPECLEAR: "EMAIL-ALARM-TYPE-CLEAR",
}

func (a InfineraUserEmailAlarmType) String() string {
	if str, ok := InfineraUserEmailAlarmType_Strings[a]; ok {
		return str
	}
	return "InfineraUserEmailAlarmType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserEmailAlarmType_Add(p *radius.Packet, value InfineraUserEmailAlarmType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 112, a)
}

func InfineraUserEmailAlarmType_Get(p *radius.Packet) (value InfineraUserEmailAlarmType) {
	value, _ = InfineraUserEmailAlarmType_Lookup(p)
	return
}

func InfineraUserEmailAlarmType_Gets(p *radius.Packet) (values []InfineraUserEmailAlarmType, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserEmailAlarmType(i))
	}
	return
}

func InfineraUserEmailAlarmType_Lookup(p *radius.Packet) (value InfineraUserEmailAlarmType, err error) {
	a, ok := _Infinera_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserEmailAlarmType(i)
	return
}

func InfineraUserEmailAlarmType_Set(p *radius.Packet, value InfineraUserEmailAlarmType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 112, a)
}

func InfineraUserEmailAlarmType_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 112)
}

func InfineraUserEmailFilterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 113, a)
}

func InfineraUserEmailFilterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 113, a)
}

func InfineraUserEmailFilterName_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraUserEmailFilterName_Lookup(p)
	return
}

func InfineraUserEmailFilterName_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraUserEmailFilterName_LookupString(p)
	return
}

func InfineraUserEmailFilterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailFilterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailFilterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraUserEmailFilterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraUserEmailFilterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 113, a)
}

func InfineraUserEmailFilterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 113, a)
}

func InfineraUserEmailFilterName_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 113)
}

func InfineraUserEmailAdminDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 114, a)
}

func InfineraUserEmailAdminDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 114, a)
}

func InfineraUserEmailAdminDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraUserEmailAdminDomain_Lookup(p)
	return
}

func InfineraUserEmailAdminDomain_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraUserEmailAdminDomain_LookupString(p)
	return
}

func InfineraUserEmailAdminDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailAdminDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraUserEmailAdminDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraUserEmailAdminDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraUserEmailAdminDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 114, a)
}

func InfineraUserEmailAdminDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 114, a)
}

func InfineraUserEmailAdminDomain_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 114)
}

type InfineraUserSessionTimeout uint32

var InfineraUserSessionTimeout_Strings = map[InfineraUserSessionTimeout]string{}

func (a InfineraUserSessionTimeout) String() string {
	if str, ok := InfineraUserSessionTimeout_Strings[a]; ok {
		return str
	}
	return "InfineraUserSessionTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserSessionTimeout_Add(p *radius.Packet, value InfineraUserSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 17, a)
}

func InfineraUserSessionTimeout_Get(p *radius.Packet) (value InfineraUserSessionTimeout) {
	value, _ = InfineraUserSessionTimeout_Lookup(p)
	return
}

func InfineraUserSessionTimeout_Gets(p *radius.Packet) (values []InfineraUserSessionTimeout, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserSessionTimeout(i))
	}
	return
}

func InfineraUserSessionTimeout_Lookup(p *radius.Packet) (value InfineraUserSessionTimeout, err error) {
	a, ok := _Infinera_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserSessionTimeout(i)
	return
}

func InfineraUserSessionTimeout_Set(p *radius.Packet, value InfineraUserSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 17, a)
}

func InfineraUserSessionTimeout_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 17)
}

type InfineraUserLockedOut uint32

var InfineraUserLockedOut_Strings = map[InfineraUserLockedOut]string{}

func (a InfineraUserLockedOut) String() string {
	if str, ok := InfineraUserLockedOut_Strings[a]; ok {
		return str
	}
	return "InfineraUserLockedOut(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserLockedOut_Add(p *radius.Packet, value InfineraUserLockedOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 19, a)
}

func InfineraUserLockedOut_Get(p *radius.Packet) (value InfineraUserLockedOut) {
	value, _ = InfineraUserLockedOut_Lookup(p)
	return
}

func InfineraUserLockedOut_Gets(p *radius.Packet) (values []InfineraUserLockedOut, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserLockedOut(i))
	}
	return
}

func InfineraUserLockedOut_Lookup(p *radius.Packet) (value InfineraUserLockedOut, err error) {
	a, ok := _Infinera_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserLockedOut(i)
	return
}

func InfineraUserLockedOut_Set(p *radius.Packet, value InfineraUserLockedOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 19, a)
}

func InfineraUserLockedOut_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 19)
}

type InfineraUserCanUseResSession uint32

const (
	InfineraUserCanUseResSession_Value_CANNOTUSERESSESSION InfineraUserCanUseResSession = 0
	InfineraUserCanUseResSession_Value_CANUSERESSESSION    InfineraUserCanUseResSession = 1
)

var InfineraUserCanUseResSession_Strings = map[InfineraUserCanUseResSession]string{
	InfineraUserCanUseResSession_Value_CANNOTUSERESSESSION: "CANNOT-USE-RES-SESSION",
	InfineraUserCanUseResSession_Value_CANUSERESSESSION:    "CAN-USE-RES-SESSION",
}

func (a InfineraUserCanUseResSession) String() string {
	if str, ok := InfineraUserCanUseResSession_Strings[a]; ok {
		return str
	}
	return "InfineraUserCanUseResSession(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserCanUseResSession_Add(p *radius.Packet, value InfineraUserCanUseResSession) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 20, a)
}

func InfineraUserCanUseResSession_Get(p *radius.Packet) (value InfineraUserCanUseResSession) {
	value, _ = InfineraUserCanUseResSession_Lookup(p)
	return
}

func InfineraUserCanUseResSession_Gets(p *radius.Packet) (values []InfineraUserCanUseResSession, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserCanUseResSession(i))
	}
	return
}

func InfineraUserCanUseResSession_Lookup(p *radius.Packet) (value InfineraUserCanUseResSession, err error) {
	a, ok := _Infinera_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserCanUseResSession(i)
	return
}

func InfineraUserCanUseResSession_Set(p *radius.Packet, value InfineraUserCanUseResSession) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 20, a)
}

func InfineraUserCanUseResSession_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 20)
}

type InfineraUserMgmtTypeEMS uint32

const (
	InfineraUserMgmtTypeEMS_Value_MGMTTYPEEMSDISALLOWED InfineraUserMgmtTypeEMS = 0
	InfineraUserMgmtTypeEMS_Value_MGMTTYPEEMSALLOWED    InfineraUserMgmtTypeEMS = 1
)

var InfineraUserMgmtTypeEMS_Strings = map[InfineraUserMgmtTypeEMS]string{
	InfineraUserMgmtTypeEMS_Value_MGMTTYPEEMSDISALLOWED: "MGMTTYPE-EMS-DISALLOWED",
	InfineraUserMgmtTypeEMS_Value_MGMTTYPEEMSALLOWED:    "MGMTTYPE-EMS-ALLOWED",
}

func (a InfineraUserMgmtTypeEMS) String() string {
	if str, ok := InfineraUserMgmtTypeEMS_Strings[a]; ok {
		return str
	}
	return "InfineraUserMgmtTypeEMS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMgmtTypeEMS_Add(p *radius.Packet, value InfineraUserMgmtTypeEMS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 33, a)
}

func InfineraUserMgmtTypeEMS_Get(p *radius.Packet) (value InfineraUserMgmtTypeEMS) {
	value, _ = InfineraUserMgmtTypeEMS_Lookup(p)
	return
}

func InfineraUserMgmtTypeEMS_Gets(p *radius.Packet) (values []InfineraUserMgmtTypeEMS, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMgmtTypeEMS(i))
	}
	return
}

func InfineraUserMgmtTypeEMS_Lookup(p *radius.Packet) (value InfineraUserMgmtTypeEMS, err error) {
	a, ok := _Infinera_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMgmtTypeEMS(i)
	return
}

func InfineraUserMgmtTypeEMS_Set(p *radius.Packet, value InfineraUserMgmtTypeEMS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 33, a)
}

func InfineraUserMgmtTypeEMS_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 33)
}

type InfineraUserMgmtTypeGNM uint32

const (
	InfineraUserMgmtTypeGNM_Value_MGMTTYPEGNMDISALLOWED InfineraUserMgmtTypeGNM = 0
	InfineraUserMgmtTypeGNM_Value_MGMTTYPEGNMALLOWED    InfineraUserMgmtTypeGNM = 1
)

var InfineraUserMgmtTypeGNM_Strings = map[InfineraUserMgmtTypeGNM]string{
	InfineraUserMgmtTypeGNM_Value_MGMTTYPEGNMDISALLOWED: "MGMTTYPE-GNM-DISALLOWED",
	InfineraUserMgmtTypeGNM_Value_MGMTTYPEGNMALLOWED:    "MGMTTYPE-GNM-ALLOWED",
}

func (a InfineraUserMgmtTypeGNM) String() string {
	if str, ok := InfineraUserMgmtTypeGNM_Strings[a]; ok {
		return str
	}
	return "InfineraUserMgmtTypeGNM(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMgmtTypeGNM_Add(p *radius.Packet, value InfineraUserMgmtTypeGNM) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 34, a)
}

func InfineraUserMgmtTypeGNM_Get(p *radius.Packet) (value InfineraUserMgmtTypeGNM) {
	value, _ = InfineraUserMgmtTypeGNM_Lookup(p)
	return
}

func InfineraUserMgmtTypeGNM_Gets(p *radius.Packet) (values []InfineraUserMgmtTypeGNM, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMgmtTypeGNM(i))
	}
	return
}

func InfineraUserMgmtTypeGNM_Lookup(p *radius.Packet) (value InfineraUserMgmtTypeGNM, err error) {
	a, ok := _Infinera_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMgmtTypeGNM(i)
	return
}

func InfineraUserMgmtTypeGNM_Set(p *radius.Packet, value InfineraUserMgmtTypeGNM) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 34, a)
}

func InfineraUserMgmtTypeGNM_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 34)
}

type InfineraUserMgmtTypeTL1 uint32

const (
	InfineraUserMgmtTypeTL1_Value_MGMTTYPETL1DISALLOWED InfineraUserMgmtTypeTL1 = 0
	InfineraUserMgmtTypeTL1_Value_MGMTTYPETL1ALLOWED    InfineraUserMgmtTypeTL1 = 1
)

var InfineraUserMgmtTypeTL1_Strings = map[InfineraUserMgmtTypeTL1]string{
	InfineraUserMgmtTypeTL1_Value_MGMTTYPETL1DISALLOWED: "MGMTTYPE-TL1-DISALLOWED",
	InfineraUserMgmtTypeTL1_Value_MGMTTYPETL1ALLOWED:    "MGMTTYPE-TL1-ALLOWED",
}

func (a InfineraUserMgmtTypeTL1) String() string {
	if str, ok := InfineraUserMgmtTypeTL1_Strings[a]; ok {
		return str
	}
	return "InfineraUserMgmtTypeTL1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMgmtTypeTL1_Add(p *radius.Packet, value InfineraUserMgmtTypeTL1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 35, a)
}

func InfineraUserMgmtTypeTL1_Get(p *radius.Packet) (value InfineraUserMgmtTypeTL1) {
	value, _ = InfineraUserMgmtTypeTL1_Lookup(p)
	return
}

func InfineraUserMgmtTypeTL1_Gets(p *radius.Packet) (values []InfineraUserMgmtTypeTL1, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMgmtTypeTL1(i))
	}
	return
}

func InfineraUserMgmtTypeTL1_Lookup(p *radius.Packet) (value InfineraUserMgmtTypeTL1, err error) {
	a, ok := _Infinera_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMgmtTypeTL1(i)
	return
}

func InfineraUserMgmtTypeTL1_Set(p *radius.Packet, value InfineraUserMgmtTypeTL1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 35, a)
}

func InfineraUserMgmtTypeTL1_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 35)
}

type InfineraUserMgmtTypeCLI uint32

const (
	InfineraUserMgmtTypeCLI_Value_MGMTTYPECLIDISALLOWED InfineraUserMgmtTypeCLI = 0
	InfineraUserMgmtTypeCLI_Value_MGMTTYPECLIALLOWED    InfineraUserMgmtTypeCLI = 1
)

var InfineraUserMgmtTypeCLI_Strings = map[InfineraUserMgmtTypeCLI]string{
	InfineraUserMgmtTypeCLI_Value_MGMTTYPECLIDISALLOWED: "MGMTTYPE-CLI-DISALLOWED",
	InfineraUserMgmtTypeCLI_Value_MGMTTYPECLIALLOWED:    "MGMTTYPE-CLI-ALLOWED",
}

func (a InfineraUserMgmtTypeCLI) String() string {
	if str, ok := InfineraUserMgmtTypeCLI_Strings[a]; ok {
		return str
	}
	return "InfineraUserMgmtTypeCLI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMgmtTypeCLI_Add(p *radius.Packet, value InfineraUserMgmtTypeCLI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 36, a)
}

func InfineraUserMgmtTypeCLI_Get(p *radius.Packet) (value InfineraUserMgmtTypeCLI) {
	value, _ = InfineraUserMgmtTypeCLI_Lookup(p)
	return
}

func InfineraUserMgmtTypeCLI_Gets(p *radius.Packet) (values []InfineraUserMgmtTypeCLI, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMgmtTypeCLI(i))
	}
	return
}

func InfineraUserMgmtTypeCLI_Lookup(p *radius.Packet) (value InfineraUserMgmtTypeCLI, err error) {
	a, ok := _Infinera_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMgmtTypeCLI(i)
	return
}

func InfineraUserMgmtTypeCLI_Set(p *radius.Packet, value InfineraUserMgmtTypeCLI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 36, a)
}

func InfineraUserMgmtTypeCLI_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 36)
}

type InfineraUserMgmtTypeNETCONF uint32

const (
	InfineraUserMgmtTypeNETCONF_Value_MGMTTYPENETCONFDISALLOWED InfineraUserMgmtTypeNETCONF = 0
	InfineraUserMgmtTypeNETCONF_Value_MGMTTYPENETCONFALLOWED    InfineraUserMgmtTypeNETCONF = 1
)

var InfineraUserMgmtTypeNETCONF_Strings = map[InfineraUserMgmtTypeNETCONF]string{
	InfineraUserMgmtTypeNETCONF_Value_MGMTTYPENETCONFDISALLOWED: "MGMTTYPE-NETCONF-DISALLOWED",
	InfineraUserMgmtTypeNETCONF_Value_MGMTTYPENETCONFALLOWED:    "MGMTTYPE-NETCONF-ALLOWED",
}

func (a InfineraUserMgmtTypeNETCONF) String() string {
	if str, ok := InfineraUserMgmtTypeNETCONF_Strings[a]; ok {
		return str
	}
	return "InfineraUserMgmtTypeNETCONF(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraUserMgmtTypeNETCONF_Add(p *radius.Packet, value InfineraUserMgmtTypeNETCONF) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 37, a)
}

func InfineraUserMgmtTypeNETCONF_Get(p *radius.Packet) (value InfineraUserMgmtTypeNETCONF) {
	value, _ = InfineraUserMgmtTypeNETCONF_Lookup(p)
	return
}

func InfineraUserMgmtTypeNETCONF_Gets(p *radius.Packet) (values []InfineraUserMgmtTypeNETCONF, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraUserMgmtTypeNETCONF(i))
	}
	return
}

func InfineraUserMgmtTypeNETCONF_Lookup(p *radius.Packet) (value InfineraUserMgmtTypeNETCONF, err error) {
	a, ok := _Infinera_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraUserMgmtTypeNETCONF(i)
	return
}

func InfineraUserMgmtTypeNETCONF_Set(p *radius.Packet, value InfineraUserMgmtTypeNETCONF) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 37, a)
}

func InfineraUserMgmtTypeNETCONF_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 37)
}

func InfineraRsvdStrAttribute1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 240, a)
}

func InfineraRsvdStrAttribute1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 240, a)
}

func InfineraRsvdStrAttribute1_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraRsvdStrAttribute1_Lookup(p)
	return
}

func InfineraRsvdStrAttribute1_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraRsvdStrAttribute1_LookupString(p)
	return
}

func InfineraRsvdStrAttribute1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 240) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraRsvdStrAttribute1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 240) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraRsvdStrAttribute1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraRsvdStrAttribute1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraRsvdStrAttribute1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 240, a)
}

func InfineraRsvdStrAttribute1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 240, a)
}

func InfineraRsvdStrAttribute1_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 240)
}

func InfineraRsvdStrAttribute2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 241, a)
}

func InfineraRsvdStrAttribute2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_AddVendor(p, 241, a)
}

func InfineraRsvdStrAttribute2_Get(p *radius.Packet) (value []byte) {
	value, _ = InfineraRsvdStrAttribute2_Lookup(p)
	return
}

func InfineraRsvdStrAttribute2_GetString(p *radius.Packet) (value string) {
	value, _ = InfineraRsvdStrAttribute2_LookupString(p)
	return
}

func InfineraRsvdStrAttribute2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Infinera_GetsVendor(p, 241) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraRsvdStrAttribute2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Infinera_GetsVendor(p, 241) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func InfineraRsvdStrAttribute2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Infinera_LookupVendor(p, 241)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func InfineraRsvdStrAttribute2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Infinera_LookupVendor(p, 241)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func InfineraRsvdStrAttribute2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 241, a)
}

func InfineraRsvdStrAttribute2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Infinera_SetVendor(p, 241, a)
}

func InfineraRsvdStrAttribute2_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 241)
}

type InfineraRsvdIntAttribute1 uint32

const (
	InfineraRsvdIntAttribute1_Value_INFINERA InfineraRsvdIntAttribute1 = 1
)

var InfineraRsvdIntAttribute1_Strings = map[InfineraRsvdIntAttribute1]string{
	InfineraRsvdIntAttribute1_Value_INFINERA: "INFINERA",
}

func (a InfineraRsvdIntAttribute1) String() string {
	if str, ok := InfineraRsvdIntAttribute1_Strings[a]; ok {
		return str
	}
	return "InfineraRsvdIntAttribute1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraRsvdIntAttribute1_Add(p *radius.Packet, value InfineraRsvdIntAttribute1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 249, a)
}

func InfineraRsvdIntAttribute1_Get(p *radius.Packet) (value InfineraRsvdIntAttribute1) {
	value, _ = InfineraRsvdIntAttribute1_Lookup(p)
	return
}

func InfineraRsvdIntAttribute1_Gets(p *radius.Packet) (values []InfineraRsvdIntAttribute1, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 249) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraRsvdIntAttribute1(i))
	}
	return
}

func InfineraRsvdIntAttribute1_Lookup(p *radius.Packet) (value InfineraRsvdIntAttribute1, err error) {
	a, ok := _Infinera_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraRsvdIntAttribute1(i)
	return
}

func InfineraRsvdIntAttribute1_Set(p *radius.Packet, value InfineraRsvdIntAttribute1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 249, a)
}

func InfineraRsvdIntAttribute1_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 249)
}

type InfineraRsvdIntAttribute2 uint32

var InfineraRsvdIntAttribute2_Strings = map[InfineraRsvdIntAttribute2]string{}

func (a InfineraRsvdIntAttribute2) String() string {
	if str, ok := InfineraRsvdIntAttribute2_Strings[a]; ok {
		return str
	}
	return "InfineraRsvdIntAttribute2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func InfineraRsvdIntAttribute2_Add(p *radius.Packet, value InfineraRsvdIntAttribute2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_AddVendor(p, 250, a)
}

func InfineraRsvdIntAttribute2_Get(p *radius.Packet) (value InfineraRsvdIntAttribute2) {
	value, _ = InfineraRsvdIntAttribute2_Lookup(p)
	return
}

func InfineraRsvdIntAttribute2_Gets(p *radius.Packet) (values []InfineraRsvdIntAttribute2, err error) {
	var i uint32
	for _, attr := range _Infinera_GetsVendor(p, 250) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, InfineraRsvdIntAttribute2(i))
	}
	return
}

func InfineraRsvdIntAttribute2_Lookup(p *radius.Packet) (value InfineraRsvdIntAttribute2, err error) {
	a, ok := _Infinera_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = InfineraRsvdIntAttribute2(i)
	return
}

func InfineraRsvdIntAttribute2_Set(p *radius.Packet, value InfineraRsvdIntAttribute2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Infinera_SetVendor(p, 250, a)
}

func InfineraRsvdIntAttribute2_Del(p *radius.Packet) {
	_Infinera_DelVendor(p, 250)
}
