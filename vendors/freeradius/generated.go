// Code generated by radius-dict-gen. DO NOT EDIT.

package freeradius

import (
	"net"
	"strconv"
	"time"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_FreeRADIUS_VendorID = 11344
)

func _FreeRADIUS_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_FreeRADIUS_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _FreeRADIUS_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _FreeRADIUS_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _FreeRADIUS_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _FreeRADIUS_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _FreeRADIUS_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _FreeRADIUS_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _FreeRADIUS_AddVendor(p, typ, attr)
}

func _FreeRADIUS_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _FreeRADIUS_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ProxiedTo_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 1, a)
}

func ProxiedTo_Get(p *radius.Packet) (value net.IP) {
	value, _ = ProxiedTo_Lookup(p)
	return
}

func ProxiedTo_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _FreeRADIUS_GetsVendor(p, 1) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProxiedTo_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ProxiedTo_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 1, a)
}

func ProxiedTo_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 1)
}

func SessionStartTime_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 2, a)
}

func SessionStartTime_Get(p *radius.Packet) (value time.Time) {
	value, _ = SessionStartTime_Lookup(p)
	return
}

func SessionStartTime_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 2) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionStartTime_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func SessionStartTime_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 2, a)
}

func SessionStartTime_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 2)
}

type StatisticsType uint32

const (
	StatisticsType_Value_None                StatisticsType = 0
	StatisticsType_Value_Authentication      StatisticsType = 1
	StatisticsType_Value_Accounting          StatisticsType = 2
	StatisticsType_Value_AuthAcct            StatisticsType = 3
	StatisticsType_Value_ProxyAuthentication StatisticsType = 4
	StatisticsType_Value_ProxyAccounting     StatisticsType = 8
	StatisticsType_Value_ProxyAuthAcct       StatisticsType = 12
	StatisticsType_Value_Internal            StatisticsType = 16
	StatisticsType_Value_All                 StatisticsType = 31
	StatisticsType_Value_Client              StatisticsType = 32
	StatisticsType_Value_Server              StatisticsType = 64
	StatisticsType_Value_HomeServer          StatisticsType = 128
)

var StatisticsType_Strings = map[StatisticsType]string{
	StatisticsType_Value_None:                "None",
	StatisticsType_Value_Authentication:      "Authentication",
	StatisticsType_Value_Accounting:          "Accounting",
	StatisticsType_Value_AuthAcct:            "Auth-Acct",
	StatisticsType_Value_ProxyAuthentication: "Proxy-Authentication",
	StatisticsType_Value_ProxyAccounting:     "Proxy-Accounting",
	StatisticsType_Value_ProxyAuthAcct:       "Proxy-Auth-Acct",
	StatisticsType_Value_Internal:            "Internal",
	StatisticsType_Value_All:                 "All",
	StatisticsType_Value_Client:              "Client",
	StatisticsType_Value_Server:              "Server",
	StatisticsType_Value_HomeServer:          "Home-Server",
}

func (a StatisticsType) String() string {
	if str, ok := StatisticsType_Strings[a]; ok {
		return str
	}
	return "StatisticsType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatisticsType_Add(p *radius.Packet, value StatisticsType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 127, a)
}

func StatisticsType_Get(p *radius.Packet) (value StatisticsType) {
	value, _ = StatisticsType_Lookup(p)
	return
}

func StatisticsType_Gets(p *radius.Packet) (values []StatisticsType, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatisticsType(i))
	}
	return
}

func StatisticsType_Lookup(p *radius.Packet) (value StatisticsType, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatisticsType(i)
	return
}

func StatisticsType_Set(p *radius.Packet, value StatisticsType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 127, a)
}

func StatisticsType_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 127)
}

type TotalAccessRequests uint32

var TotalAccessRequests_Strings = map[TotalAccessRequests]string{}

func (a TotalAccessRequests) String() string {
	if str, ok := TotalAccessRequests_Strings[a]; ok {
		return str
	}
	return "TotalAccessRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccessRequests_Add(p *radius.Packet, value TotalAccessRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 128, a)
}

func TotalAccessRequests_Get(p *radius.Packet) (value TotalAccessRequests) {
	value, _ = TotalAccessRequests_Lookup(p)
	return
}

func TotalAccessRequests_Gets(p *radius.Packet) (values []TotalAccessRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccessRequests(i))
	}
	return
}

func TotalAccessRequests_Lookup(p *radius.Packet) (value TotalAccessRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccessRequests(i)
	return
}

func TotalAccessRequests_Set(p *radius.Packet, value TotalAccessRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 128, a)
}

func TotalAccessRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 128)
}

type TotalAccessAccepts uint32

var TotalAccessAccepts_Strings = map[TotalAccessAccepts]string{}

func (a TotalAccessAccepts) String() string {
	if str, ok := TotalAccessAccepts_Strings[a]; ok {
		return str
	}
	return "TotalAccessAccepts(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccessAccepts_Add(p *radius.Packet, value TotalAccessAccepts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 129, a)
}

func TotalAccessAccepts_Get(p *radius.Packet) (value TotalAccessAccepts) {
	value, _ = TotalAccessAccepts_Lookup(p)
	return
}

func TotalAccessAccepts_Gets(p *radius.Packet) (values []TotalAccessAccepts, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 129) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccessAccepts(i))
	}
	return
}

func TotalAccessAccepts_Lookup(p *radius.Packet) (value TotalAccessAccepts, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccessAccepts(i)
	return
}

func TotalAccessAccepts_Set(p *radius.Packet, value TotalAccessAccepts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 129, a)
}

func TotalAccessAccepts_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 129)
}

type TotalAccessRejects uint32

var TotalAccessRejects_Strings = map[TotalAccessRejects]string{}

func (a TotalAccessRejects) String() string {
	if str, ok := TotalAccessRejects_Strings[a]; ok {
		return str
	}
	return "TotalAccessRejects(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccessRejects_Add(p *radius.Packet, value TotalAccessRejects) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 130, a)
}

func TotalAccessRejects_Get(p *radius.Packet) (value TotalAccessRejects) {
	value, _ = TotalAccessRejects_Lookup(p)
	return
}

func TotalAccessRejects_Gets(p *radius.Packet) (values []TotalAccessRejects, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 130) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccessRejects(i))
	}
	return
}

func TotalAccessRejects_Lookup(p *radius.Packet) (value TotalAccessRejects, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccessRejects(i)
	return
}

func TotalAccessRejects_Set(p *radius.Packet, value TotalAccessRejects) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 130, a)
}

func TotalAccessRejects_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 130)
}

type TotalAccessChallenges uint32

var TotalAccessChallenges_Strings = map[TotalAccessChallenges]string{}

func (a TotalAccessChallenges) String() string {
	if str, ok := TotalAccessChallenges_Strings[a]; ok {
		return str
	}
	return "TotalAccessChallenges(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccessChallenges_Add(p *radius.Packet, value TotalAccessChallenges) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 131, a)
}

func TotalAccessChallenges_Get(p *radius.Packet) (value TotalAccessChallenges) {
	value, _ = TotalAccessChallenges_Lookup(p)
	return
}

func TotalAccessChallenges_Gets(p *radius.Packet) (values []TotalAccessChallenges, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccessChallenges(i))
	}
	return
}

func TotalAccessChallenges_Lookup(p *radius.Packet) (value TotalAccessChallenges, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccessChallenges(i)
	return
}

func TotalAccessChallenges_Set(p *radius.Packet, value TotalAccessChallenges) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 131, a)
}

func TotalAccessChallenges_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 131)
}

type TotalAuthResponses uint32

var TotalAuthResponses_Strings = map[TotalAuthResponses]string{}

func (a TotalAuthResponses) String() string {
	if str, ok := TotalAuthResponses_Strings[a]; ok {
		return str
	}
	return "TotalAuthResponses(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthResponses_Add(p *radius.Packet, value TotalAuthResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 132, a)
}

func TotalAuthResponses_Get(p *radius.Packet) (value TotalAuthResponses) {
	value, _ = TotalAuthResponses_Lookup(p)
	return
}

func TotalAuthResponses_Gets(p *radius.Packet) (values []TotalAuthResponses, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 132) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthResponses(i))
	}
	return
}

func TotalAuthResponses_Lookup(p *radius.Packet) (value TotalAuthResponses, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthResponses(i)
	return
}

func TotalAuthResponses_Set(p *radius.Packet, value TotalAuthResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 132, a)
}

func TotalAuthResponses_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 132)
}

type TotalAuthDuplicateRequests uint32

var TotalAuthDuplicateRequests_Strings = map[TotalAuthDuplicateRequests]string{}

func (a TotalAuthDuplicateRequests) String() string {
	if str, ok := TotalAuthDuplicateRequests_Strings[a]; ok {
		return str
	}
	return "TotalAuthDuplicateRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthDuplicateRequests_Add(p *radius.Packet, value TotalAuthDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 133, a)
}

func TotalAuthDuplicateRequests_Get(p *radius.Packet) (value TotalAuthDuplicateRequests) {
	value, _ = TotalAuthDuplicateRequests_Lookup(p)
	return
}

func TotalAuthDuplicateRequests_Gets(p *radius.Packet) (values []TotalAuthDuplicateRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 133) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthDuplicateRequests(i))
	}
	return
}

func TotalAuthDuplicateRequests_Lookup(p *radius.Packet) (value TotalAuthDuplicateRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthDuplicateRequests(i)
	return
}

func TotalAuthDuplicateRequests_Set(p *radius.Packet, value TotalAuthDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 133, a)
}

func TotalAuthDuplicateRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 133)
}

type TotalAuthMalformedRequests uint32

var TotalAuthMalformedRequests_Strings = map[TotalAuthMalformedRequests]string{}

func (a TotalAuthMalformedRequests) String() string {
	if str, ok := TotalAuthMalformedRequests_Strings[a]; ok {
		return str
	}
	return "TotalAuthMalformedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthMalformedRequests_Add(p *radius.Packet, value TotalAuthMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 134, a)
}

func TotalAuthMalformedRequests_Get(p *radius.Packet) (value TotalAuthMalformedRequests) {
	value, _ = TotalAuthMalformedRequests_Lookup(p)
	return
}

func TotalAuthMalformedRequests_Gets(p *radius.Packet) (values []TotalAuthMalformedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 134) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthMalformedRequests(i))
	}
	return
}

func TotalAuthMalformedRequests_Lookup(p *radius.Packet) (value TotalAuthMalformedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthMalformedRequests(i)
	return
}

func TotalAuthMalformedRequests_Set(p *radius.Packet, value TotalAuthMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 134, a)
}

func TotalAuthMalformedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 134)
}

type TotalAuthInvalidRequests uint32

var TotalAuthInvalidRequests_Strings = map[TotalAuthInvalidRequests]string{}

func (a TotalAuthInvalidRequests) String() string {
	if str, ok := TotalAuthInvalidRequests_Strings[a]; ok {
		return str
	}
	return "TotalAuthInvalidRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthInvalidRequests_Add(p *radius.Packet, value TotalAuthInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 135, a)
}

func TotalAuthInvalidRequests_Get(p *radius.Packet) (value TotalAuthInvalidRequests) {
	value, _ = TotalAuthInvalidRequests_Lookup(p)
	return
}

func TotalAuthInvalidRequests_Gets(p *radius.Packet) (values []TotalAuthInvalidRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 135) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthInvalidRequests(i))
	}
	return
}

func TotalAuthInvalidRequests_Lookup(p *radius.Packet) (value TotalAuthInvalidRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthInvalidRequests(i)
	return
}

func TotalAuthInvalidRequests_Set(p *radius.Packet, value TotalAuthInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 135, a)
}

func TotalAuthInvalidRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 135)
}

type TotalAuthDroppedRequests uint32

var TotalAuthDroppedRequests_Strings = map[TotalAuthDroppedRequests]string{}

func (a TotalAuthDroppedRequests) String() string {
	if str, ok := TotalAuthDroppedRequests_Strings[a]; ok {
		return str
	}
	return "TotalAuthDroppedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthDroppedRequests_Add(p *radius.Packet, value TotalAuthDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 136, a)
}

func TotalAuthDroppedRequests_Get(p *radius.Packet) (value TotalAuthDroppedRequests) {
	value, _ = TotalAuthDroppedRequests_Lookup(p)
	return
}

func TotalAuthDroppedRequests_Gets(p *radius.Packet) (values []TotalAuthDroppedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 136) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthDroppedRequests(i))
	}
	return
}

func TotalAuthDroppedRequests_Lookup(p *radius.Packet) (value TotalAuthDroppedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthDroppedRequests(i)
	return
}

func TotalAuthDroppedRequests_Set(p *radius.Packet, value TotalAuthDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 136, a)
}

func TotalAuthDroppedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 136)
}

type TotalAuthUnknownTypes uint32

var TotalAuthUnknownTypes_Strings = map[TotalAuthUnknownTypes]string{}

func (a TotalAuthUnknownTypes) String() string {
	if str, ok := TotalAuthUnknownTypes_Strings[a]; ok {
		return str
	}
	return "TotalAuthUnknownTypes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAuthUnknownTypes_Add(p *radius.Packet, value TotalAuthUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 137, a)
}

func TotalAuthUnknownTypes_Get(p *radius.Packet) (value TotalAuthUnknownTypes) {
	value, _ = TotalAuthUnknownTypes_Lookup(p)
	return
}

func TotalAuthUnknownTypes_Gets(p *radius.Packet) (values []TotalAuthUnknownTypes, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAuthUnknownTypes(i))
	}
	return
}

func TotalAuthUnknownTypes_Lookup(p *radius.Packet) (value TotalAuthUnknownTypes, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAuthUnknownTypes(i)
	return
}

func TotalAuthUnknownTypes_Set(p *radius.Packet, value TotalAuthUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 137, a)
}

func TotalAuthUnknownTypes_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 137)
}

type TotalProxyAccessRequests uint32

var TotalProxyAccessRequests_Strings = map[TotalProxyAccessRequests]string{}

func (a TotalProxyAccessRequests) String() string {
	if str, ok := TotalProxyAccessRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccessRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccessRequests_Add(p *radius.Packet, value TotalProxyAccessRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 138, a)
}

func TotalProxyAccessRequests_Get(p *radius.Packet) (value TotalProxyAccessRequests) {
	value, _ = TotalProxyAccessRequests_Lookup(p)
	return
}

func TotalProxyAccessRequests_Gets(p *radius.Packet) (values []TotalProxyAccessRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccessRequests(i))
	}
	return
}

func TotalProxyAccessRequests_Lookup(p *radius.Packet) (value TotalProxyAccessRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccessRequests(i)
	return
}

func TotalProxyAccessRequests_Set(p *radius.Packet, value TotalProxyAccessRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 138, a)
}

func TotalProxyAccessRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 138)
}

type TotalProxyAccessAccepts uint32

var TotalProxyAccessAccepts_Strings = map[TotalProxyAccessAccepts]string{}

func (a TotalProxyAccessAccepts) String() string {
	if str, ok := TotalProxyAccessAccepts_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccessAccepts(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccessAccepts_Add(p *radius.Packet, value TotalProxyAccessAccepts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 139, a)
}

func TotalProxyAccessAccepts_Get(p *radius.Packet) (value TotalProxyAccessAccepts) {
	value, _ = TotalProxyAccessAccepts_Lookup(p)
	return
}

func TotalProxyAccessAccepts_Gets(p *radius.Packet) (values []TotalProxyAccessAccepts, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 139) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccessAccepts(i))
	}
	return
}

func TotalProxyAccessAccepts_Lookup(p *radius.Packet) (value TotalProxyAccessAccepts, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccessAccepts(i)
	return
}

func TotalProxyAccessAccepts_Set(p *radius.Packet, value TotalProxyAccessAccepts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 139, a)
}

func TotalProxyAccessAccepts_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 139)
}

type TotalProxyAccessRejects uint32

var TotalProxyAccessRejects_Strings = map[TotalProxyAccessRejects]string{}

func (a TotalProxyAccessRejects) String() string {
	if str, ok := TotalProxyAccessRejects_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccessRejects(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccessRejects_Add(p *radius.Packet, value TotalProxyAccessRejects) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 140, a)
}

func TotalProxyAccessRejects_Get(p *radius.Packet) (value TotalProxyAccessRejects) {
	value, _ = TotalProxyAccessRejects_Lookup(p)
	return
}

func TotalProxyAccessRejects_Gets(p *radius.Packet) (values []TotalProxyAccessRejects, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccessRejects(i))
	}
	return
}

func TotalProxyAccessRejects_Lookup(p *radius.Packet) (value TotalProxyAccessRejects, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccessRejects(i)
	return
}

func TotalProxyAccessRejects_Set(p *radius.Packet, value TotalProxyAccessRejects) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 140, a)
}

func TotalProxyAccessRejects_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 140)
}

type TotalProxyAccessChallenges uint32

var TotalProxyAccessChallenges_Strings = map[TotalProxyAccessChallenges]string{}

func (a TotalProxyAccessChallenges) String() string {
	if str, ok := TotalProxyAccessChallenges_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccessChallenges(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccessChallenges_Add(p *radius.Packet, value TotalProxyAccessChallenges) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 141, a)
}

func TotalProxyAccessChallenges_Get(p *radius.Packet) (value TotalProxyAccessChallenges) {
	value, _ = TotalProxyAccessChallenges_Lookup(p)
	return
}

func TotalProxyAccessChallenges_Gets(p *radius.Packet) (values []TotalProxyAccessChallenges, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 141) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccessChallenges(i))
	}
	return
}

func TotalProxyAccessChallenges_Lookup(p *radius.Packet) (value TotalProxyAccessChallenges, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccessChallenges(i)
	return
}

func TotalProxyAccessChallenges_Set(p *radius.Packet, value TotalProxyAccessChallenges) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 141, a)
}

func TotalProxyAccessChallenges_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 141)
}

type TotalProxyAuthResponses uint32

var TotalProxyAuthResponses_Strings = map[TotalProxyAuthResponses]string{}

func (a TotalProxyAuthResponses) String() string {
	if str, ok := TotalProxyAuthResponses_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthResponses(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthResponses_Add(p *radius.Packet, value TotalProxyAuthResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 142, a)
}

func TotalProxyAuthResponses_Get(p *radius.Packet) (value TotalProxyAuthResponses) {
	value, _ = TotalProxyAuthResponses_Lookup(p)
	return
}

func TotalProxyAuthResponses_Gets(p *radius.Packet) (values []TotalProxyAuthResponses, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthResponses(i))
	}
	return
}

func TotalProxyAuthResponses_Lookup(p *radius.Packet) (value TotalProxyAuthResponses, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthResponses(i)
	return
}

func TotalProxyAuthResponses_Set(p *radius.Packet, value TotalProxyAuthResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 142, a)
}

func TotalProxyAuthResponses_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 142)
}

type TotalProxyAuthDuplicateRequests uint32

var TotalProxyAuthDuplicateRequests_Strings = map[TotalProxyAuthDuplicateRequests]string{}

func (a TotalProxyAuthDuplicateRequests) String() string {
	if str, ok := TotalProxyAuthDuplicateRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthDuplicateRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthDuplicateRequests_Add(p *radius.Packet, value TotalProxyAuthDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 143, a)
}

func TotalProxyAuthDuplicateRequests_Get(p *radius.Packet) (value TotalProxyAuthDuplicateRequests) {
	value, _ = TotalProxyAuthDuplicateRequests_Lookup(p)
	return
}

func TotalProxyAuthDuplicateRequests_Gets(p *radius.Packet) (values []TotalProxyAuthDuplicateRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthDuplicateRequests(i))
	}
	return
}

func TotalProxyAuthDuplicateRequests_Lookup(p *radius.Packet) (value TotalProxyAuthDuplicateRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthDuplicateRequests(i)
	return
}

func TotalProxyAuthDuplicateRequests_Set(p *radius.Packet, value TotalProxyAuthDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 143, a)
}

func TotalProxyAuthDuplicateRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 143)
}

type TotalProxyAuthMalformedRequests uint32

var TotalProxyAuthMalformedRequests_Strings = map[TotalProxyAuthMalformedRequests]string{}

func (a TotalProxyAuthMalformedRequests) String() string {
	if str, ok := TotalProxyAuthMalformedRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthMalformedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthMalformedRequests_Add(p *radius.Packet, value TotalProxyAuthMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 144, a)
}

func TotalProxyAuthMalformedRequests_Get(p *radius.Packet) (value TotalProxyAuthMalformedRequests) {
	value, _ = TotalProxyAuthMalformedRequests_Lookup(p)
	return
}

func TotalProxyAuthMalformedRequests_Gets(p *radius.Packet) (values []TotalProxyAuthMalformedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthMalformedRequests(i))
	}
	return
}

func TotalProxyAuthMalformedRequests_Lookup(p *radius.Packet) (value TotalProxyAuthMalformedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthMalformedRequests(i)
	return
}

func TotalProxyAuthMalformedRequests_Set(p *radius.Packet, value TotalProxyAuthMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 144, a)
}

func TotalProxyAuthMalformedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 144)
}

type TotalProxyAuthInvalidRequests uint32

var TotalProxyAuthInvalidRequests_Strings = map[TotalProxyAuthInvalidRequests]string{}

func (a TotalProxyAuthInvalidRequests) String() string {
	if str, ok := TotalProxyAuthInvalidRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthInvalidRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthInvalidRequests_Add(p *radius.Packet, value TotalProxyAuthInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 145, a)
}

func TotalProxyAuthInvalidRequests_Get(p *radius.Packet) (value TotalProxyAuthInvalidRequests) {
	value, _ = TotalProxyAuthInvalidRequests_Lookup(p)
	return
}

func TotalProxyAuthInvalidRequests_Gets(p *radius.Packet) (values []TotalProxyAuthInvalidRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthInvalidRequests(i))
	}
	return
}

func TotalProxyAuthInvalidRequests_Lookup(p *radius.Packet) (value TotalProxyAuthInvalidRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthInvalidRequests(i)
	return
}

func TotalProxyAuthInvalidRequests_Set(p *radius.Packet, value TotalProxyAuthInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 145, a)
}

func TotalProxyAuthInvalidRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 145)
}

type TotalProxyAuthDroppedRequests uint32

var TotalProxyAuthDroppedRequests_Strings = map[TotalProxyAuthDroppedRequests]string{}

func (a TotalProxyAuthDroppedRequests) String() string {
	if str, ok := TotalProxyAuthDroppedRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthDroppedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthDroppedRequests_Add(p *radius.Packet, value TotalProxyAuthDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 146, a)
}

func TotalProxyAuthDroppedRequests_Get(p *radius.Packet) (value TotalProxyAuthDroppedRequests) {
	value, _ = TotalProxyAuthDroppedRequests_Lookup(p)
	return
}

func TotalProxyAuthDroppedRequests_Gets(p *radius.Packet) (values []TotalProxyAuthDroppedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthDroppedRequests(i))
	}
	return
}

func TotalProxyAuthDroppedRequests_Lookup(p *radius.Packet) (value TotalProxyAuthDroppedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthDroppedRequests(i)
	return
}

func TotalProxyAuthDroppedRequests_Set(p *radius.Packet, value TotalProxyAuthDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 146, a)
}

func TotalProxyAuthDroppedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 146)
}

type TotalProxyAuthUnknownTypes uint32

var TotalProxyAuthUnknownTypes_Strings = map[TotalProxyAuthUnknownTypes]string{}

func (a TotalProxyAuthUnknownTypes) String() string {
	if str, ok := TotalProxyAuthUnknownTypes_Strings[a]; ok {
		return str
	}
	return "TotalProxyAuthUnknownTypes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAuthUnknownTypes_Add(p *radius.Packet, value TotalProxyAuthUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 147, a)
}

func TotalProxyAuthUnknownTypes_Get(p *radius.Packet) (value TotalProxyAuthUnknownTypes) {
	value, _ = TotalProxyAuthUnknownTypes_Lookup(p)
	return
}

func TotalProxyAuthUnknownTypes_Gets(p *radius.Packet) (values []TotalProxyAuthUnknownTypes, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAuthUnknownTypes(i))
	}
	return
}

func TotalProxyAuthUnknownTypes_Lookup(p *radius.Packet) (value TotalProxyAuthUnknownTypes, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAuthUnknownTypes(i)
	return
}

func TotalProxyAuthUnknownTypes_Set(p *radius.Packet, value TotalProxyAuthUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 147, a)
}

func TotalProxyAuthUnknownTypes_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 147)
}

type TotalAccountingRequests uint32

var TotalAccountingRequests_Strings = map[TotalAccountingRequests]string{}

func (a TotalAccountingRequests) String() string {
	if str, ok := TotalAccountingRequests_Strings[a]; ok {
		return str
	}
	return "TotalAccountingRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccountingRequests_Add(p *radius.Packet, value TotalAccountingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 148, a)
}

func TotalAccountingRequests_Get(p *radius.Packet) (value TotalAccountingRequests) {
	value, _ = TotalAccountingRequests_Lookup(p)
	return
}

func TotalAccountingRequests_Gets(p *radius.Packet) (values []TotalAccountingRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccountingRequests(i))
	}
	return
}

func TotalAccountingRequests_Lookup(p *radius.Packet) (value TotalAccountingRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccountingRequests(i)
	return
}

func TotalAccountingRequests_Set(p *radius.Packet, value TotalAccountingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 148, a)
}

func TotalAccountingRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 148)
}

type TotalAccountingResponses uint32

var TotalAccountingResponses_Strings = map[TotalAccountingResponses]string{}

func (a TotalAccountingResponses) String() string {
	if str, ok := TotalAccountingResponses_Strings[a]; ok {
		return str
	}
	return "TotalAccountingResponses(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAccountingResponses_Add(p *radius.Packet, value TotalAccountingResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 149, a)
}

func TotalAccountingResponses_Get(p *radius.Packet) (value TotalAccountingResponses) {
	value, _ = TotalAccountingResponses_Lookup(p)
	return
}

func TotalAccountingResponses_Gets(p *radius.Packet) (values []TotalAccountingResponses, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAccountingResponses(i))
	}
	return
}

func TotalAccountingResponses_Lookup(p *radius.Packet) (value TotalAccountingResponses, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAccountingResponses(i)
	return
}

func TotalAccountingResponses_Set(p *radius.Packet, value TotalAccountingResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 149, a)
}

func TotalAccountingResponses_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 149)
}

type TotalAcctDuplicateRequests uint32

var TotalAcctDuplicateRequests_Strings = map[TotalAcctDuplicateRequests]string{}

func (a TotalAcctDuplicateRequests) String() string {
	if str, ok := TotalAcctDuplicateRequests_Strings[a]; ok {
		return str
	}
	return "TotalAcctDuplicateRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAcctDuplicateRequests_Add(p *radius.Packet, value TotalAcctDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 150, a)
}

func TotalAcctDuplicateRequests_Get(p *radius.Packet) (value TotalAcctDuplicateRequests) {
	value, _ = TotalAcctDuplicateRequests_Lookup(p)
	return
}

func TotalAcctDuplicateRequests_Gets(p *radius.Packet) (values []TotalAcctDuplicateRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 150) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAcctDuplicateRequests(i))
	}
	return
}

func TotalAcctDuplicateRequests_Lookup(p *radius.Packet) (value TotalAcctDuplicateRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAcctDuplicateRequests(i)
	return
}

func TotalAcctDuplicateRequests_Set(p *radius.Packet, value TotalAcctDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 150, a)
}

func TotalAcctDuplicateRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 150)
}

type TotalAcctMalformedRequests uint32

var TotalAcctMalformedRequests_Strings = map[TotalAcctMalformedRequests]string{}

func (a TotalAcctMalformedRequests) String() string {
	if str, ok := TotalAcctMalformedRequests_Strings[a]; ok {
		return str
	}
	return "TotalAcctMalformedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAcctMalformedRequests_Add(p *radius.Packet, value TotalAcctMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 151, a)
}

func TotalAcctMalformedRequests_Get(p *radius.Packet) (value TotalAcctMalformedRequests) {
	value, _ = TotalAcctMalformedRequests_Lookup(p)
	return
}

func TotalAcctMalformedRequests_Gets(p *radius.Packet) (values []TotalAcctMalformedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 151) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAcctMalformedRequests(i))
	}
	return
}

func TotalAcctMalformedRequests_Lookup(p *radius.Packet) (value TotalAcctMalformedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAcctMalformedRequests(i)
	return
}

func TotalAcctMalformedRequests_Set(p *radius.Packet, value TotalAcctMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 151, a)
}

func TotalAcctMalformedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 151)
}

type TotalAcctInvalidRequests uint32

var TotalAcctInvalidRequests_Strings = map[TotalAcctInvalidRequests]string{}

func (a TotalAcctInvalidRequests) String() string {
	if str, ok := TotalAcctInvalidRequests_Strings[a]; ok {
		return str
	}
	return "TotalAcctInvalidRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAcctInvalidRequests_Add(p *radius.Packet, value TotalAcctInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 152, a)
}

func TotalAcctInvalidRequests_Get(p *radius.Packet) (value TotalAcctInvalidRequests) {
	value, _ = TotalAcctInvalidRequests_Lookup(p)
	return
}

func TotalAcctInvalidRequests_Gets(p *radius.Packet) (values []TotalAcctInvalidRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAcctInvalidRequests(i))
	}
	return
}

func TotalAcctInvalidRequests_Lookup(p *radius.Packet) (value TotalAcctInvalidRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAcctInvalidRequests(i)
	return
}

func TotalAcctInvalidRequests_Set(p *radius.Packet, value TotalAcctInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 152, a)
}

func TotalAcctInvalidRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 152)
}

type TotalAcctDroppedRequests uint32

var TotalAcctDroppedRequests_Strings = map[TotalAcctDroppedRequests]string{}

func (a TotalAcctDroppedRequests) String() string {
	if str, ok := TotalAcctDroppedRequests_Strings[a]; ok {
		return str
	}
	return "TotalAcctDroppedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAcctDroppedRequests_Add(p *radius.Packet, value TotalAcctDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 153, a)
}

func TotalAcctDroppedRequests_Get(p *radius.Packet) (value TotalAcctDroppedRequests) {
	value, _ = TotalAcctDroppedRequests_Lookup(p)
	return
}

func TotalAcctDroppedRequests_Gets(p *radius.Packet) (values []TotalAcctDroppedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 153) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAcctDroppedRequests(i))
	}
	return
}

func TotalAcctDroppedRequests_Lookup(p *radius.Packet) (value TotalAcctDroppedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAcctDroppedRequests(i)
	return
}

func TotalAcctDroppedRequests_Set(p *radius.Packet, value TotalAcctDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 153, a)
}

func TotalAcctDroppedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 153)
}

type TotalAcctUnknownTypes uint32

var TotalAcctUnknownTypes_Strings = map[TotalAcctUnknownTypes]string{}

func (a TotalAcctUnknownTypes) String() string {
	if str, ok := TotalAcctUnknownTypes_Strings[a]; ok {
		return str
	}
	return "TotalAcctUnknownTypes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalAcctUnknownTypes_Add(p *radius.Packet, value TotalAcctUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 154, a)
}

func TotalAcctUnknownTypes_Get(p *radius.Packet) (value TotalAcctUnknownTypes) {
	value, _ = TotalAcctUnknownTypes_Lookup(p)
	return
}

func TotalAcctUnknownTypes_Gets(p *radius.Packet) (values []TotalAcctUnknownTypes, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 154) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalAcctUnknownTypes(i))
	}
	return
}

func TotalAcctUnknownTypes_Lookup(p *radius.Packet) (value TotalAcctUnknownTypes, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalAcctUnknownTypes(i)
	return
}

func TotalAcctUnknownTypes_Set(p *radius.Packet, value TotalAcctUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 154, a)
}

func TotalAcctUnknownTypes_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 154)
}

type TotalProxyAccountingRequests uint32

var TotalProxyAccountingRequests_Strings = map[TotalProxyAccountingRequests]string{}

func (a TotalProxyAccountingRequests) String() string {
	if str, ok := TotalProxyAccountingRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccountingRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccountingRequests_Add(p *radius.Packet, value TotalProxyAccountingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 155, a)
}

func TotalProxyAccountingRequests_Get(p *radius.Packet) (value TotalProxyAccountingRequests) {
	value, _ = TotalProxyAccountingRequests_Lookup(p)
	return
}

func TotalProxyAccountingRequests_Gets(p *radius.Packet) (values []TotalProxyAccountingRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 155) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccountingRequests(i))
	}
	return
}

func TotalProxyAccountingRequests_Lookup(p *radius.Packet) (value TotalProxyAccountingRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccountingRequests(i)
	return
}

func TotalProxyAccountingRequests_Set(p *radius.Packet, value TotalProxyAccountingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 155, a)
}

func TotalProxyAccountingRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 155)
}

type TotalProxyAccountingResponses uint32

var TotalProxyAccountingResponses_Strings = map[TotalProxyAccountingResponses]string{}

func (a TotalProxyAccountingResponses) String() string {
	if str, ok := TotalProxyAccountingResponses_Strings[a]; ok {
		return str
	}
	return "TotalProxyAccountingResponses(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAccountingResponses_Add(p *radius.Packet, value TotalProxyAccountingResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 156, a)
}

func TotalProxyAccountingResponses_Get(p *radius.Packet) (value TotalProxyAccountingResponses) {
	value, _ = TotalProxyAccountingResponses_Lookup(p)
	return
}

func TotalProxyAccountingResponses_Gets(p *radius.Packet) (values []TotalProxyAccountingResponses, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 156) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAccountingResponses(i))
	}
	return
}

func TotalProxyAccountingResponses_Lookup(p *radius.Packet) (value TotalProxyAccountingResponses, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAccountingResponses(i)
	return
}

func TotalProxyAccountingResponses_Set(p *radius.Packet, value TotalProxyAccountingResponses) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 156, a)
}

func TotalProxyAccountingResponses_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 156)
}

type TotalProxyAcctDuplicateRequests uint32

var TotalProxyAcctDuplicateRequests_Strings = map[TotalProxyAcctDuplicateRequests]string{}

func (a TotalProxyAcctDuplicateRequests) String() string {
	if str, ok := TotalProxyAcctDuplicateRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAcctDuplicateRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAcctDuplicateRequests_Add(p *radius.Packet, value TotalProxyAcctDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 157, a)
}

func TotalProxyAcctDuplicateRequests_Get(p *radius.Packet) (value TotalProxyAcctDuplicateRequests) {
	value, _ = TotalProxyAcctDuplicateRequests_Lookup(p)
	return
}

func TotalProxyAcctDuplicateRequests_Gets(p *radius.Packet) (values []TotalProxyAcctDuplicateRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 157) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAcctDuplicateRequests(i))
	}
	return
}

func TotalProxyAcctDuplicateRequests_Lookup(p *radius.Packet) (value TotalProxyAcctDuplicateRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAcctDuplicateRequests(i)
	return
}

func TotalProxyAcctDuplicateRequests_Set(p *radius.Packet, value TotalProxyAcctDuplicateRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 157, a)
}

func TotalProxyAcctDuplicateRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 157)
}

type TotalProxyAcctMalformedRequests uint32

var TotalProxyAcctMalformedRequests_Strings = map[TotalProxyAcctMalformedRequests]string{}

func (a TotalProxyAcctMalformedRequests) String() string {
	if str, ok := TotalProxyAcctMalformedRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAcctMalformedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAcctMalformedRequests_Add(p *radius.Packet, value TotalProxyAcctMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 158, a)
}

func TotalProxyAcctMalformedRequests_Get(p *radius.Packet) (value TotalProxyAcctMalformedRequests) {
	value, _ = TotalProxyAcctMalformedRequests_Lookup(p)
	return
}

func TotalProxyAcctMalformedRequests_Gets(p *radius.Packet) (values []TotalProxyAcctMalformedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 158) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAcctMalformedRequests(i))
	}
	return
}

func TotalProxyAcctMalformedRequests_Lookup(p *radius.Packet) (value TotalProxyAcctMalformedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAcctMalformedRequests(i)
	return
}

func TotalProxyAcctMalformedRequests_Set(p *radius.Packet, value TotalProxyAcctMalformedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 158, a)
}

func TotalProxyAcctMalformedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 158)
}

type TotalProxyAcctInvalidRequests uint32

var TotalProxyAcctInvalidRequests_Strings = map[TotalProxyAcctInvalidRequests]string{}

func (a TotalProxyAcctInvalidRequests) String() string {
	if str, ok := TotalProxyAcctInvalidRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAcctInvalidRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAcctInvalidRequests_Add(p *radius.Packet, value TotalProxyAcctInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 159, a)
}

func TotalProxyAcctInvalidRequests_Get(p *radius.Packet) (value TotalProxyAcctInvalidRequests) {
	value, _ = TotalProxyAcctInvalidRequests_Lookup(p)
	return
}

func TotalProxyAcctInvalidRequests_Gets(p *radius.Packet) (values []TotalProxyAcctInvalidRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAcctInvalidRequests(i))
	}
	return
}

func TotalProxyAcctInvalidRequests_Lookup(p *radius.Packet) (value TotalProxyAcctInvalidRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAcctInvalidRequests(i)
	return
}

func TotalProxyAcctInvalidRequests_Set(p *radius.Packet, value TotalProxyAcctInvalidRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 159, a)
}

func TotalProxyAcctInvalidRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 159)
}

type TotalProxyAcctDroppedRequests uint32

var TotalProxyAcctDroppedRequests_Strings = map[TotalProxyAcctDroppedRequests]string{}

func (a TotalProxyAcctDroppedRequests) String() string {
	if str, ok := TotalProxyAcctDroppedRequests_Strings[a]; ok {
		return str
	}
	return "TotalProxyAcctDroppedRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAcctDroppedRequests_Add(p *radius.Packet, value TotalProxyAcctDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 160, a)
}

func TotalProxyAcctDroppedRequests_Get(p *radius.Packet) (value TotalProxyAcctDroppedRequests) {
	value, _ = TotalProxyAcctDroppedRequests_Lookup(p)
	return
}

func TotalProxyAcctDroppedRequests_Gets(p *radius.Packet) (values []TotalProxyAcctDroppedRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 160) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAcctDroppedRequests(i))
	}
	return
}

func TotalProxyAcctDroppedRequests_Lookup(p *radius.Packet) (value TotalProxyAcctDroppedRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAcctDroppedRequests(i)
	return
}

func TotalProxyAcctDroppedRequests_Set(p *radius.Packet, value TotalProxyAcctDroppedRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 160, a)
}

func TotalProxyAcctDroppedRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 160)
}

type TotalProxyAcctUnknownTypes uint32

var TotalProxyAcctUnknownTypes_Strings = map[TotalProxyAcctUnknownTypes]string{}

func (a TotalProxyAcctUnknownTypes) String() string {
	if str, ok := TotalProxyAcctUnknownTypes_Strings[a]; ok {
		return str
	}
	return "TotalProxyAcctUnknownTypes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TotalProxyAcctUnknownTypes_Add(p *radius.Packet, value TotalProxyAcctUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 161, a)
}

func TotalProxyAcctUnknownTypes_Get(p *radius.Packet) (value TotalProxyAcctUnknownTypes) {
	value, _ = TotalProxyAcctUnknownTypes_Lookup(p)
	return
}

func TotalProxyAcctUnknownTypes_Gets(p *radius.Packet) (values []TotalProxyAcctUnknownTypes, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 161) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TotalProxyAcctUnknownTypes(i))
	}
	return
}

func TotalProxyAcctUnknownTypes_Lookup(p *radius.Packet) (value TotalProxyAcctUnknownTypes, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TotalProxyAcctUnknownTypes(i)
	return
}

func TotalProxyAcctUnknownTypes_Set(p *radius.Packet, value TotalProxyAcctUnknownTypes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 161, a)
}

func TotalProxyAcctUnknownTypes_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 161)
}

type QueueLenInternal uint32

var QueueLenInternal_Strings = map[QueueLenInternal]string{}

func (a QueueLenInternal) String() string {
	if str, ok := QueueLenInternal_Strings[a]; ok {
		return str
	}
	return "QueueLenInternal(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueLenInternal_Add(p *radius.Packet, value QueueLenInternal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 162, a)
}

func QueueLenInternal_Get(p *radius.Packet) (value QueueLenInternal) {
	value, _ = QueueLenInternal_Lookup(p)
	return
}

func QueueLenInternal_Gets(p *radius.Packet) (values []QueueLenInternal, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 162) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueLenInternal(i))
	}
	return
}

func QueueLenInternal_Lookup(p *radius.Packet) (value QueueLenInternal, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueLenInternal(i)
	return
}

func QueueLenInternal_Set(p *radius.Packet, value QueueLenInternal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 162, a)
}

func QueueLenInternal_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 162)
}

type QueueLenProxy uint32

var QueueLenProxy_Strings = map[QueueLenProxy]string{}

func (a QueueLenProxy) String() string {
	if str, ok := QueueLenProxy_Strings[a]; ok {
		return str
	}
	return "QueueLenProxy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueLenProxy_Add(p *radius.Packet, value QueueLenProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 163, a)
}

func QueueLenProxy_Get(p *radius.Packet) (value QueueLenProxy) {
	value, _ = QueueLenProxy_Lookup(p)
	return
}

func QueueLenProxy_Gets(p *radius.Packet) (values []QueueLenProxy, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 163) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueLenProxy(i))
	}
	return
}

func QueueLenProxy_Lookup(p *radius.Packet) (value QueueLenProxy, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueLenProxy(i)
	return
}

func QueueLenProxy_Set(p *radius.Packet, value QueueLenProxy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 163, a)
}

func QueueLenProxy_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 163)
}

type QueueLenAuth uint32

var QueueLenAuth_Strings = map[QueueLenAuth]string{}

func (a QueueLenAuth) String() string {
	if str, ok := QueueLenAuth_Strings[a]; ok {
		return str
	}
	return "QueueLenAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueLenAuth_Add(p *radius.Packet, value QueueLenAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 164, a)
}

func QueueLenAuth_Get(p *radius.Packet) (value QueueLenAuth) {
	value, _ = QueueLenAuth_Lookup(p)
	return
}

func QueueLenAuth_Gets(p *radius.Packet) (values []QueueLenAuth, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 164) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueLenAuth(i))
	}
	return
}

func QueueLenAuth_Lookup(p *radius.Packet) (value QueueLenAuth, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueLenAuth(i)
	return
}

func QueueLenAuth_Set(p *radius.Packet, value QueueLenAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 164, a)
}

func QueueLenAuth_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 164)
}

type QueueLenAcct uint32

var QueueLenAcct_Strings = map[QueueLenAcct]string{}

func (a QueueLenAcct) String() string {
	if str, ok := QueueLenAcct_Strings[a]; ok {
		return str
	}
	return "QueueLenAcct(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueLenAcct_Add(p *radius.Packet, value QueueLenAcct) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 165, a)
}

func QueueLenAcct_Get(p *radius.Packet) (value QueueLenAcct) {
	value, _ = QueueLenAcct_Lookup(p)
	return
}

func QueueLenAcct_Gets(p *radius.Packet) (values []QueueLenAcct, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 165) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueLenAcct(i))
	}
	return
}

func QueueLenAcct_Lookup(p *radius.Packet) (value QueueLenAcct, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueLenAcct(i)
	return
}

func QueueLenAcct_Set(p *radius.Packet, value QueueLenAcct) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 165, a)
}

func QueueLenAcct_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 165)
}

type QueueLenDetail uint32

var QueueLenDetail_Strings = map[QueueLenDetail]string{}

func (a QueueLenDetail) String() string {
	if str, ok := QueueLenDetail_Strings[a]; ok {
		return str
	}
	return "QueueLenDetail(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueLenDetail_Add(p *radius.Packet, value QueueLenDetail) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 166, a)
}

func QueueLenDetail_Get(p *radius.Packet) (value QueueLenDetail) {
	value, _ = QueueLenDetail_Lookup(p)
	return
}

func QueueLenDetail_Gets(p *radius.Packet) (values []QueueLenDetail, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 166) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueLenDetail(i))
	}
	return
}

func QueueLenDetail_Lookup(p *radius.Packet) (value QueueLenDetail, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueLenDetail(i)
	return
}

func QueueLenDetail_Set(p *radius.Packet, value QueueLenDetail) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 166, a)
}

func QueueLenDetail_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 166)
}

func StatsClientIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 167, a)
}

func StatsClientIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = StatsClientIPAddress_Lookup(p)
	return
}

func StatsClientIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _FreeRADIUS_GetsVendor(p, 167) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsClientIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func StatsClientIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 167, a)
}

func StatsClientIPAddress_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 167)
}

type StatsClientNumber uint32

var StatsClientNumber_Strings = map[StatsClientNumber]string{}

func (a StatsClientNumber) String() string {
	if str, ok := StatsClientNumber_Strings[a]; ok {
		return str
	}
	return "StatsClientNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatsClientNumber_Add(p *radius.Packet, value StatsClientNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 168, a)
}

func StatsClientNumber_Get(p *radius.Packet) (value StatsClientNumber) {
	value, _ = StatsClientNumber_Lookup(p)
	return
}

func StatsClientNumber_Gets(p *radius.Packet) (values []StatsClientNumber, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 168) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatsClientNumber(i))
	}
	return
}

func StatsClientNumber_Lookup(p *radius.Packet) (value StatsClientNumber, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatsClientNumber(i)
	return
}

func StatsClientNumber_Set(p *radius.Packet, value StatsClientNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 168, a)
}

func StatsClientNumber_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 168)
}

type StatsClientNetmask uint32

var StatsClientNetmask_Strings = map[StatsClientNetmask]string{}

func (a StatsClientNetmask) String() string {
	if str, ok := StatsClientNetmask_Strings[a]; ok {
		return str
	}
	return "StatsClientNetmask(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatsClientNetmask_Add(p *radius.Packet, value StatsClientNetmask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 169, a)
}

func StatsClientNetmask_Get(p *radius.Packet) (value StatsClientNetmask) {
	value, _ = StatsClientNetmask_Lookup(p)
	return
}

func StatsClientNetmask_Gets(p *radius.Packet) (values []StatsClientNetmask, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 169) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatsClientNetmask(i))
	}
	return
}

func StatsClientNetmask_Lookup(p *radius.Packet) (value StatsClientNetmask, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 169)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatsClientNetmask(i)
	return
}

func StatsClientNetmask_Set(p *radius.Packet, value StatsClientNetmask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 169, a)
}

func StatsClientNetmask_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 169)
}

func StatsServerIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 170, a)
}

func StatsServerIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = StatsServerIPAddress_Lookup(p)
	return
}

func StatsServerIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _FreeRADIUS_GetsVendor(p, 170) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsServerIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func StatsServerIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 170, a)
}

func StatsServerIPAddress_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 170)
}

type StatsServerPort uint32

var StatsServerPort_Strings = map[StatsServerPort]string{}

func (a StatsServerPort) String() string {
	if str, ok := StatsServerPort_Strings[a]; ok {
		return str
	}
	return "StatsServerPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatsServerPort_Add(p *radius.Packet, value StatsServerPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 171, a)
}

func StatsServerPort_Get(p *radius.Packet) (value StatsServerPort) {
	value, _ = StatsServerPort_Lookup(p)
	return
}

func StatsServerPort_Gets(p *radius.Packet) (values []StatsServerPort, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 171) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatsServerPort(i))
	}
	return
}

func StatsServerPort_Lookup(p *radius.Packet) (value StatsServerPort, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatsServerPort(i)
	return
}

func StatsServerPort_Set(p *radius.Packet, value StatsServerPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 171, a)
}

func StatsServerPort_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 171)
}

type StatsServerOutstandingRequests uint32

var StatsServerOutstandingRequests_Strings = map[StatsServerOutstandingRequests]string{}

func (a StatsServerOutstandingRequests) String() string {
	if str, ok := StatsServerOutstandingRequests_Strings[a]; ok {
		return str
	}
	return "StatsServerOutstandingRequests(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatsServerOutstandingRequests_Add(p *radius.Packet, value StatsServerOutstandingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 172, a)
}

func StatsServerOutstandingRequests_Get(p *radius.Packet) (value StatsServerOutstandingRequests) {
	value, _ = StatsServerOutstandingRequests_Lookup(p)
	return
}

func StatsServerOutstandingRequests_Gets(p *radius.Packet) (values []StatsServerOutstandingRequests, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 172) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatsServerOutstandingRequests(i))
	}
	return
}

func StatsServerOutstandingRequests_Lookup(p *radius.Packet) (value StatsServerOutstandingRequests, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 172)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatsServerOutstandingRequests(i)
	return
}

func StatsServerOutstandingRequests_Set(p *radius.Packet, value StatsServerOutstandingRequests) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 172, a)
}

func StatsServerOutstandingRequests_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 172)
}

type StatsServerState uint32

const (
	StatsServerState_Value_Alive  StatsServerState = 0
	StatsServerState_Value_Zombie StatsServerState = 1
	StatsServerState_Value_Dead   StatsServerState = 2
	StatsServerState_Value_Idle   StatsServerState = 3
)

var StatsServerState_Strings = map[StatsServerState]string{
	StatsServerState_Value_Alive:  "Alive",
	StatsServerState_Value_Zombie: "Zombie",
	StatsServerState_Value_Dead:   "Dead",
	StatsServerState_Value_Idle:   "Idle",
}

func (a StatsServerState) String() string {
	if str, ok := StatsServerState_Strings[a]; ok {
		return str
	}
	return "StatsServerState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func StatsServerState_Add(p *radius.Packet, value StatsServerState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 173, a)
}

func StatsServerState_Get(p *radius.Packet) (value StatsServerState) {
	value, _ = StatsServerState_Lookup(p)
	return
}

func StatsServerState_Gets(p *radius.Packet) (values []StatsServerState, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 173) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, StatsServerState(i))
	}
	return
}

func StatsServerState_Lookup(p *radius.Packet) (value StatsServerState, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 173)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = StatsServerState(i)
	return
}

func StatsServerState_Set(p *radius.Packet, value StatsServerState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 173, a)
}

func StatsServerState_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 173)
}

func StatsServerTimeOfDeath_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 174, a)
}

func StatsServerTimeOfDeath_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsServerTimeOfDeath_Lookup(p)
	return
}

func StatsServerTimeOfDeath_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 174) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsServerTimeOfDeath_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsServerTimeOfDeath_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 174, a)
}

func StatsServerTimeOfDeath_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 174)
}

func StatsServerTimeOfLife_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 175, a)
}

func StatsServerTimeOfLife_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsServerTimeOfLife_Lookup(p)
	return
}

func StatsServerTimeOfLife_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 175) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsServerTimeOfLife_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 175)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsServerTimeOfLife_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 175, a)
}

func StatsServerTimeOfLife_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 175)
}

func StatsStartTime_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 176, a)
}

func StatsStartTime_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsStartTime_Lookup(p)
	return
}

func StatsStartTime_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 176) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsStartTime_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsStartTime_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 176, a)
}

func StatsStartTime_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 176)
}

func StatsHUPTime_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 177, a)
}

func StatsHUPTime_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsHUPTime_Lookup(p)
	return
}

func StatsHUPTime_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 177) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsHUPTime_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsHUPTime_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 177, a)
}

func StatsHUPTime_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 177)
}

type ServerEMAWindow uint32

var ServerEMAWindow_Strings = map[ServerEMAWindow]string{}

func (a ServerEMAWindow) String() string {
	if str, ok := ServerEMAWindow_Strings[a]; ok {
		return str
	}
	return "ServerEMAWindow(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServerEMAWindow_Add(p *radius.Packet, value ServerEMAWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 178, a)
}

func ServerEMAWindow_Get(p *radius.Packet) (value ServerEMAWindow) {
	value, _ = ServerEMAWindow_Lookup(p)
	return
}

func ServerEMAWindow_Gets(p *radius.Packet) (values []ServerEMAWindow, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 178) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServerEMAWindow(i))
	}
	return
}

func ServerEMAWindow_Lookup(p *radius.Packet) (value ServerEMAWindow, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServerEMAWindow(i)
	return
}

func ServerEMAWindow_Set(p *radius.Packet, value ServerEMAWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 178, a)
}

func ServerEMAWindow_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 178)
}

type ServerEMAUSECWindow1 uint32

var ServerEMAUSECWindow1_Strings = map[ServerEMAUSECWindow1]string{}

func (a ServerEMAUSECWindow1) String() string {
	if str, ok := ServerEMAUSECWindow1_Strings[a]; ok {
		return str
	}
	return "ServerEMAUSECWindow1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServerEMAUSECWindow1_Add(p *radius.Packet, value ServerEMAUSECWindow1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 179, a)
}

func ServerEMAUSECWindow1_Get(p *radius.Packet) (value ServerEMAUSECWindow1) {
	value, _ = ServerEMAUSECWindow1_Lookup(p)
	return
}

func ServerEMAUSECWindow1_Gets(p *radius.Packet) (values []ServerEMAUSECWindow1, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 179) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServerEMAUSECWindow1(i))
	}
	return
}

func ServerEMAUSECWindow1_Lookup(p *radius.Packet) (value ServerEMAUSECWindow1, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 179)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServerEMAUSECWindow1(i)
	return
}

func ServerEMAUSECWindow1_Set(p *radius.Packet, value ServerEMAUSECWindow1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 179, a)
}

func ServerEMAUSECWindow1_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 179)
}

type ServerEMAUSECWindow10 uint32

var ServerEMAUSECWindow10_Strings = map[ServerEMAUSECWindow10]string{}

func (a ServerEMAUSECWindow10) String() string {
	if str, ok := ServerEMAUSECWindow10_Strings[a]; ok {
		return str
	}
	return "ServerEMAUSECWindow10(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServerEMAUSECWindow10_Add(p *radius.Packet, value ServerEMAUSECWindow10) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 180, a)
}

func ServerEMAUSECWindow10_Get(p *radius.Packet) (value ServerEMAUSECWindow10) {
	value, _ = ServerEMAUSECWindow10_Lookup(p)
	return
}

func ServerEMAUSECWindow10_Gets(p *radius.Packet) (values []ServerEMAUSECWindow10, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 180) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServerEMAUSECWindow10(i))
	}
	return
}

func ServerEMAUSECWindow10_Lookup(p *radius.Packet) (value ServerEMAUSECWindow10, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServerEMAUSECWindow10(i)
	return
}

func ServerEMAUSECWindow10_Set(p *radius.Packet, value ServerEMAUSECWindow10) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 180, a)
}

func ServerEMAUSECWindow10_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 180)
}

type QueuePPSIn uint32

var QueuePPSIn_Strings = map[QueuePPSIn]string{}

func (a QueuePPSIn) String() string {
	if str, ok := QueuePPSIn_Strings[a]; ok {
		return str
	}
	return "QueuePPSIn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueuePPSIn_Add(p *radius.Packet, value QueuePPSIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 181, a)
}

func QueuePPSIn_Get(p *radius.Packet) (value QueuePPSIn) {
	value, _ = QueuePPSIn_Lookup(p)
	return
}

func QueuePPSIn_Gets(p *radius.Packet) (values []QueuePPSIn, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 181) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueuePPSIn(i))
	}
	return
}

func QueuePPSIn_Lookup(p *radius.Packet) (value QueuePPSIn, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueuePPSIn(i)
	return
}

func QueuePPSIn_Set(p *radius.Packet, value QueuePPSIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 181, a)
}

func QueuePPSIn_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 181)
}

type QueuePPSOut uint32

var QueuePPSOut_Strings = map[QueuePPSOut]string{}

func (a QueuePPSOut) String() string {
	if str, ok := QueuePPSOut_Strings[a]; ok {
		return str
	}
	return "QueuePPSOut(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueuePPSOut_Add(p *radius.Packet, value QueuePPSOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 182, a)
}

func QueuePPSOut_Get(p *radius.Packet) (value QueuePPSOut) {
	value, _ = QueuePPSOut_Lookup(p)
	return
}

func QueuePPSOut_Gets(p *radius.Packet) (values []QueuePPSOut, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 182) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueuePPSOut(i))
	}
	return
}

func QueuePPSOut_Lookup(p *radius.Packet) (value QueuePPSOut, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueuePPSOut(i)
	return
}

func QueuePPSOut_Set(p *radius.Packet, value QueuePPSOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 182, a)
}

func QueuePPSOut_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 182)
}

type QueueUsePercentage uint32

var QueueUsePercentage_Strings = map[QueueUsePercentage]string{}

func (a QueueUsePercentage) String() string {
	if str, ok := QueueUsePercentage_Strings[a]; ok {
		return str
	}
	return "QueueUsePercentage(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func QueueUsePercentage_Add(p *radius.Packet, value QueueUsePercentage) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_AddVendor(p, 183, a)
}

func QueueUsePercentage_Get(p *radius.Packet) (value QueueUsePercentage) {
	value, _ = QueueUsePercentage_Lookup(p)
	return
}

func QueueUsePercentage_Gets(p *radius.Packet) (values []QueueUsePercentage, err error) {
	var i uint32
	for _, attr := range _FreeRADIUS_GetsVendor(p, 183) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, QueueUsePercentage(i))
	}
	return
}

func QueueUsePercentage_Lookup(p *radius.Packet) (value QueueUsePercentage, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = QueueUsePercentage(i)
	return
}

func QueueUsePercentage_Set(p *radius.Packet, value QueueUsePercentage) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FreeRADIUS_SetVendor(p, 183, a)
}

func QueueUsePercentage_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 183)
}

func StatsLastPacketRecv_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 184, a)
}

func StatsLastPacketRecv_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsLastPacketRecv_Lookup(p)
	return
}

func StatsLastPacketRecv_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 184) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsLastPacketRecv_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsLastPacketRecv_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 184, a)
}

func StatsLastPacketRecv_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 184)
}

func StatsLastPacketSent_Add(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_AddVendor(p, 185, a)
}

func StatsLastPacketSent_Get(p *radius.Packet) (value time.Time) {
	value, _ = StatsLastPacketSent_Lookup(p)
	return
}

func StatsLastPacketSent_Gets(p *radius.Packet) (values []time.Time, err error) {
	var i time.Time
	for _, attr := range _FreeRADIUS_GetsVendor(p, 185) {
		i, err = radius.Date(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func StatsLastPacketSent_Lookup(p *radius.Packet) (value time.Time, err error) {
	a, ok := _FreeRADIUS_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.Date(a)
	return
}

func StatsLastPacketSent_Set(p *radius.Packet, value time.Time) (err error) {
	var a radius.Attribute
	a, err = radius.NewDate(value)
	if err != nil {
		return
	}
	return _FreeRADIUS_SetVendor(p, 185, a)
}

func StatsLastPacketSent_Del(p *radius.Packet) {
	_FreeRADIUS_DelVendor(p, 185)
}
