// Code generated by radius-dict-gen. DO NOT EDIT.

package ciena6500

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Ciena6500_VendorID = 562
)

func _Ciena6500_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Ciena6500_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Ciena6500_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ciena6500_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ciena6500_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ciena6500_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ciena6500_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Ciena6500_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Ciena6500_AddVendor(p, typ, attr)
}

func _Ciena6500_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Ciena6500_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func Ciena6500LastLoginTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 3, a)
}

func Ciena6500LastLoginTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 3, a)
}

func Ciena6500LastLoginTime_Get(p *radius.Packet) (value []byte) {
	value, _ = Ciena6500LastLoginTime_Lookup(p)
	return
}

func Ciena6500LastLoginTime_GetString(p *radius.Packet) (value string) {
	value, _ = Ciena6500LastLoginTime_LookupString(p)
	return
}

func Ciena6500LastLoginTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ciena6500_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastLoginTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ciena6500_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastLoginTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Ciena6500LastLoginTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Ciena6500LastLoginTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 3, a)
}

func Ciena6500LastLoginTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 3, a)
}

func Ciena6500LastLoginTime_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 3)
}

func Ciena6500LastLoginLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 4, a)
}

func Ciena6500LastLoginLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 4, a)
}

func Ciena6500LastLoginLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = Ciena6500LastLoginLocation_Lookup(p)
	return
}

func Ciena6500LastLoginLocation_GetString(p *radius.Packet) (value string) {
	value, _ = Ciena6500LastLoginLocation_LookupString(p)
	return
}

func Ciena6500LastLoginLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ciena6500_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastLoginLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ciena6500_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastLoginLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Ciena6500LastLoginLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Ciena6500LastLoginLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 4, a)
}

func Ciena6500LastLoginLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 4, a)
}

func Ciena6500LastLoginLocation_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 4)
}

type Ciena6500FailedLoginAttempts uint32

var Ciena6500FailedLoginAttempts_Strings = map[Ciena6500FailedLoginAttempts]string{}

func (a Ciena6500FailedLoginAttempts) String() string {
	if str, ok := Ciena6500FailedLoginAttempts_Strings[a]; ok {
		return str
	}
	return "Ciena6500FailedLoginAttempts(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func Ciena6500FailedLoginAttempts_Add(p *radius.Packet, value Ciena6500FailedLoginAttempts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_AddVendor(p, 5, a)
}

func Ciena6500FailedLoginAttempts_Get(p *radius.Packet) (value Ciena6500FailedLoginAttempts) {
	value, _ = Ciena6500FailedLoginAttempts_Lookup(p)
	return
}

func Ciena6500FailedLoginAttempts_Gets(p *radius.Packet) (values []Ciena6500FailedLoginAttempts, err error) {
	var i uint32
	for _, attr := range _Ciena6500_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, Ciena6500FailedLoginAttempts(i))
	}
	return
}

func Ciena6500FailedLoginAttempts_Lookup(p *radius.Packet) (value Ciena6500FailedLoginAttempts, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = Ciena6500FailedLoginAttempts(i)
	return
}

func Ciena6500FailedLoginAttempts_Set(p *radius.Packet, value Ciena6500FailedLoginAttempts) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_SetVendor(p, 5, a)
}

func Ciena6500FailedLoginAttempts_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 5)
}

func Ciena6500LastFailedLoginLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 6, a)
}

func Ciena6500LastFailedLoginLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_AddVendor(p, 6, a)
}

func Ciena6500LastFailedLoginLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = Ciena6500LastFailedLoginLocation_Lookup(p)
	return
}

func Ciena6500LastFailedLoginLocation_GetString(p *radius.Packet) (value string) {
	value, _ = Ciena6500LastFailedLoginLocation_LookupString(p)
	return
}

func Ciena6500LastFailedLoginLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ciena6500_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastFailedLoginLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ciena6500_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Ciena6500LastFailedLoginLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Ciena6500LastFailedLoginLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Ciena6500LastFailedLoginLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 6, a)
}

func Ciena6500LastFailedLoginLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ciena6500_SetVendor(p, 6, a)
}

func Ciena6500LastFailedLoginLocation_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 6)
}

type Ciena6500PwdExpWarn uint32

var Ciena6500PwdExpWarn_Strings = map[Ciena6500PwdExpWarn]string{}

func (a Ciena6500PwdExpWarn) String() string {
	if str, ok := Ciena6500PwdExpWarn_Strings[a]; ok {
		return str
	}
	return "Ciena6500PwdExpWarn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func Ciena6500PwdExpWarn_Add(p *radius.Packet, value Ciena6500PwdExpWarn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_AddVendor(p, 7, a)
}

func Ciena6500PwdExpWarn_Get(p *radius.Packet) (value Ciena6500PwdExpWarn) {
	value, _ = Ciena6500PwdExpWarn_Lookup(p)
	return
}

func Ciena6500PwdExpWarn_Gets(p *radius.Packet) (values []Ciena6500PwdExpWarn, err error) {
	var i uint32
	for _, attr := range _Ciena6500_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, Ciena6500PwdExpWarn(i))
	}
	return
}

func Ciena6500PwdExpWarn_Lookup(p *radius.Packet) (value Ciena6500PwdExpWarn, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = Ciena6500PwdExpWarn(i)
	return
}

func Ciena6500PwdExpWarn_Set(p *radius.Packet, value Ciena6500PwdExpWarn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_SetVendor(p, 7, a)
}

func Ciena6500PwdExpWarn_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 7)
}

type Ciena6500UserPrivCode uint32

const (
	Ciena6500UserPrivCode_Value_UPCL1MONITOR Ciena6500UserPrivCode = 1
	Ciena6500UserPrivCode_Value_UPCL2MAINT   Ciena6500UserPrivCode = 2
	Ciena6500UserPrivCode_Value_UPCL3PROV    Ciena6500UserPrivCode = 3
	Ciena6500UserPrivCode_Value_UPCL4ADMIN   Ciena6500UserPrivCode = 4
	Ciena6500UserPrivCode_Value_UPCL5SURVEIL Ciena6500UserPrivCode = 5
)

var Ciena6500UserPrivCode_Strings = map[Ciena6500UserPrivCode]string{
	Ciena6500UserPrivCode_Value_UPCL1MONITOR: "UPC-L1-MONITOR",
	Ciena6500UserPrivCode_Value_UPCL2MAINT:   "UPC-L2-MAINT",
	Ciena6500UserPrivCode_Value_UPCL3PROV:    "UPC-L3-PROV",
	Ciena6500UserPrivCode_Value_UPCL4ADMIN:   "UPC-L4-ADMIN",
	Ciena6500UserPrivCode_Value_UPCL5SURVEIL: "UPC-L5-SURVEIL",
}

func (a Ciena6500UserPrivCode) String() string {
	if str, ok := Ciena6500UserPrivCode_Strings[a]; ok {
		return str
	}
	return "Ciena6500UserPrivCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func Ciena6500UserPrivCode_Add(p *radius.Packet, value Ciena6500UserPrivCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_AddVendor(p, 216, a)
}

func Ciena6500UserPrivCode_Get(p *radius.Packet) (value Ciena6500UserPrivCode) {
	value, _ = Ciena6500UserPrivCode_Lookup(p)
	return
}

func Ciena6500UserPrivCode_Gets(p *radius.Packet) (values []Ciena6500UserPrivCode, err error) {
	var i uint32
	for _, attr := range _Ciena6500_GetsVendor(p, 216) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, Ciena6500UserPrivCode(i))
	}
	return
}

func Ciena6500UserPrivCode_Lookup(p *radius.Packet) (value Ciena6500UserPrivCode, err error) {
	a, ok := _Ciena6500_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = Ciena6500UserPrivCode(i)
	return
}

func Ciena6500UserPrivCode_Set(p *radius.Packet, value Ciena6500UserPrivCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ciena6500_SetVendor(p, 216, a)
}

func Ciena6500UserPrivCode_Del(p *radius.Packet) {
	_Ciena6500_DelVendor(p, 216)
}
